<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[69log]]></title>
  <subtitle><![CDATA[福岡でwebの仕事をしています]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.kazu69.net/"/>
  <updated>2016-08-18T04:45:43.000Z</updated>
  <id>http://blog.kazu69.net/</id>
  
  <author>
    <name><![CDATA[kazu69]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[docker swarm mode を試してみる]]></title>
    <link href="http://blog.kazu69.net/2016/08/09/try-docker-swarm-mode/"/>
    <id>http://blog.kazu69.net/2016/08/09/try-docker-swarm-mode/</id>
    <published>2016-08-09T09:17:13.000Z</published>
    <updated>2016-08-18T04:45:43.000Z</updated>
    <content type="html"><![CDATA[<p>docker engine 1.12から標準で搭載されたswarm modeを試してみる。<br>swarm(群れ)という意味で、クラスタリング構成機構のこと。<br>swarm modeはdocker engine v1.12.0-rc1で統合された機能である。</p>
<a id="more"></a>
<p>swarm modeではクラスタをアプリケーション単位での管理し、<br>複数ホスト間で共有されるネットワークを持っているので、<br>外部のネットワークからのトラフィックをロード・バランシングできるという。</p>
<p>ということで、<a href="tps://pocketstudio.net/2016/06/23/docker-1-12-swarm-mode-and-ingress-load-balancing/" target="_blank" rel="external">チュートリアル</a>に沿って一通り眺める。</p>
<h2 id="node_u306E_u4F5C_u6210"><a href="#node_u306E_u4F5C_u6210" class="headerlink" title="nodeの作成"></a>nodeの作成</h2><table>
<thead>
<tr>
<th>node</th>
<th>role</th>
</tr>
</thead>
<tbody>
<tr>
<td>manager</td>
<td>master</td>
</tr>
<tr>
<td>worker1</td>
<td>worker</td>
</tr>
<tr>
<td>worker2</td>
<td>worker</td>
</tr>
</tbody>
</table>
<p>各ホストでdocker engine(dockerデーモン)を起動させる。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker-machine create <span class="_">-d</span> virtualbox manager</span><br><span class="line">docker-machine create <span class="_">-d</span> virtualbox worker1</span><br><span class="line">docker-machine create <span class="_">-d</span> virtualbox worker2</span><br><span class="line"></span><br><span class="line">NAME      ACTIVE   DRIVER       STATE     URL                         SWARM   DOCKER    ERRORS</span><br><span class="line">manager   *        virtualbox   Running   tcp://192.168.99.100:2376           v1.12.0</span><br><span class="line">worker1   -        virtualbox   Running   tcp://192.168.99.101:2376           v1.12.0</span><br><span class="line">worker2   -        virtualbox   Running   tcp://192.168.99.102:2376           v1.12.0</span><br><span class="line">docker-machine ip manager</span><br><span class="line">192.168.99.100</span><br></pre></td></tr></table></figure>
<h2 id="u30AF_u30E9_u30B9_u30BF_u3092_u521D_u671F_u5316"><a href="#u30AF_u30E9_u30B9_u30BF_u3092_u521D_u671F_u5316" class="headerlink" title="クラスタを初期化"></a>クラスタを初期化</h2><p>swarm initで、クラスタを初期化すると、tokenが発行される。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker@manager</span></span><br><span class="line"></span><br><span class="line">docker swarm init --advertise-addr 192.168.99.100</span><br><span class="line">Swarm initialized: current node (5golpgkwh376tmddgzqcqzjpl) is now a manager.</span><br><span class="line"></span><br><span class="line">To add a worker to this swarm, run the following <span class="built_in">command</span>:</span><br><span class="line">    docker swarm join \</span><br><span class="line">    --token SWMTKN-1-0vbcihcfezog02z78j4cpmbptt5d917mcm71w0dbbxol0k8pgb-emc5tzyg4ri30i2uqrqlyi6yq \</span><br><span class="line">    192.168.99.100:2377</span><br><span class="line"></span><br><span class="line">To add a manager to this swarm, run the following <span class="built_in">command</span>:</span><br><span class="line">    docker swarm join \</span><br><span class="line">    --token SWMTKN-1-0vbcihcfezog02z78j4cpmbptt5d917mcm71w0dbbxol0k8pgb-dm8ugwds89z972yhngfgmv74l \</span><br><span class="line">    192.168.99.100:2377</span><br></pre></td></tr></table></figure>
<p>docker infoでswarmの現在の状況を確認してみる。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker@manager</span></span><br><span class="line"></span><br><span class="line">docker info</span><br><span class="line">Containers: 0</span><br><span class="line"> Running: 0</span><br><span class="line"> Paused: 0</span><br><span class="line"> Stopped: 0</span><br><span class="line">Images: 0</span><br><span class="line">Server Version: 1.12.0</span><br><span class="line">Storage Driver: aufs</span><br><span class="line"> Root Dir: /mnt/sda1/var/lib/docker/aufs</span><br><span class="line"> Backing Filesystem: extfs</span><br><span class="line"> Dirs: 0</span><br><span class="line"> Dirperm1 Supported: <span class="literal">true</span></span><br><span class="line">Logging Driver: json-file</span><br><span class="line">Cgroup Driver: cgroupfs</span><br><span class="line">Plugins:</span><br><span class="line"> Volume: <span class="built_in">local</span></span><br><span class="line"> Network: host bridge overlay null</span><br><span class="line">Swarm: active</span><br><span class="line"> NodeID: 5golpgkwh376tmddgzqcqzjpl</span><br><span class="line"> Is Manager: <span class="literal">true</span></span><br><span class="line"> ClusterID: 7lpo0u0u57yryce83q22ne3ot</span><br><span class="line"> Managers: 1</span><br><span class="line"> Nodes:</span><br><span class="line"> ...</span><br><span class="line"> ...</span><br><span class="line"></span><br><span class="line">docker node ls</span><br><span class="line">ID                           HOSTNAME  STATUS  AVAILABILITY  MANAGER STATUS</span><br><span class="line">5golpgkwh376tmddgzqcqzjpl *  manager   Ready   Active        Leader</span><br></pre></td></tr></table></figure>
<h2 id="u30AF_u30E9_u30B9_u30BF_u306B_u8FFD_u52A0"><a href="#u30AF_u30E9_u30B9_u30BF_u306B_u8FFD_u52A0" class="headerlink" title="クラスタに追加"></a>クラスタに追加</h2><p>workder1, worker2をswarmクラスタにworkerとして追加する。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker@worker1</span></span><br><span class="line"></span><br><span class="line">docker swarm join --token SWMTKN-1-0vbcihcfezog02z78j4cpmbptt5d917mcm71w0dbbxol0k8pgb-emc5tzyg4ri30i2uqrqlyi6yq 192.168.99.100:2377</span><br><span class="line">This node joined a swarm as a worker.</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker@worker2</span></span><br><span class="line"></span><br><span class="line">docker swarm join --token SWMTKN-1-0vbcihcfezog02z78j4cpmbptt5d917mcm71w0dbbxol0k8pgb-emc5tzyg4ri30i2uqrqlyi6yq 192.168.99.100:2377</span><br><span class="line">This node joined a swarm as a worker.</span><br></pre></td></tr></table></figure>
<p>追加したnodeがswarmクラスタに追加されいることを確認する。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker@manager</span></span><br><span class="line"></span><br><span class="line">docker node ls</span><br><span class="line">ID                           HOSTNAME  STATUS  AVAILABILITY  MANAGER STATUS</span><br><span class="line">0mfxd3hhndyd7i4uncbiprek4    worker2   Ready   Active</span><br><span class="line">5golpgkwh376tmddgzqcqzjpl *  manager   Ready   Active        Leader</span><br><span class="line">cwdb1t7e3o9rstaiudaxswzu9    worker1   Ready   Active</span><br></pre></td></tr></table></figure>
<h2 id="ingress_u30CD_u30C3_u30C8_u30EF_u30FC_u30AF_u306E_u4F5C_u6210"><a href="#ingress_u30CD_u30C3_u30C8_u30EF_u30FC_u30AF_u306E_u4F5C_u6210" class="headerlink" title="ingressネットワークの作成"></a>ingressネットワークの作成</h2><p>ingressネットワーク(ingress)を作成し、ロードバランスする。<br>複数ホスト間のコンテナで外部からのリクエストをルーティングし、ロードバランシングできるようになる。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker@manager</span></span><br><span class="line"></span><br><span class="line">docker network create <span class="_">-d</span> overlay testnetwork</span><br><span class="line">0s19bsmqf8wcblaur5ryb8biq</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker@manager</span></span><br><span class="line"></span><br><span class="line">docker network ls</span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">a2fab6cccfde        bridge              bridge              <span class="built_in">local</span></span><br><span class="line">3b4e201a5b10        docker_gwbridge     bridge              <span class="built_in">local</span></span><br><span class="line">cc20b3e97d14        host                host                <span class="built_in">local</span></span><br><span class="line">6uoqnkw5ei76        ingress             overlay             swarm</span><br><span class="line">83f4a43f1315        none                null                <span class="built_in">local</span></span><br><span class="line">0s19bsmqf8wc        testnetwork         overlay             swarm</span><br><span class="line"></span><br><span class="line">docker network inspect testnetwork</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"Name"</span>: <span class="string">"testnetwork"</span>,</span><br><span class="line">        <span class="string">"Id"</span>: <span class="string">"0s19bsmqf8wcblaur5ryb8biq"</span>,</span><br><span class="line">        <span class="string">"Scope"</span>: <span class="string">"swarm"</span>,</span><br><span class="line">        <span class="string">"Driver"</span>: <span class="string">"overlay"</span>,</span><br><span class="line">        <span class="string">"EnableIPv6"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"IPAM"</span>: &#123;</span><br><span class="line">            <span class="string">"Driver"</span>: <span class="string">"default"</span>,</span><br><span class="line">            <span class="string">"Options"</span>: null,</span><br><span class="line">            <span class="string">"Config"</span>: []</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"Internal"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"Containers"</span>: null,</span><br><span class="line">        <span class="string">"Options"</span>: &#123;</span><br><span class="line">            <span class="string">"com.docker.network.driver.overlay.vxlanid_list"</span>: <span class="string">"257"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"Labels"</span>: null</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>もうちょっとingressネットワークを見てみる。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker@manager</span></span><br><span class="line"></span><br><span class="line">docker network inspect 6uoqnkw5ei76</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"Name"</span>: <span class="string">"ingress"</span>,</span><br><span class="line">        <span class="string">"Id"</span>: <span class="string">"6uoqnkw5ei76chns289v0oaei"</span>,</span><br><span class="line">        <span class="string">"Scope"</span>: <span class="string">"swarm"</span>,</span><br><span class="line">        <span class="string">"Driver"</span>: <span class="string">"overlay"</span>,</span><br><span class="line">        <span class="string">"EnableIPv6"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"IPAM"</span>: &#123;</span><br><span class="line">            <span class="string">"Driver"</span>: <span class="string">"default"</span>,</span><br><span class="line">            <span class="string">"Options"</span>: null,</span><br><span class="line">            <span class="string">"Config"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">"Subnet"</span>: <span class="string">"10.255.0.0/16"</span>,</span><br><span class="line">                    <span class="string">"Gateway"</span>: <span class="string">"10.255.0.1"</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"Internal"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"Containers"</span>: &#123;</span><br><span class="line">            <span class="string">"745c0806c4f7082995dd1cb8d04dca6becc6dbe820aad717fcefb34811387d57"</span>: &#123;</span><br><span class="line">                <span class="string">"Name"</span>: <span class="string">"nginx.1.5nhg56y2vohlevb6p4a1xuwjq"</span>,</span><br><span class="line">                <span class="string">"EndpointID"</span>: <span class="string">"f33f63c27b2d75fa7272e57fb193e291dab588a6f7fc51f0e508b7caf8bb36b2"</span>,</span><br><span class="line">                <span class="string">"MacAddress"</span>: <span class="string">"02:42:0a:ff:00:05"</span>,</span><br><span class="line">                <span class="string">"IPv4Address"</span>: <span class="string">"10.255.0.5/16"</span>,</span><br><span class="line">                <span class="string">"IPv6Address"</span>: <span class="string">""</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"8b4cd33138e9c9262b31a70ba0103535c6a3828b45f3dc6eb9a5ee5c07c07e29"</span>: &#123;</span><br><span class="line">                <span class="string">"Name"</span>: <span class="string">"nginx.2.8uu9u366fqpda3vm69dzdfr1z"</span>,</span><br><span class="line">                <span class="string">"EndpointID"</span>: <span class="string">"e73c1b17fe8a5ee98081a33d70abada0852cadd553912504713795059080dd07"</span>,</span><br><span class="line">                <span class="string">"MacAddress"</span>: <span class="string">"02:42:0a:ff:00:06"</span>,</span><br><span class="line">                <span class="string">"IPv4Address"</span>: <span class="string">"10.255.0.6/16"</span>,</span><br><span class="line">                <span class="string">"IPv6Address"</span>: <span class="string">""</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"8b4cd33138e9c9262b31a70ba0103535c6a3828b45f3dc6eb9a5ee5c07c07e29"</span>: &#123;</span><br><span class="line">                <span class="string">"Name"</span>: <span class="string">"nginx.2.41to6h36vp1i31qad79iiz2qf"</span>,</span><br><span class="line">                <span class="string">"EndpointID"</span>: <span class="string">"745c0806c4f75ee98081a33d70g930s0852cadd55391204713798b4cd33138e9"</span>,</span><br><span class="line">                <span class="string">"MacAddress"</span>: <span class="string">"02:42:0a:ff:00:06"</span>,</span><br><span class="line">                <span class="string">"IPv4Address"</span>: <span class="string">"10.255.0.7/16"</span>,</span><br><span class="line">                <span class="string">"IPv6Address"</span>: <span class="string">""</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"ingress-sbox"</span>: &#123;</span><br><span class="line">                <span class="string">"Name"</span>: <span class="string">"ingress-endpoint"</span>,</span><br><span class="line">                <span class="string">"EndpointID"</span>: <span class="string">"7e9a378dcfeed25805bd7ea78e411df39b06aa9ad347bb6ff0b3fe86f09d44bb"</span>,</span><br><span class="line">                <span class="string">"MacAddress"</span>: <span class="string">"02:42:0a:ff:00:03"</span>,</span><br><span class="line">                <span class="string">"IPv4Address"</span>: <span class="string">"10.255.0.3/16"</span>,</span><br><span class="line">                <span class="string">"IPv6Address"</span>: <span class="string">""</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"Options"</span>: &#123;</span><br><span class="line">            <span class="string">"com.docker.network.driver.overlay.vxlanid_list"</span>: <span class="string">"256"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"Labels"</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>ingress-sbox というコンテナがある。</p>
<p>workerのiptablesを確認</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker@worker1</span></span><br><span class="line"></span><br><span class="line">sudo iptables-save | grep INGRESS</span><br><span class="line">:DOCKER-INGRESS - [0:0]</span><br><span class="line">-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER-INGRESS</span><br><span class="line">-A OUTPUT -m addrtype --dst-type LOCAL -j DOCKER-INGRESS</span><br><span class="line">-A DOCKER-INGRESS -p tcp -m tcp --dport 80 -j DNAT --to-destination 172.18.0.2:80</span><br><span class="line">-A DOCKER-INGRESS -j RETURN</span><br></pre></td></tr></table></figure>
<p>DNATの設定がある。80ポートで受けたリクエストを 172.18.0.2:80 に転送している。<br>この172.18.0.2がingressネットワーク。しかし、172.18.0.2はdockerのコンテナとしてはリストアップされない。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker@worker1</span></span><br><span class="line"></span><br><span class="line">ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: dummy0: &lt;BROADCAST,NOARP&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000</span><br><span class="line">    link/ether ca:f2:56:e6:fe:34 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">3: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 08:00:27:25:2e:6a brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.0.2.15/24 brd 10.0.2.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::a00:27ff:fe25:2e6a/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">4: eth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 08:00:27:87:c3:c8 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.99.104/24 brd 192.168.99.255 scope global eth1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::a00:27ff:fe87:c3c8/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">6: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default</span><br><span class="line">    link/ether 02:42:00:44:03:63 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.1/16 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">11: docker_gwbridge: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class="line">    link/ether 02:42:60:28:a7:82 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.18.0.1/16 scope global docker_gwbridge</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::42:60ff:fe28:a782/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">13: vethff5efce@<span class="keyword">if</span>12: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker_gwbridge state UP group default</span><br><span class="line">    link/ether 32:4b:45:f2:fa:8c brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet6 fe80::304b:45ff:fef2:fa8c/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">18: vethabbd231@<span class="keyword">if</span>17: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker_gwbridge state UP group default</span><br><span class="line">    link/ether f6:c9:ed:48:b7:29 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet6 fe80::f4c9:edff:fe48:b729/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>
<p>ルーティングもみてみる</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker@worker1</span></span><br><span class="line"></span><br><span class="line">ip route</span><br><span class="line">default via 10.0.2.2 dev eth0  metric 1</span><br><span class="line">10.0.2.0/24 dev eth0  proto kernel  scope link  src 10.0.2.15</span><br><span class="line">127.0.0.1 dev lo  scope link</span><br><span class="line">172.17.0.0/16 dev docker0  proto kernel  scope link  src 172.17.0.1</span><br><span class="line">172.18.0.0/16 dev docker_gwbridge  proto kernel  scope link  src 172.18.0.1</span><br><span class="line">192.168.99.0/24 dev eth1  proto kernel  scope link  src 192.168.99.104</span><br></pre></td></tr></table></figure>
<p>どうやらdocker_gwbridgeのもののようだ。managerでも同様にdocker_gwbridgeなるものがあることから、<br>docker_gwbridgeは作成したネットワークに属するnodeすべてに共通で利用されている。<br>ということで、外部からのアクセスにはdocker_gwbridgeを使用している。</p>
<p>ということで、コンテナ間でも通信できるはず。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker@worker1</span></span><br><span class="line"></span><br><span class="line">ping -c 4 192.168.99.100</span><br><span class="line">PING 192.168.99.100 (192.168.99.100): 56 data bytes</span><br><span class="line">64 bytes from 192.168.99.100: seq=0 ttl=64 time=0.459 ms</span><br><span class="line">64 bytes from 192.168.99.100: seq=1 ttl=64 time=0.357 ms</span><br><span class="line">64 bytes from 192.168.99.100: seq=2 ttl=64 time=0.439 ms</span><br><span class="line">64 bytes from 192.168.99.100: seq=3 ttl=64 time=0.374 ms</span><br><span class="line"></span><br><span class="line">--- 192.168.99.100 ping statistics ---</span><br><span class="line">4 packets transmitted, 4 packets received, 0% packet loss</span><br><span class="line">round-trip min/avg/max = 0.357/0.407/0.459 ms</span><br></pre></td></tr></table></figure>
<h2 id="u30B5_u30FC_u30D3_u30B9_u4F5C_u6210"><a href="#u30B5_u30FC_u30D3_u30B9_u4F5C_u6210" class="headerlink" title="サービス作成"></a>サービス作成</h2><p>swarm modeでコンテナを起動するためのserviceを作成する。作成されたnodeをタスクという。<br>–replicasフラグでtask数を指定して作成する。<br>今回はnginxのサービスを作成する。</p>
<p>nginx というサービスを作成し、testnetworkでswarmのポート80をコンテナのポート80に割り当て。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker@manager</span></span><br><span class="line"></span><br><span class="line">docker service create --name nginx --replicas 3 --network testnetwork -p 80:80/tcp nginx</span><br><span class="line">cz4kot5ft0hz8v9euubq75ja2</span><br></pre></td></tr></table></figure>
<p>作成されたサービスの確認</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker@manager</span></span><br><span class="line"></span><br><span class="line">docker service ls</span><br><span class="line">ID            NAME   REPLICAS  IMAGE  COMMAND</span><br><span class="line">cz4kot5ft0hz  nginx  0/3       nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># --pretty で見やすく表示</span></span><br><span class="line">docker service inspect --pretty nginx</span><br><span class="line">ID:     cz4kot5ft0hz8v9euubq75ja2</span><br><span class="line">Name:       nginx</span><br><span class="line">Mode:       Replicated</span><br><span class="line"> Replicas:  3</span><br><span class="line">Placement:</span><br><span class="line">UpdateConfig:</span><br><span class="line"> Parallelism:   1</span><br><span class="line"> On failure:    pause</span><br><span class="line">ContainerSpec:</span><br><span class="line"> Image:     nginx</span><br><span class="line">Resources:</span><br><span class="line">Networks: 0s19bsmqf8wcblaur5ryb8biqPorts:</span><br><span class="line"> Protocol = tcp</span><br><span class="line"> TargetPort = 80</span><br><span class="line"> PublishedPort = 80</span><br><span class="line"></span><br><span class="line"><span class="comment"># nginxのイメージ取得中でpreparingになっている</span></span><br><span class="line">docker service ps nginx</span><br><span class="line">ID                         NAME     IMAGE  NODE     DESIRED STATE  CURRENT STATE                 ERROR</span><br><span class="line">5nhg56y2vohlevb6p4a1xuwjq  nginx.1  nginx  worker2  Running        Running 3 seconds ago</span><br><span class="line">8uu9u366fqpda3vm69dzdfr1z  nginx.2  nginx  worker1  Running        Preparing about a minute ago</span><br><span class="line">41to6h36vp1i31qad79iiz2qf  nginx.3  nginx  manager  Running        Preparing about a minute ago</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再度実行する</span></span><br><span class="line">docker service ps nginx</span><br><span class="line">ID                         NAME     IMAGE  NODE     DESIRED STATE  CURRENT STATE          ERROR</span><br><span class="line">5nhg56y2vohlevb6p4a1xuwjq  nginx.1  nginx  worker2  Running        Running 2 minutes ago</span><br><span class="line">8uu9u366fqpda3vm69dzdfr1z  nginx.2  nginx  worker1  Running        Running 2 minutes ago</span><br><span class="line">41to6h36vp1i31qad79iiz2qf  nginx.3  nginx  manager  Running        Running 2 minutes ago</span><br></pre></td></tr></table></figure>
<p>curl を実行して起動していることを確認</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">curl http://192.168.99.100</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">        width: 35em;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">        font-family: Tahoma, Verdana, Arial, sans-serif;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;For online documentation and support please refer to</span><br><span class="line">&lt;a href=<span class="string">"http://nginx.org/"</span>&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href=<span class="string">"http://nginx.com/"</span>&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you <span class="keyword">for</span> using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h2 id="u30B5_u30FC_u30D3_u30B9_u306E_u30B9_u30B1_u30FC_u30EB_u30A2_u30C3_u30D7_u30FB_u30B9_u30B1_u30FC_u30EB_u30C0_u30A6_u30F3"><a href="#u30B5_u30FC_u30D3_u30B9_u306E_u30B9_u30B1_u30FC_u30EB_u30A2_u30C3_u30D7_u30FB_u30B9_u30B1_u30FC_u30EB_u30C0_u30A6_u30F3" class="headerlink" title="サービスのスケールアップ・スケールダウン"></a>サービスのスケールアップ・スケールダウン</h2><p>スケールアップしてみる。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker@manager</span></span><br><span class="line"></span><br><span class="line">docker service scale nginx=4</span><br><span class="line">nginx scaled to 4</span><br><span class="line"></span><br><span class="line">docker service ps nginx</span><br><span class="line">ID                         NAME     IMAGE  NODE     DESIRED STATE  CURRENT STATE          ERROR</span><br><span class="line">5nhg56y2vohlevb6p4a1xuwjq  nginx.1  nginx  worker2  Running        Running 6 minutes ago</span><br><span class="line">8uu9u366fqpda3vm69dzdfr1z  nginx.2  nginx  worker1  Running        Running 6 minutes ago</span><br><span class="line">41to6h36vp1i31qad79iiz2qf  nginx.3  nginx  manager  Running        Running 6 minutes ago</span><br><span class="line">bn0kohl7ecfcmwoeksy6cowdf  nginx.4  nginx  worker1  Running        Running 4 seconds ago</span><br></pre></td></tr></table></figure>
<p>タスクが4個あることがわかる。<br>続いてスケールダウンする。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker@manager</span></span><br><span class="line"></span><br><span class="line">docker service scale nginx=3</span><br><span class="line">nginx scaled to 3</span><br><span class="line"></span><br><span class="line">docker service ps nginx</span><br><span class="line">ID                         NAME     IMAGE  NODE     DESIRED STATE  CURRENT STATE                    ERROR</span><br><span class="line">5nhg56y2vohlevb6p4a1xuwjq  nginx.1  nginx  worker2  Running        Running 7 minutes ago</span><br><span class="line">8uu9u366fqpda3vm69dzdfr1z  nginx.2  nginx  worker1  Running        Running 7 minutes ago</span><br><span class="line">41to6h36vp1i31qad79iiz2qf  nginx.3  nginx  manager  Running        Running 7 minutes ago</span><br><span class="line">bn0kohl7ecfcmwoeksy6cowdf  nginx.4  nginx  worker1  Shutdown       Shutdown less than a second ago</span><br><span class="line"></span><br><span class="line">docker service ps nginx</span><br><span class="line">ID                         NAME     IMAGE  NODE     DESIRED STATE  CURRENT STATE           ERROR</span><br><span class="line">5nhg56y2vohlevb6p4a1xuwjq  nginx.1  nginx  worker2  Running        Running 7 minutes ago</span><br><span class="line">8uu9u366fqpda3vm69dzdfr1z  nginx.2  nginx  worker1  Running        Running 7 minutes ago</span><br><span class="line">41to6h36vp1i31qad79iiz2qf  nginx.3  nginx  manager  Running        Running 7 minutes ago</span><br><span class="line">bn0kohl7ecfcmwoeksy6cowdf  nginx.4  nginx  worker1  Shutdown       Shutdown 3 seconds ago</span><br></pre></td></tr></table></figure>
<p>タスクが3つに戻った。</p>
<h2 id="u81EA_u52D5_u5FA9_u65E7"><a href="#u81EA_u52D5_u5FA9_u65E7" class="headerlink" title="自動復旧"></a>自動復旧</h2><p>worker2のコンテナをstopして、タスクが自動で復旧することを確認する。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker@worker2</span></span><br><span class="line"></span><br><span class="line">docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</span><br><span class="line">55ce84f00f26        nginx:latest        <span class="string">"nginx -g 'daemon off"</span>   49 seconds ago      Up 48 seconds       80/tcp, 443/tcp     nginx.1.160s9norhjlicvlvrpymar0yz</span><br><span class="line"></span><br><span class="line">docker stop 55ce84f00f26</span><br><span class="line">55ce84f00f26</span><br><span class="line"></span><br><span class="line">docker ps</span><br><span class="line">CONTAINER ID        IMAGE</span><br></pre></td></tr></table></figure>
<p>stopしたこと確認した。しばらくすると自動でコンテナが起動</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker@worker2</span></span><br><span class="line"></span><br><span class="line">docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</span><br><span class="line">6c3d900cb9fe        nginx:latest        <span class="string">"nginx -g 'daemon off"</span>   21 seconds ago      Up 19 seconds       80/tcp, 443/tcp     nginx.1.adgxpo8s9ki82sz3rel26g9cb</span><br></pre></td></tr></table></figure>
<p>タスクは3つになっている。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker@manager</span></span><br><span class="line"></span><br><span class="line">docker service ps nginx</span><br><span class="line">ID                         NAME         IMAGE  NODE     DESIRED STATE  CURRENT STATE               ERROR</span><br><span class="line">adgxpo8s9ki82sz3rel26g9cb  nginx.1      nginx  worker2  Running        Running 45 seconds ago</span><br><span class="line">160s9norhjlicvlvrpymar0yz   \_ nginx.1  nginx  worker2  Shutdown       Complete 51 seconds ago</span><br><span class="line">ci5qqrgppuxvqub8bos8j3dhg  nginx.2      nginx  worker1  Running        Running about a minute ago</span><br><span class="line">bngsjgp2o4tdvczrc623wk7x2  nginx.3      nginx  manager  Running        Running 19 seconds ago</span><br></pre></td></tr></table></figure>
<h2 id="u30ED_u30FC_u30EA_u30F3_u30B0_u30FB_u30A2_u30C3_u30D7_u30C7_u30FC_u30C8"><a href="#u30ED_u30FC_u30EA_u30F3_u30B0_u30FB_u30A2_u30C3_u30D7_u30C7_u30FC_u30C8" class="headerlink" title="ローリング・アップデート"></a>ローリング・アップデート</h2><p>実行中のイメージを差し替えたり、アップデートする際に使う。<br>起動中のコンテナの停止、イメージの取得し起動までを自動で行う。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --update-delay イメージ更新までの遅延時間</span></span><br><span class="line"><span class="comment"># --update-parallelism 同時に更新するtaskの最大数</span></span><br><span class="line">docker service update --update-delay 10s --update-parallelism 1 --image nginx:latest nginx</span><br><span class="line">nginx</span><br><span class="line"></span><br><span class="line">docker service ls</span><br><span class="line">ID            NAME   REPLICAS  IMAGE         COMMAND</span><br><span class="line">4cut0umrm3a3  nginx  2/3       nginx:latest</span><br><span class="line"></span><br><span class="line">docker service ps nginx</span><br><span class="line">ID                         NAME         IMAGE         NODE     DESIRED STATE  CURRENT STATE            ERROR</span><br><span class="line">dzyijvwet9pjz8ac9m65ye4id  nginx.1      nginx:latest  worker2  Running        Running 28 seconds ago</span><br><span class="line">adgxpo8s9ki82sz3rel26g9cb   \_ nginx.1  nginx         worker2  Shutdown       Shutdown 31 seconds ago</span><br><span class="line">160s9norhjlicvlvrpymar0yz   \_ nginx.1  nginx         worker2  Shutdown       Complete 9 minutes ago</span><br><span class="line">bgsr4e1yd8c0q9nyl0wylp3ky  nginx.2      nginx:latest  worker2  Running        Preparing 2 seconds ago</span><br><span class="line">ci5qqrgppuxvqub8bos8j3dhg   \_ nginx.2  nginx         worker1  Shutdown       Shutdown 2 seconds ago</span><br><span class="line">9tt8df7zjj65tgp9l6yx4engd  nginx.3      nginx:latest  manager  Running        Running 13 seconds ago</span><br><span class="line">bngsjgp2o4tdvczrc623wk7x2   \_ nginx.3  nginx         manager  Shutdown       Shutdown 16 seconds ago</span><br></pre></td></tr></table></figure>
<h2 id="drain_28_u89E3_u653E_29"><a href="#drain_28_u89E3_u653E_29" class="headerlink" title="drain(解放)"></a>drain(解放)</h2><p>メンテナンスなどでnodeを個別に切り離す必要があるときなどに、一時的にクラスタから解放する。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">docker node inspect --pretty worker1</span><br><span class="line">ID:         cwdb1t7e3o9rstaiudaxswzu9</span><br><span class="line">Hostname:       worker1</span><br><span class="line">Status:</span><br><span class="line"> State:         Ready</span><br><span class="line"> Availability:      Active</span><br><span class="line">Platform:</span><br><span class="line"> Operating System:  linux</span><br><span class="line"> Architecture:      x86_64</span><br><span class="line">Resources:</span><br><span class="line"> CPUs:          1</span><br><span class="line"> Memory:        995.9 MiB</span><br><span class="line">Plugins:</span><br><span class="line">  Network:      bridge, host, null, overlay</span><br><span class="line">  Volume:       <span class="built_in">local</span></span><br><span class="line">Engine Version:     1.12.0</span><br><span class="line">Engine Labels:</span><br><span class="line"> - provider = virtualbox%</span><br><span class="line"></span><br><span class="line">docker node update --availability drain worker1</span><br><span class="line">worker1</span><br><span class="line"></span><br><span class="line">docker node inspect --pretty worker1</span><br><span class="line">ID:         cwdb1t7e3o9rstaiudaxswzu9</span><br><span class="line">Hostname:       worker1</span><br><span class="line">Status:</span><br><span class="line"> State:         Ready</span><br><span class="line"> Availability:      Drain</span><br><span class="line">Platform:</span><br><span class="line"> Operating System:  linux</span><br><span class="line"> Architecture:      x86_64</span><br><span class="line">Resources:</span><br><span class="line"> CPUs:          1</span><br><span class="line"> Memory:        995.9 MiB</span><br><span class="line">Plugins:</span><br><span class="line">  Network:      bridge, host, null, overlay</span><br><span class="line">  Volume:       <span class="built_in">local</span></span><br><span class="line">Engine Version:     1.12.0</span><br><span class="line">Engine Labels:</span><br><span class="line"> - provider = virtualbox%</span><br><span class="line"></span><br><span class="line">docker service ps nginx</span><br><span class="line">ID                         NAME         IMAGE         NODE     DESIRED STATE  CURRENT STATE            ERROR</span><br><span class="line">4h2qkchax4m34z1pxi61nlnnh  nginx.1      nginx         manager  Running        Running 6 minutes ago</span><br><span class="line">dzyijvwet9pjz8ac9m65ye4id   \_ nginx.1  nginx:latest  worker2  Shutdown       Shutdown 6 minutes ago</span><br><span class="line">adgxpo8s9ki82sz3rel26g9cb   \_ nginx.1  nginx         worker2  Shutdown       Shutdown 31 seconds ago</span><br><span class="line">160s9norhjlicvlvrpymar0yz   \_ nginx.1  nginx         worker2  Shutdown       Complete 9 minutes ago</span><br><span class="line">bgsr4e1yd8c0q9nyl0wylp3ky  nginx.2      nginx:latest  worker2  Running        Preparing 2 seconds ago</span><br><span class="line">ci5qqrgppuxvqub8bos8j3dhg   \_ nginx.2  nginx         worker1  Shutdown       Shutdown 2 seconds ago</span><br><span class="line">9tt8df7zjj65tgp9l6yx4engd  nginx.3      nginx:latest  manager  Running        Running 13 seconds ago</span><br><span class="line">bngsjgp2o4tdvczrc623wk7x2   \_ nginx.3  nginx         manager  Shutdown       Shutdown 16 seconds ago</span><br></pre></td></tr></table></figure>
<p>worker1がdrainされてmanagerがnginx.1タスクを作成している。<br>この状態でdrainしたnodeをアクティブに戻す。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">docker node update --availability active worker1</span><br><span class="line">worker1</span><br><span class="line"></span><br><span class="line">docker node inspect --pretty worker1</span><br><span class="line">ID:         cwdb1t7e3o9rstaiudaxswzu9</span><br><span class="line">Hostname:       worker1</span><br><span class="line">Status:</span><br><span class="line"> State:         Ready</span><br><span class="line"> Availability:      Active</span><br><span class="line">Platform:</span><br><span class="line"> Operating System:  linux</span><br><span class="line"> Architecture:      x86_64</span><br><span class="line">Resources:</span><br><span class="line"> CPUs:          1</span><br><span class="line"> Memory:        995.9 MiB</span><br><span class="line">Plugins:</span><br><span class="line">  Network:      bridge, host, null, overlay</span><br><span class="line">  Volume:       <span class="built_in">local</span></span><br><span class="line">Engine Version:     1.12.0</span><br><span class="line">Engine Labels:</span><br><span class="line"> - provider = virtualbox%</span><br></pre></td></tr></table></figure>
<p>worker1が利用できる状態で待機している。<br>クラスタに追加されている。</p>
<h2 id="u30B5_u30FC_u30D3_u30B9_u306E_u524A_u9664_u3068node_u306E_u524A_u9664"><a href="#u30B5_u30FC_u30D3_u30B9_u306E_u524A_u9664_u3068node_u306E_u524A_u9664" class="headerlink" title="サービスの削除とnodeの削除"></a>サービスの削除とnodeの削除</h2><p>サービスの削除。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker service  ls</span><br><span class="line">ID            NAME   REPLICAS  IMAGE  COMMAND</span><br><span class="line">cz4kot5ft0hz  nginx  3/3       nginx</span><br><span class="line"></span><br><span class="line">docker service rm nginx</span><br><span class="line">nginx</span><br><span class="line"></span><br><span class="line">docker service ls</span><br><span class="line">ID  NAME  REPLICAS  IMAGE  COMMAND</span><br></pre></td></tr></table></figure>
<p>nodeをswarmから解放する。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker@worker1</span></span><br><span class="line"></span><br><span class="line">docker swarm leave</span><br><span class="line">Node left the swarm.</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker@worker2</span></span><br><span class="line"></span><br><span class="line">docker swarm leave</span><br><span class="line">Node left the swarm.</span><br></pre></td></tr></table></figure>
<p>各workerがswarmから解放された。</p>
<p>最後にmanagerをswarmから解放する。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker@manager</span></span><br><span class="line"></span><br><span class="line">docker swarm leave --force</span><br><span class="line">Node left the swarm.</span><br></pre></td></tr></table></figure>
<h3 id="u307E_u3068_u3081"><a href="#u307E_u3068_u3081" class="headerlink" title="まとめ"></a>まとめ</h3><p>思った以上にクラスタを容易に作成できた。<br>swarm modeはマルチホストネットワーク機能(docker_gwbridge)をつかって、<br>アプリケーションを動かすということだと再確認できた。</p>
<h3 id="u53C2_u8003_u306B_u3057_u305F_u30DA_u30FC_u30B8"><a href="#u53C2_u8003_u306B_u3057_u305F_u30DA_u30FC_u30B8" class="headerlink" title="参考にしたページ"></a>参考にしたページ</h3><p><a href="https://pocketstudio.net/2016/06/23/docker-1-12-swarm-mode-and-ingress-load-balancing/" target="_blank" rel="external">https://pocketstudio.net/2016/06/23/docker-1-12-swarm-mode-and-ingress-load-balancing/</a><br><a href="https://docs.docker.com/engine/userguide/networking/get-started-overlay/" target="_blank" rel="external">https://docs.docker.com/engine/userguide/networking/get-started-overlay/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>docker engine 1.12から標準で搭載されたswarm modeを試してみる。<br>swarm(群れ)という意味で、クラスタリング構成機構のこと。<br>swarm modeはdocker engine v1.12.0-rc1で統合された機能である。</p>]]>
    
    </summary>
    
      <category term="web" scheme="http://blog.kazu69.net/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JWT(JSON Web Token)を使った認証を試みる]]></title>
    <link href="http://blog.kazu69.net/2016/07/30/authenticate_with_json_web_token/"/>
    <id>http://blog.kazu69.net/2016/07/30/authenticate_with_json_web_token/</id>
    <published>2016-07-30T09:17:13.000Z</published>
    <updated>2016-08-06T02:51:54.000Z</updated>
    <content type="html"><![CDATA[<p>Oauth2やOpenID Connectなどすでに導入されているJWT(JSON Web Token)。<br>今後IoTとかを考えると認証手法としては結構有効な認証方法だということで、改めて眺めてみた。</p>
<a id="more"></a>
<h2 id="JSON_Web_Token"><a href="#JSON_Web_Token" class="headerlink" title="JSON Web Token"></a>JSON Web Token</h2><p>JSON Web Token(JWT) jot(ジョット)と発音する。<br>JSONを電子署名したurl-safe(URLで使用できない文字が含まれる)なclaimのことを指す。<a href="https://tools.ietf.org/html/rfc7519" target="_blank" rel="external">rfc7519</a><br>また同じような言葉もあるので一旦整理する。</p>
<ul>
<li>JWS は署名したもの</li>
<li>JWE はEncryptしたもの</li>
</ul>
<p>一般的にJWTというとJWSのことをいう。</p>
<p>電子署名(公開鍵+秘密鍵方式)をしているため、データの読み出し、書き込みができる。<br>しかし、その内容の改竄はチェックできる。<br>JSONの内容を秘匿化するわけではないので、内容は誰でも見ることはできるという点は注意が必要。</p>
<p><a href="https://jwt.io/" target="_blank" rel="external">jwt.io</a>というサービスを使うことでdebugすることができるので、試してみると見ての通り、PAYLOADの内容は見ることができる。</p>
<p>JWTの形式は</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ HEADER ] . [ PAYLOAD ] . [ SIGNATURE ]</span><br></pre></td></tr></table></figure>
<p>という形で構成され、HEADERとPAYLOADはbase64エンコードされている。</p>
<hr>
<p>使い方として、認証時にトークンを発行し、必要に応じて検証することで認証済みとして扱うようにするとか。<br>同じことはSessionを使うことでもできるが、sessionを使う場合との違いは、サーバーが状態(state)を持たないでいいので、<br>token発行ホストと認証ホストが異なっていても問題ない。(まさにステートレス)<br>JWTを使うと、CSRFの攻撃を考えなくて良くなる。</p>
<p>また、JWTは</p>
<ul>
<li>Base64エンコーダー・デコーダー</li>
<li>jsonパーサー</li>
<li>署名検証機能</li>
</ul>
<p>上記のがあれば利用できるため、汎用性が高い。</p>
<p>デバイスによってはjsonを保持しておけば、認証できるという意味ではIoTとかを考慮すると重宝する。<br>クライアント側で永続化はメモリキャッシュでも、DBでもブラウザのLocalStrageも良い。<br>認証が必要な時に、tokenをポストするかhttpヘッダーで送る形となる。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Authorization: bearer &lt;token&gt;</span><br></pre></td></tr></table></figure>
<h2 id="JSON_Web_Token__u306E_u4E2D_u8EAB"><a href="#JSON_Web_Token__u306E_u4E2D_u8EAB" class="headerlink" title="JSON Web Token の中身"></a>JSON Web Token の中身</h2><h3 id="HEADER"><a href="#HEADER" class="headerlink" title="HEADER"></a>HEADER</h3><p>タイプとハッシュアルゴリズムを保持しており、これをBase64している</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attr">alg</span>": <span class="string">"HS256"</span>,</span><br><span class="line">  "<span class="attr">typ</span>": <span class="string">"JWT"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>HMAC SHA-256のJWTを表す。これはBase64で</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Base64.encode64(<span class="string">'&#123;"alg": "HS256", "typ": "JWT"&#125;'</span>)</span><br><span class="line"><span class="comment"># =&gt; eyJhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXVCJ9</span></span><br></pre></td></tr></table></figure>
<p>となる。</p>
<h3 id="PAYLOAD"><a href="#PAYLOAD" class="headerlink" title="PAYLOAD"></a>PAYLOAD</h3><p>JWTクレーム。トークンの本体となる部分で、幾つかのクレーム名はあらかじめ予約されている。<br>詳細は<a href="https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-19#section-4" target="_blank" rel="external">RFCを参照</a><br>クレーム名はJWT作成者側で自由に作成も出来る。</p>
<p>例えば以下のようなクレーム</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attr">sub</span>": <span class="string">"1234567890"</span>,</span><br><span class="line">  "<span class="attr">name</span>": <span class="string">"John Doe"</span>,</span><br><span class="line">  "<span class="attr">admin</span>": <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>こちらもBase64で</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Base64.encode64(<span class="string">'&#123;"sub":"1234567890","name":"John Doe","admin":true&#125;'</span>)</span><br><span class="line"><span class="comment"># =&gt; eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9</span></span><br></pre></td></tr></table></figure>
<h3 id="SIGNATURE"><a href="#SIGNATURE" class="headerlink" title="SIGNATURE"></a>SIGNATURE</h3><p>最終パートはSIGNATURE。HEADERとPAYLOADをSecretKeyで署名。</p>
<p>SecretKeyをsecretとすると、ここまでの結果から署名は</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</span><br></pre></td></tr></table></figure>
<p>となる。</p>
<p>最終的な結果としてJWTは</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</span><br></pre></td></tr></table></figure>
<p>このtokenを使って認証を行うことなる。</p>
<h3 id="u30A2_u30D7_u30EA_u30B1_u30FC_u30B7_u30E7_u30F3_u3067_u8A66_u3057_u3066_u307F_u305F"><a href="#u30A2_u30D7_u30EA_u30B1_u30FC_u30B7_u30E7_u30F3_u3067_u8A66_u3057_u3066_u307F_u305F" class="headerlink" title="アプリケーションで試してみた"></a>アプリケーションで試してみた</h3><p>Expressをつかって簡単なサーバーでJWT認証を試してみる。</p>
<p><a href="https://github.com/kazu69/jwt-express-example" target="_blank" rel="external">jwt-express-example</a> というExpress + MySQLなアプリケーションを作成して試してみる。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dockerコンテナを起動して</span></span><br><span class="line"><span class="comment"># 任意のパスワードでユーザー作成</span></span><br><span class="line">$ curl -X POST http://127.0.0.1:3000/user <span class="_">-d</span> <span class="string">'name=testuser'</span> <span class="_">-d</span> <span class="string">'password=secretpassword'</span></span><br><span class="line">&#123;<span class="string">"id"</span>:2,<span class="string">"name"</span>:<span class="string">"testuser"</span>,<span class="string">"password"</span>:<span class="string">"secretpassword"</span>,<span class="string">"updated_at"</span>:<span class="string">"2016-08-03T14:02:08.000Z"</span>,<span class="string">"created_at"</span>:<span class="string">"2016-08-03T14:02:08.000Z"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># ユーザー認証をパスワードで行う</span></span><br><span class="line">$ curl -X POST http://127.0.0.1:3000/authentication <span class="_">-d</span> <span class="string">'name=testuser'</span> <span class="_">-d</span> <span class="string">'password=secretpassword'</span></span><br><span class="line">&#123;<span class="string">"token"</span>:<span class="string">"CREATED-JSON-WEB-TOKEN"</span>,<span class="string">"message"</span>:<span class="string">"Authentication successfully finished."</span>&#125;%</span><br><span class="line"></span><br><span class="line"><span class="comment"># 別のホストでログインする</span></span><br><span class="line">$ curl -X POST http://127.0.0.1:8000/login <span class="_">-d</span> <span class="string">'access_token=CREATED-JSON-WEB-TOKEN"'</span></span><br><span class="line">&#123;<span class="string">"id"</span>:2,<span class="string">"name"</span>:<span class="string">"testuser"</span>&#125;</span><br></pre></td></tr></table></figure>
<p>という感じになる。</p>
<h3 id="u7D50_u8AD6"><a href="#u7D50_u8AD6" class="headerlink" title="結論"></a>結論</h3><p>ウェブサービスでの認証は複数のドメイン間で行われることが多い。そのため、クロスドメインを考える必要があり、<br>複雑化していくことなる。JWTのような機構を使うことで、サービス提供側はtokenを認証するということだに注力できるため、<br>仕様もシンプルにできる。<br>IoTなデバイスが増える中で、JWTな事案は今後もっと増えてくるんだろうなぁ。</p>
<h3 id="u53C2_u8003_u306B_u3057_u305F_u30DA_u30FC_u30B8"><a href="#u53C2_u8003_u306B_u3057_u305F_u30DA_u30FC_u30B8" class="headerlink" title="参考にしたページ"></a>参考にしたページ</h3><ul>
<li><a href="https://github.com/dwyl/learn-json-web-tokens" target="_blank" rel="external">dwyl/learn-json-web-tokens</a></li>
<li><a href="https://float-middle.com/json-web-tokens-jwt-vs-sessions/" target="_blank" rel="external">JSON Web Tokens (JWT) vs Sessions</a></li>
<li><a href="https://jwt.io/" target="_blank" rel="external">jwt.io</a></li>
<li><a href="http://hiyosi.tumblr.com/post/70073770678/jwt%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E7%B0%A1%E5%8D%98%E3%81%AB%E3%81%BE%E3%81%A8%E3%82%81%E3%81%A6%E3%81%BF%E3%81%9F" target="_blank" rel="external">JWTについて簡単にまとめてみた</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>Oauth2やOpenID Connectなどすでに導入されているJWT(JSON Web Token)。<br>今後IoTとかを考えると認証手法としては結構有効な認証方法だということで、改めて眺めてみた。</p>]]>
    
    </summary>
    
      <category term="web" scheme="http://blog.kazu69.net/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[seccompプロファイルを使ってdockerのシステムコールを制御]]></title>
    <link href="http://blog.kazu69.net/2016/06/27/control_system_callof_docker_using_secomp/"/>
    <id>http://blog.kazu69.net/2016/06/27/control_system_callof_docker_using_secomp/</id>
    <published>2016-06-27T13:14:24.000Z</published>
    <updated>2016-06-27T23:26:17.000Z</updated>
    <content type="html"><![CDATA[<p>Dockerコンテナでアプリケーションのプロセスをdebugするためにstraceをすると<br>Operation not permittedで怒られた。</p>
<a id="more"></a>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">strace <span class="_">-f</span> -p 1</span><br><span class="line">strace: attach: ptrace(PTRACE_ATTACH, ...): Operation not permitted</span><br></pre></td></tr></table></figure>
<p>エラー内容から調べてみると、どうやらセキュリティ的にコンテナ内のシステムコールへのアクセスが制限されていると思われる。<br>dockerのリポジトリのdocumentを見ると<a href="https://github.com/docker/docker/blob/master/docs/security/seccomp.md" target="_blank" rel="external">Seccomp security profiles for Docker</a>という項目がある。<br>どうやら<a href="https://github.com/docker/docker/pull/17989" target="_blank" rel="external">このPR(#17989)</a>で追加されてるようだ。</p>
<p>seccompを設定しているprofileがあるようで、これを変更することでシステムコールを制御できるようす。</p>
<h2 id="seccomp"><a href="#seccomp" class="headerlink" title="seccomp"></a>seccomp</h2><p>そもそもseccomp(secure computing mode)はプロセスのexit, sigreturn, read, writeを行うシステムコールを制御する。<br>また、seccomp-bpf(seccomp mode filter)は、システムコールのフィルタにBPFを実装しており、<br>システムコールの番号と引数をフィルタリングすることでより柔軟に扱うことができる。</p>
<p>というもの。</p>
<h2 id="docker_seccomp_profile"><a href="#docker_seccomp_profile" class="headerlink" title="docker seccomp profile"></a>docker seccomp profile</h2><p>dockerではseccompの設定は<a href="https://github.com/docker/docker/blob/master/profiles/seccomp/default.json" target="_blank" rel="external">このようなdefault.json</a>で定義されている。<br>適当なシステムコールプロファイルをjsonで作成し、–security-optオプションで実行してみる。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br><span class="line">Client:</span><br><span class="line"> Version:      1.11.0</span><br><span class="line"> API version:  1.23</span><br><span class="line"> Go version:   go1.5.4</span><br><span class="line"> Git commit:   4dc5990</span><br><span class="line"> Built:        Wed Apr 13 18:13:28 2016</span><br><span class="line"> OS/Arch:      darwin/amd64</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Version:      1.11.0</span><br><span class="line"> API version:  1.23</span><br><span class="line"> Go version:   go1.5.4</span><br><span class="line"> Git commit:   4dc5990</span><br><span class="line"> Built:        Wed Apr 13 19:36:04 2016</span><br><span class="line"> OS/Arch:      linux/amd64</span><br><span class="line"></span><br><span class="line">cat seccomp.json | jq .</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"defaultAction"</span>: <span class="string">"SCMP_ACT_ALLOW"</span>,</span><br><span class="line">  <span class="string">"syscalls"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"mkdir"</span>,</span><br><span class="line">      <span class="string">"action"</span>: <span class="string">"SCMP_ACT_ERRNO"</span>,</span><br><span class="line">      <span class="string">"args"</span>: []</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">docker run -it --security-opt seccomp:seccomp.json alpine sh</span><br><span class="line">/ <span class="comment"># mkdir -p tmp/test</span></span><br><span class="line">mkdir: can<span class="string">'t create directory '</span>tmp/<span class="string">': Operation not permitted</span><br><span class="line">/ # apk update</span><br><span class="line">fetch http://dl-cdn.alpinelinux.org/alpine/v3.4/main/x86_64/APKINDEX.tar.gz</span><br><span class="line">fetch http://dl-cdn.alpinelinux.org/alpine/v3.4/community/x86_64/APKINDEX.tar.gz</span><br><span class="line">v3.4.0-84-g5967d51 [http://dl-cdn.alpinelinux.org/alpine/v3.4/main]</span><br><span class="line">v3.4.0-75-g8d1dc52 [http://dl-cdn.alpinelinux.org/alpine/v3.4/community]</span><br><span class="line">OK: 5958 distinct packages available</span><br><span class="line">/ # apk add strace</span><br><span class="line">(1/1) Installing strace (4.11-r2)</span><br><span class="line">Executing busybox-1.24.2-r9.trigger</span><br><span class="line">OK: 6 MiB in 12 packages</span><br><span class="line">/ # ls</span><br><span class="line">bin      dev      etc      home     lib      linuxrc  media    mnt      proc     root     run      sbin     srv      sys      tmp      usr      var</span><br><span class="line">/ # strace ls home</span><br><span class="line">execve("/bin/ls", ["ls", "home"], [/* 6 vars */]) = 0</span><br><span class="line">arch_prctl(ARCH_SET_FS, 0x7f2a390e3c28) = 0</span><br><span class="line">set_tid_address(0x7f2a390e3c60)         = 14</span><br><span class="line">mprotect(0x7f2a390e0000, 4096, PROT_READ) = 0</span><br><span class="line">mprotect(0x55ab364b6000, 16384, PROT_READ) = 0</span><br><span class="line">getuid()                                = 0</span><br><span class="line">ioctl(0, TIOCGWINSZ, &#123;ws_row=45, ws_col=181, ws_xpixel=0, ws_ypixel=0&#125;) = 0</span><br><span class="line">ioctl(1, TIOCGWINSZ, &#123;ws_row=45, ws_col=181, ws_xpixel=0, ws_ypixel=0&#125;) = 0</span><br><span class="line">ioctl(1, TIOCGWINSZ, &#123;ws_row=45, ws_col=181, ws_xpixel=0, ws_ypixel=0&#125;) = 0</span><br><span class="line">stat("home", &#123;st_mode=S_IFDIR|0755, st_size=4096, ...&#125;) = 0</span><br><span class="line">open("home", O_RDONLY|O_DIRECTORY|O_CLOEXEC) = 3</span><br><span class="line">fcntl(3, F_SETFD, FD_CLOEXEC)           = 0</span><br><span class="line">getdents64(3, /* 2 entries */, 2048)    = 48</span><br><span class="line">getdents64(3, /* 0 entries */, 2048)    = 0</span><br><span class="line">close(3)                                = 0</span><br><span class="line">exit_group(0)                           = ?</span><br><span class="line">+++ exited with 0 +++</span></span><br></pre></td></tr></table></figure>
<p>SCMP_ACT_ALLOW は許可。SCMP_ACT_ERRNOは拒否となるので、<br>SCMP_ACT_ALLOW でフィルターに一致しない場合は許可。<br>mkdirを呼び出すとSCMP_ACT_ERRNOでエラーが返る。</p>
<p>mkdir以外は許可されているのでstraceも問題ない。</p>
<p>また、デフォルトのseccomp profileなしで使うなら–security-optオプションにunconfinedを渡してあげると良い。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --security-opt seccomp=unconfined alpine sh</span><br><span class="line">/ <span class="comment"># apk update</span></span><br><span class="line">fetch http://dl-cdn.alpinelinux.org/alpine/v3.4/main/x86_64/APKINDEX.tar.gz</span><br><span class="line">fetch http://dl-cdn.alpinelinux.org/alpine/v3.4/community/x86_64/APKINDEX.tar.gz</span><br><span class="line">v3.4.0-84-g5967d51 [http://dl-cdn.alpinelinux.org/alpine/v3.4/main]</span><br><span class="line">v3.4.0-75-g8d1dc52 [http://dl-cdn.alpinelinux.org/alpine/v3.4/community]</span><br><span class="line">OK: 5958 distinct packages available</span><br><span class="line">/ <span class="comment"># apk add strace</span></span><br><span class="line">(1/1) Installing strace (4.11-r2)</span><br><span class="line">Executing busybox-1.24.2-r9.trigger</span><br><span class="line">OK: 6 MiB <span class="keyword">in</span> 12 packages</span><br><span class="line">/ <span class="comment"># ls</span></span><br><span class="line">bin      dev      etc      home     lib      linuxrc  media    mnt      proc     root     run      sbin     srv      sys      tmp      usr      var</span><br><span class="line">/ <span class="comment"># strace ls home</span></span><br><span class="line">execve(<span class="string">"/bin/ls"</span>, [<span class="string">"ls"</span>, <span class="string">"home"</span>], [/* 6 vars */]) = 0</span><br><span class="line">arch_prctl(ARCH_SET_FS, 0x7feb31d3ec28) = 0</span><br><span class="line"><span class="built_in">set</span>_tid_address(0x7feb31d3ec60)         = 14</span><br><span class="line">mprotect(0x7feb31d3b000, 4096, PROT_READ) = 0</span><br><span class="line">mprotect(0x559a8af6c000, 16384, PROT_READ) = 0</span><br><span class="line">getuid()                                = 0</span><br><span class="line">ioctl(0, TIOCGWINSZ, &#123;ws_row=45, ws_col=181, ws_xpixel=0, ws_ypixel=0&#125;) = 0</span><br><span class="line">ioctl(1, TIOCGWINSZ, &#123;ws_row=45, ws_col=181, ws_xpixel=0, ws_ypixel=0&#125;) = 0</span><br><span class="line">ioctl(1, TIOCGWINSZ, &#123;ws_row=45, ws_col=181, ws_xpixel=0, ws_ypixel=0&#125;) = 0</span><br><span class="line"><span class="built_in">stat</span>(<span class="string">"home"</span>, &#123;st_mode=S_IFDIR|0755, st_size=4096, ...&#125;) = 0</span><br><span class="line">open(<span class="string">"home"</span>, O_RDONLY|O_DIRECTORY|O_CLOEXEC) = 3</span><br><span class="line">fcntl(3, F_SETFD, FD_CLOEXEC)           = 0</span><br><span class="line">getdents64(3, /* 2 entries */, 2048)    = 48</span><br><span class="line">getdents64(3, /* 0 entries */, 2048)    = 0</span><br><span class="line">close(3)                                = 0</span><br><span class="line"><span class="built_in">exit</span>_group(0)                           = ?</span><br><span class="line">+++ exited with 0 +++</span><br></pre></td></tr></table></figure>
<p>ちなみに v1.11だとLinux kernel が 4.3の場合、–pids-limitオプションで<a href="https://github.com/docker/docker/pull/18697" target="_blank" rel="external">リソース制限もできる</a>ようになってるみたい。</p>
<h2 id="u53C2_u8003_u306B_u3057_u305F_u30DA_u30FC_u30B8"><a href="#u53C2_u8003_u306B_u3057_u305F_u30DA_u30FC_u30B8" class="headerlink" title="参考にしたページ"></a>参考にしたページ</h2><p><a href="https://github.com/docker/docker/blob/master/docs/security/seccomp.md" target="_blank" rel="external">Seccomp security profiles for Docker</a><br><a href="https://blog.docker.com/2016/02/docker-engine-1-10-security/" target="_blank" rel="external">DOCKER ENGINE 1.10 SECURITY IMPROVEMENTS</a><br><a href="https://github.com/docker/docker/pull/17989" target="_blank" rel="external">Phase 1: Initial seccomp support</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Dockerコンテナでアプリケーションのプロセスをdebugするためにstraceをすると<br>Operation not permittedで怒られた。</p>]]>
    
    </summary>
    
      <category term="tec" scheme="http://blog.kazu69.net/categories/tec/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ネットワークのアーミーナイフnetcatを使ってみる]]></title>
    <link href="http://blog.kazu69.net/2016/06/19/using_army_knife_netcat_of_network/"/>
    <id>http://blog.kazu69.net/2016/06/19/using_army_knife_netcat_of_network/</id>
    <published>2016-06-19T11:26:02.000Z</published>
    <updated>2016-06-27T16:38:45.000Z</updated>
    <content type="html"><![CDATA[<p>サーバーの死活確認やモックレスポンスが欲しい時など、手元で簡単に実現出来るnetcatコマンド。<br>ソフトウェア開発しているときに活用できそうな機能をまとめてみた。<br>netcatはunixだけでなくwindowsでも使える。</p>
<a id="more"></a>
<p><a href="https://ja.wikipedia.org/wiki/Netcat" target="_blank" rel="external">wikipedia</a>には以下のようにある。</p>
<blockquote>
<p>TCPやUDPを扱う万能ツールとして知られ、しばしばネットワークのスイスアーミーナイフ、<br>TCP/IPのアーミーナイフ、ハッカーのアーミーナイフなどのように評される。</p>
</blockquote>
<p>ということで、簡単に普段の開発で使いそうなことを試してみる。</p>
<h2 id="http_u30EA_u30AF_u30A8_u30B9_u30C8"><a href="#http_u30EA_u30AF_u30A8_u30B9_u30C8" class="headerlink" title="httpリクエスト"></a>httpリクエスト</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'GET / HTTP/1.1\n\n'</span> | nc google.com 80</span><br><span class="line">HTTP/1.1 302 Found</span><br><span class="line">Cache-Control: private</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line">Location: http://www.google.co.jp/?gfe_rd=cr&amp;ei=5clkV-DkHbLK8geW87zIAw</span><br><span class="line">Content-Length: 261</span><br><span class="line">Date: Sat, 18 Jun 2016 04:11:17 GMT</span><br><span class="line"></span><br><span class="line">&lt;HTML&gt;&lt;HEAD&gt;&lt;meta http-equiv=<span class="string">"content-type"</span> content=<span class="string">"text/html;charset=utf-8"</span>&gt;</span><br><span class="line">&lt;TITLE&gt;302 Moved&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;</span><br><span class="line">&lt;H1&gt;302 Moved&lt;/H1&gt;</span><br><span class="line">The document has moved</span><br><span class="line">&lt;A HREF=<span class="string">"http://www.google.co.jp/?gfe_rd=cr&amp;amp;ei=5clkV-DkHbLK8geW87zIAw"</span>&gt;here&lt;/A&gt;.</span><br><span class="line">&lt;/BODY&gt;&lt;/HTML&gt;</span><br></pre></td></tr></table></figure>
<h2 id="u7C21_u6613_u30B5_u30FC_u30D0_u30FC"><a href="#u7C21_u6613_u30B5_u30FC_u30D0_u30FC" class="headerlink" title="簡易サーバー"></a>簡易サーバー</h2><p>単純なレスポンスを返すだけのサーバーならnetcatを使うことで実現出来る。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span> ( <span class="built_in">echo</span> <span class="string">"HTTP/1.0 200 OK;\nHello World"</span> ) | nc <span class="_">-l</span> 8080; [ $? != 0 ] &amp;&amp; <span class="built_in">break</span>; <span class="keyword">done</span></span><br><span class="line">HEAD / HTTP/1.1</span><br><span class="line">Host: localhost:8080</span><br><span class="line">User-Agent: curl/7.43.0</span><br><span class="line">Accept: */*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 別プロセスから</span></span><br><span class="line">curl -I localhost:8080</span><br><span class="line">HTTP/1.0 200 OK;</span><br><span class="line">Hello World</span><br></pre></td></tr></table></figure>
<p>適当なhtmlファイルを返してみる。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">title</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">            This is Test</span><br><span class="line">        <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">netcat -lp 3000 &lt; index.html</span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: localhost:3000</span><br><span class="line">User-Agent: curl/7.43.0</span><br><span class="line">Accept: */*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 別プロセスから</span></span><br><span class="line">curl http://localhost:3000</span><br><span class="line">&lt;html&gt;</span><br><span class="line">        &lt;head&gt;</span><br><span class="line">            &lt;title&gt;Test&lt;/title&gt;</span><br><span class="line">        &lt;/head&gt;</span><br><span class="line">        &lt;body&gt;</span><br><span class="line">            This is Test</span><br><span class="line">        &lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h2 id="u30D0_u30C3_u30AF_u30C9_u30A2"><a href="#u30D0_u30C3_u30AF_u30C9_u30A2" class="headerlink" title="バックドア"></a>バックドア</h2><p>e オプションはバックドアとして機能する。GNU, OpenBSDバージョンでは利用できないようにしてることがある。<br>その場合はソースを取得してコンパイルが必要。<br>Macだとbrewでインストールすることで利用出来る。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># バックドアを開けておく</span></span><br><span class="line">nc <span class="_">-l</span> -p 8080 <span class="_">-e</span> /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 別プロセスから</span></span><br><span class="line">nc localhost 8080</span><br><span class="line"></span><br><span class="line">ls</span><br><span class="line"><span class="comment"># netcatの実行ディレクトリのファイル一覧</span></span><br><span class="line">whoami</span><br><span class="line"><span class="comment"># netcatの実行ユーザー</span></span><br></pre></td></tr></table></figure>
<h2 id="u30B5_u30FC_u30D0_u30FC_u9593_u901A_u4FE1"><a href="#u30B5_u30FC_u30D0_u30FC_u9593_u901A_u4FE1" class="headerlink" title="サーバー間通信"></a>サーバー間通信</h2><p>ポート番号を指定して、待ち受けることでサーバー間でコミュニケーションできる。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ホスト側でport 4000をlisten</span></span><br><span class="line">nc -lp 4000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 別プロセスで400にアクセス</span></span><br><span class="line">nc localhost 4000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 入力内容がホスト側に出力される</span></span><br></pre></td></tr></table></figure>
<p>バックドアはeオプションが使えないが、サーバー間通信を活用することで同じことが実現出来る。<br>出力、エラーをclien側に出力するためにmkfifoを使う。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># host側</span></span><br><span class="line">mkdir tmp/; rm <span class="_">-f</span> tmp/f; mkfifo tmp/f</span><br><span class="line">cat tmp/f | /bin/sh -i 2&gt;&amp;1 | nc -lp 4000 &gt; tmp/f</span><br><span class="line"></span><br><span class="line"><span class="comment"># client側</span></span><br><span class="line">nc localhost 4000</span><br><span class="line"><span class="comment"># /bin/sh が実行できる</span></span><br></pre></td></tr></table></figure>
<h2 id="u30DD_u30FC_u30C8_u30B9_u30AD_u30E3_u30F3"><a href="#u30DD_u30FC_u30C8_u30B9_u30AD_u30E3_u30F3" class="headerlink" title="ポートスキャン"></a>ポートスキャン</h2><p>z オプションでポート確認だけをする</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">nc -zv localhost 80</span><br><span class="line">found 0 associations</span><br><span class="line">found 1 connections:</span><br><span class="line">     1: flags=82&lt;CONNECTED,PREFERRED&gt;</span><br><span class="line">    outif en0</span><br><span class="line">    src 192.168.1.4 port 56855</span><br><span class="line">    dst 0.0.0.0 port 80</span><br><span class="line">    rank info not available</span><br><span class="line">    TCP aux info available</span><br><span class="line"></span><br><span class="line">Connection to google.com port 80 [tcp/http] succeeded!</span><br></pre></td></tr></table></figure>
<p>ちなみにportのレンジを指定して、ポートの確認もできる。<br>(AWSなどはポートスキャンできない)</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">nc -zv localhost 75-85</span><br><span class="line">nc: connectx to localhost port 75 (tcp) failed: Connection refused</span><br><span class="line">nc: connectx to localhost port 76 (tcp) failed: Connection refused</span><br><span class="line">nc: connectx to localhost port 77 (tcp) failed: Connection refused</span><br><span class="line">nc: connectx to localhost port 78 (tcp) failed: Connection refused</span><br><span class="line">nc: connectx to localhost port 79 (tcp) failed: Connection refused</span><br><span class="line">found 0 associations</span><br><span class="line">found 1 connections:</span><br><span class="line">     1: flags=82&lt;CONNECTED,PREFERRED&gt;</span><br><span class="line">    outif en0</span><br><span class="line">    src 192.168.1.4 port 57809</span><br><span class="line">    dst 0.0.0.0 port 80</span><br><span class="line">    rank info not available</span><br><span class="line">    TCP aux info available</span><br><span class="line"></span><br><span class="line">Connection to localhost port 80 [tcp/http] succeeded!</span><br><span class="line">nc: connectx to localhost port 81 (tcp) failed: Connection refused</span><br><span class="line">nc: connectx to localhost port 82 (tcp) failed: Connection refused</span><br><span class="line">nc: connectx to localhost port 83 (tcp) failed: Connection refused</span><br><span class="line">nc: connectx to localhost port 84 (tcp) failed: Connection refused</span><br><span class="line">nc: connectx to localhost port 85 (tcp) failed: Connection refused</span><br></pre></td></tr></table></figure>
<p>このポートスキャンの機能を使うことでアプリケーションの死活監視をすることで実現出来る。<br>ドメイン名だけでなくIPアドレスでも可能。</p>
<h2 id="u30D5_u30A1_u30A4_u30EB_u8EE2_u9001"><a href="#u30D5_u30A1_u30A4_u30EB_u8EE2_u9001" class="headerlink" title="ファイル転送"></a>ファイル転送</h2><p>送信する側では標準入力で送信するファイルを指定する。<br>受信する側で送られてきた内容(標準出力)をリダイレクトして、ファイル保存</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># receiving</span></span><br><span class="line">nc -lp 4000 &gt; test.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># sending</span></span><br><span class="line">nc -lp 4000 &gt; test.txt</span><br></pre></td></tr></table></figure>
<p>送信完了しても、特になにもおきない。<br>受信側でmd5 hashなどをつかって、ファイルの同一性をチェックしたほうが良い。</p>
<h2 id="tunnel"><a href="#tunnel" class="headerlink" title="tunnel"></a>tunnel</h2><p>L オプションでリモートのアドレスに転送する</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">nc -L google.com:80 -p 3000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 別プロセスから</span></span><br><span class="line">curl http://localhost:3000</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=en&gt;</span><br><span class="line">  &lt;meta charset=utf-8&gt;</span><br><span class="line">  &lt;meta name=viewport content=<span class="string">"initial-scale=1, minimum-scale=1, width=device-width"</span>&gt;</span><br><span class="line">  &lt;title&gt;Error 404 (Not Found)!!1&lt;/title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    *&#123;margin:0;padding:0&#125;html,code&#123;font:15px/22px arial,sans-serif&#125;html&#123;background:<span class="comment">#fff;color:#222;padding:15px&#125;body&#123;margin:7% auto 0;max-width:390px;min-height:180px;padding:30px 0 15px&#125;* &gt; body&#123;background:url(//www.google.com/images/errors/robot.png) 100% 5px no-repeat;padding-right:205px&#125;p&#123;margin:11px 0 22px;overflow:hidden&#125;ins&#123;color:#777;text-decoration:none&#125;a img&#123;border:0&#125;@media screen and (max-width:772px)&#123;body&#123;background:none;margin-top:0;max-width:none;padding-right:0&#125;&#125;#logo&#123;background:url(//www.google.com/images/branding/googlelogo/1x/googlelogo_color_150x54dp.png) no-repeat;margin-left:-5px&#125;@media only screen and (min-resolution:192dpi)&#123;#logo&#123;background:url(//www.google.com/images/branding/googlelogo/2x/googlelogo_color_150x54dp.png) no-repeat 0% 0%/100% 100%;-moz-border-image:url(//www.google.com/images/branding/googlelogo/2x/googlelogo_color_150x54dp.png) 0&#125;&#125;@media only screen and (-webkit-min-device-pixel-ratio:2)&#123;#logo&#123;background:url(//www.google.com/images/branding/googlelogo/2x/googlelogo_color_150x54dp.png) no-repeat;-webkit-background-size:100% 100%&#125;&#125;#logo&#123;display:inline-block;height:54px;width:150px&#125;</span></span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">  &lt;a href=//www.google.com/&gt;&lt;span id=logo aria-label=Google&gt;&lt;/span&gt;&lt;/a&gt;</span><br><span class="line">  &lt;p&gt;&lt;b&gt;404.&lt;/b&gt; &lt;ins&gt;That’s an error.&lt;/ins&gt;</span><br><span class="line">  &lt;p&gt;The requested URL &lt;code&gt;/&lt;/code&gt; was not found on this server.  &lt;ins&gt;That’s all we know.&lt;/ins&gt;</span><br></pre></td></tr></table></figure>
<p>ざっとみただけで、さすが高機能だ。<br>まだまだ奥深い活用方法がありあそうだが、現在のところ自分にはこれでも十分。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>サーバーの死活確認やモックレスポンスが欲しい時など、手元で簡単に実現出来るnetcatコマンド。<br>ソフトウェア開発しているときに活用できそうな機能をまとめてみた。<br>netcatはunixだけでなくwindowsでも使える。</p>]]>
    
    </summary>
    
      <category term="memo" scheme="http://blog.kazu69.net/categories/memo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[systemdを使ってnodejsサーバー起動する]]></title>
    <link href="http://blog.kazu69.net/2016/06/06/start-node-server-with-systemd/"/>
    <id>http://blog.kazu69.net/2016/06/06/start-node-server-with-systemd/</id>
    <published>2016-06-06T10:26:02.000Z</published>
    <updated>2016-06-06T23:29:11.000Z</updated>
    <content type="html"><![CDATA[<p>nodejsのプロセスバックグラウンドで実行する(デーモン化)する場合、だいたい<a href="https://www.npmjs.com/package/forever" target="_blank" rel="external">forever</a>などが選択されると思う。<br>今回は、Fedora、CentOS 7のデーモンとなるsystemdを使ってデーモン化してみた。<br><a id="more"></a></p>
<p>まずforeverでプロセスをバックグランドで実行させる。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">npm i -g forever</span><br><span class="line">forever start server.js</span><br><span class="line">info:    Forever processing file: server.js</span><br><span class="line"></span><br><span class="line">node]<span class="comment"># forever list</span></span><br><span class="line">info:    Forever processes running</span><br><span class="line">data:        uid  <span class="built_in">command</span>       script    forever pid id logfile                 uptime</span><br><span class="line">data:    [0] OhQD /usr/bin/node server.js 97      102    /root/.forever/OhQD.log 0:0:0:19.532</span><br></pre></td></tr></table></figure>
<p>実際はこのようにforeverを実行する起動ファイルを作成し、自動起動できるようにしないといけない。<br>場合によっては、起動順序やプロセスの依存関係などを考慮しないといけないため、起動スクリプトは複雑になることが考えられる。</p>
<p>これをsystemdに置き換えることで、</p>
<ul>
<li>起動スクリプトを設定ファイルで記述できる</li>
<li>依存関係や起動順序など複雑さを回避できる</li>
<li>起動処理をできる限り並列化するとのことで起動にかかk流時間が短縮できる</li>
</ul>
<p>などが実現する様子。</p>
<p>さっそく適当なDocker環境でsystemdを使ってnodejsサーバーのデーモン化を試してみた。</p>
<h2 id="NodeJs_u30B5_u30FC_u30D0_u30FC_u4F5C_u6210"><a href="#NodeJs_u30B5_u30FC_u30D0_u30FC_u4F5C_u6210" class="headerlink" title="NodeJsサーバー作成"></a>NodeJsサーバー作成</h2><p>ミニマムなサーバーを作成</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hostname = <span class="string">'0.0.0.0'</span>;</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer((req, res) =&gt; &#123;</span><br><span class="line">    res.statusCode = <span class="number">200</span>;</span><br><span class="line">    res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/plain'</span>);</span><br><span class="line">    res.end(<span class="string">'Hello World\n'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(port, hostname, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Server running at http://<span class="subst">$&#123;hostname&#125;</span>:<span class="subst">$&#123;port&#125;</span>/`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="systemd__u306E_u8A2D_u5B9A_u30D5_u30A1_u30A4_u30EB"><a href="#systemd__u306E_u8A2D_u5B9A_u30D5_u30A1_u30A4_u30EB" class="headerlink" title="systemd の設定ファイル"></a>systemd の設定ファイル</h2><p>systemdでは起動処理を<strong>Unit</strong>という単位で管理している。<br>Unitには幾つかのタイプ(service, socketやdebviceなど）が存在するが、それらはすべてファイルの拡張子で判別されている。</p>
<p>設定ファイルにはUnit, Install, Service(serviceであれば)セクションで構成される。</p>
<p>それぞれの設定項目に関しては<a href="https://www.freedesktop.org/software/systemd/man/systemd.html" target="_blank" rel="external">manページ</a>に詳しくあるので、必要そうなものをかいつまんでみる。</p>
<h3 id="Unit_u30BB_u30AF_u30B7_u30E7_u30F3"><a href="#Unit_u30BB_u30AF_u30B7_u30E7_u30F3" class="headerlink" title="Unitセクション"></a>Unitセクション</h3><p>起動サービスの依存・順序関係を解決する。</p>
<table>
<thead>
<tr>
<th>ディレクティブ</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>Description</td>
<td>ユニットの説明</td>
</tr>
<tr>
<td>Documentation</td>
<td>ドキュメントのURI</td>
</tr>
<tr>
<td>After/Before</td>
<td>実行順番の設定</td>
</tr>
<tr>
<td>Requires/Wants</td>
<td>依存関係の定義。(順序は関係なく並列起動されるべきサービス)<br>RequiresとWantsの違い。Requiresは依存するサービス起動失敗した時は、サービスの起動を中断とする</td>
</tr>
</tbody>
</table>
<h3 id="Service_u30BB_u30AF_u30B7_u30E7_u30F3"><a href="#Service_u30BB_u30AF_u30B7_u30E7_u30F3" class="headerlink" title="Serviceセクション"></a>Serviceセクション</h3><p>起動サービスの設定</p>
<table>
<thead>
<tr>
<th>ディレクティブ</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>ExecStart</td>
<td>実行するサービスの起動コマンド</td>
</tr>
<tr>
<td>ExecReload</td>
<td>サービスのリロードコマンド</td>
</tr>
<tr>
<td>ExecStop</td>
<td>サービスの停止コマンド</td>
</tr>
<tr>
<td>Restart</td>
<td>プロセス停止時の再起動の有無<br>always 常に再起動<br>no 再起動しない<br>on-success 終了ステータスコード 0 (exit code 0) で終了時に再起動<br>on-failure 終了ステータスコード 0以外 (exit code 0以外) で終了時に再起動</td>
</tr>
<tr>
<td>Type</td>
<td>プロセスの起動方法<br>フォアグラウンドで実行する場合はsimple<br>プロセスをforkして実行する場合はforking</td>
</tr>
<tr>
<td>Environment</td>
<td>環境変数</td>
</tr>
<tr>
<td>RestartSec</td>
<td>再起動までのスリープ時間</td>
</tr>
<tr>
<td>StandardOutput,StandardError</td>
<td>ログ、エラー出力の設定</td>
</tr>
</tbody>
</table>
<h3 id="Install_u30BB_u30AF_u30B7_u30E7_u30F3"><a href="#Install_u30BB_u30AF_u30B7_u30E7_u30F3" class="headerlink" title="Installセクション"></a>Installセクション</h3><p>ユニットの自動起動に関する設定。</p>
<table>
<thead>
<tr>
<th>ディレクティブ</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>WantedBy</td>
<td>systemctl enable でインストールされるとき、 .wants/にシンボリックを作成</td>
</tr>
<tr>
<td>RequiredBy</td>
<td>systemctl enable でインストールされるとき、 .requires/にシンボリックを作成</td>
</tr>
</tbody>
</table>
<p>wantsとrequiresはの違いは、wantsはUnitの依存関係のユニットが失敗すると起動を中断する。<br>requiresは依存関係のユニットが失敗すると起動を継続する。</p>
<hr>
<p>ということで、今回はサービスの起動を行うため<strong>.service</strong>を使う。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Node.js Server</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">WorkingDirectory=/home/node</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/usr/bin/node server.js</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=10</span><br><span class="line">StandardOutput=syslog</span><br><span class="line">StandardError=syslog</span><br><span class="line">SyslogIdentifier=node-server</span><br><span class="line">Environment=NODE_ENV=production PORT=3000</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<p>上記を使ってDockerfileを作成。<br>centos7でNodeJs 4.x を入れるのが大変だったので、<a href="https://nodesource.com/" target="_blank" rel="external">nodesource</a>からセットアップすることにした。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">FROM centos:7</span><br><span class="line"></span><br><span class="line">RUN yum -y update &amp;&amp; \</span><br><span class="line">    yum -y install epel-release.noarch curl make gcc gcc-c++ tree which &amp;&amp; \</span><br><span class="line">    yum repolist</span><br><span class="line"></span><br><span class="line">RUN curl -sL https://rpm.nodesource.com/setup_4.x | bash - &amp;&amp; \</span><br><span class="line">    yum -y install nodejs</span><br><span class="line"></span><br><span class="line">RUN mkdir /home/node/</span><br><span class="line">ADD server.js /home/node/server.js</span><br><span class="line"></span><br><span class="line">ADD node_server.service /etc/systemd/system/node_server.service</span><br></pre></td></tr></table></figure>
<h2 id="systemd_u3092_u8A66_u3057_u3066_u307F_u308B"><a href="#systemd_u3092_u8A66_u3057_u3066_u307F_u308B" class="headerlink" title="systemdを試してみる"></a>systemdを試してみる</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t server .</span><br></pre></td></tr></table></figure>
<p>Dockerコンテナ内でDocker daemonの起動はできないので、privilegedオプションで起動する。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run --privileged -d -p 3000:3000 server:latest /sbin/init</span><br><span class="line">72956dbd3cdf37268a0fa9678922f116e48d1730dd5c69771fa7abffe4affd49</span><br><span class="line">docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">72956dbd3cdf        server:latest       &quot;/sbin/init&quot;        10 seconds ago      Up 9 seconds        0.0.0.0:3000-&gt;3000/tcp   silly_pike</span><br><span class="line"></span><br><span class="line">docker exec -it silly_pike /bin/bash</span><br></pre></td></tr></table></figure>
<p>色々と確認する</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"># 起動unitの確認</span><br><span class="line">systemctl list-units --type=service</span><br><span class="line"></span><br><span class="line">  UNIT                                   LOAD   ACTIVE SUB     DESCRIPTION</span><br><span class="line">  dbus.service                           loaded active running D-Bus System Message Bus</span><br><span class="line">  getty@tty1.service                     loaded active running Getty on tty1</span><br><span class="line">  ldconfig.service                       loaded active exited  Rebuild Dynamic Linker Cache</span><br><span class="line">  systemd-hwdb-update.service            loaded active exited  Rebuild Hardware Database</span><br><span class="line">  systemd-journal-catalog-update.service loaded active exited  Rebuild Journal Catalog</span><br><span class="line">  systemd-journal-flush.service          loaded active exited  Flush Journal to Persistent Storage</span><br><span class="line">  systemd-journald.service               loaded active running Journal Service</span><br><span class="line">  systemd-logind.service                 loaded active running Login Service</span><br><span class="line">  systemd-random-seed.service            loaded active exited  Load/Save Random Seed</span><br><span class="line">● systemd-remount-fs.service             loaded failed failed  Remount Root and Kernel File Systems</span><br><span class="line">  systemd-sysctl.service                 loaded active exited  Apply Kernel Variables</span><br><span class="line">  systemd-tmpfiles-setup-dev.service     loaded active exited  Create Static Device Nodes in /dev</span><br><span class="line">iles and Directoriesetup.service         loaded active exited  Create Volatile</span><br><span class="line">FDevicesd-udev-trigger.service           loaded active exited  udev Coldplug</span><br><span class="line">e Manager-udevd.service                  loaded active running udev Kernel Devic</span><br><span class="line">ed      d-update-done.service            loaded active exited  Update is Complet</span><br><span class="line"> System Boot/Shutdown.service            loaded active exited  Update UTMP about</span><br><span class="line">ons     d-user-sessions.service          loaded active exited  Permit User Sessi</span><br><span class="line">sole    d-vconsole-setup.service         loaded active exited  Setup Virtual Con</span><br><span class="line"></span><br><span class="line">LOAD   = Reflects whether the unit definition was properly loaded.</span><br><span class="line">ACTIVE = The high-level unit activation state, i.e. generalization of SUB.</span><br><span class="line">SUB    = The low-level unit activation state, values depend on unit type.</span><br><span class="line"></span><br><span class="line">o.      d units listed. Pass --all to see loaded but inactive units, to--More--</span><br><span class="line">To show all installed unit files use &apos;systemctl list-unit-files&apos;.</span><br><span class="line"></span><br><span class="line"># 起動の有無に関係なくunitの一覧表示する</span><br><span class="line">systemctl list-unit-files --type=service</span><br><span class="line"></span><br><span class="line">UNIT FILE                              STATE</span><br><span class="line">proc-sys-fs-binfmt_misc.automount      static</span><br><span class="line">dev-hugepages.mount                    static</span><br><span class="line">dev-mqueue.mount                       static</span><br><span class="line">proc-sys-fs-binfmt_misc.mount          static</span><br><span class="line">sys-fs-fuse-connections.mount          static</span><br><span class="line">sys-kernel-config.mount                static</span><br><span class="line">sys-kernel-debug.mount                 static</span><br><span class="line">tmp.mount                              disabled</span><br><span class="line">systemd-ask-password-console.path      static</span><br><span class="line">systemd-ask-password-wall.path         static</span><br><span class="line">autovt@.service                        disabled</span><br><span class="line">blk-availability.service               disabled</span><br><span class="line">console-getty.service                  disabled</span><br><span class="line">console-shell.service                  disabled</span><br><span class="line">container-getty@.service               static</span><br><span class="line">dbus-org.freedesktop.hostname1.service static</span><br><span class="line">dbus-org.freedesktop.locale1.service   static</span><br><span class="line">dbus-org.freedesktop.login1.service    static</span><br><span class="line">dbus-org.freedesktop.machine1.service  static</span><br><span class="line">dbus-org.freedesktop.network1.service  invalid</span><br><span class="line">dbus-org.freedesktop.timedate1.service static</span><br><span class="line">dbus.service                           static</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>staticはInstallを持たないので、単体で起動できない(他のUnitに依存)する。<br>enabled/disabled はシステム起動時の自動起動の有効/無効を意味する。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 自動起動を有効にする</span><br><span class="line">systemctl enable node_server.service</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/node_server.service to /etc/systemd/system/node_server.service.</span><br><span class="line"></span><br><span class="line"># 自動起動を無効にする</span><br><span class="line">systemctl disable node_server.service</span><br><span class="line">Removed symlink /etc/systemd/system/multi-user.target.wants/node_server.service.</span><br></pre></td></tr></table></figure>
<p>systemd/system にシンボリックリンクを作ることがわかる。</p>
<p>自動起動を有効にする</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable node_server.service</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/node.service to /etc/systemd/system/node.service.</span><br><span class="line"></span><br><span class="line">systemctl list-unit-files --type=service | grep node_server.service</span><br><span class="line">node_server.service                    enabled</span><br></pre></td></tr></table></figure>
<p>サービスをスタートする</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start node_server.service</span><br></pre></td></tr></table></figure>
<p>起動を確認する</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">systemctl status node_server.service</span><br><span class="line">● node_server.service - Node.js Server</span><br><span class="line">   Loaded: loaded (/etc/systemd/system/node_server.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Sun 2016-06-06 20:11:11 UTC; 4s ago</span><br><span class="line"> Main PID: 90 (node)</span><br><span class="line">   CGroup: /system.slice/node_server.service</span><br><span class="line">           └─90 /usr/bin/node /home/node/server.js</span><br><span class="line"></span><br><span class="line">Jun 06 20:11:11 5bb4328b5c84 systemd[1]: Started Node.js Server.</span><br><span class="line">Jun 06 20:11:11 5bb4328b5c84 systemd[1]: Starting Node.js Server...</span><br><span class="line">Jun 06 20:11:11 5bb4328b5c84 node-server[90]: Server running at http://0.0.0.0:3000/</span><br></pre></td></tr></table></figure>
<p>アクセス確認する</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl http://$(docker-machine ip dev):3000/</span><br><span class="line">Hello World</span><br></pre></td></tr></table></figure>
<p>.serveceファイルの再読み込み</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure>
<p>ついでに再起動</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart node_server.service</span><br></pre></td></tr></table></figure>
<h2 id="u307E_u3068_u3081"><a href="#u307E_u3068_u3081" class="headerlink" title="まとめ"></a>まとめ</h2><p>起動スクリプトの依存性や順序などは場合によっては複雑化するが、systemdを使うことで設定ファイルに落としこめることは、<br>メリットになるのではないだろうか。<br>ただ、systemdは全体像が大きいため把握できていないが、まだまだ落とし穴も多い様子。<br>iniからsystemdに置き換わっているのは事実なので、さらに使用して理解する必要がありそうだ。</p>
<h2 id="u53C2_u8003_u306B_u3057_u305F_u30DA_u30FC_u30B8"><a href="#u53C2_u8003_u306B_u3057_u305F_u30DA_u30FC_u30B8" class="headerlink" title="参考にしたページ"></a>参考にしたページ</h2><ul>
<li><a href="http://dev.classmethod.jp/cloud/aws/systemd-getting-started/" target="_blank" rel="external">systemd超入門</a></li>
<li><a href="https://wiki.archlinuxjp.org/index.php/Systemd" target="_blank" rel="external">wiki.archlinuxjp.org systemd</a></li>
<li><a href="https://blog.docker.com/2013/09/docker-can-now-run-within-docker/" target="_blank" rel="external">Docker can now run within Docker</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>nodejsのプロセスバックグラウンドで実行する(デーモン化)する場合、だいたい<a href="https://www.npmjs.com/package/forever">forever</a>などが選択されると思う。<br>今回は、Fedora、CentOS 7のデーモンとなるsystemdを使ってデーモン化してみた。<br>]]>
    
    </summary>
    
      <category term="tec" scheme="http://blog.kazu69.net/categories/tec/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Serverless Frameworkを使ってAWS LambdaとAPI Gatewayを試した]]></title>
    <link href="http://blog.kazu69.net/2016/05/12/playing-aws-lamda-api-gateway-using-serverless-framework/"/>
    <id>http://blog.kazu69.net/2016/05/12/playing-aws-lamda-api-gateway-using-serverless-framework/</id>
    <published>2016-05-12T10:26:02.000Z</published>
    <updated>2016-05-12T16:19:00.000Z</updated>
    <content type="html"><![CDATA[<p>サーバーレスでアプリケーションを構築するためのNode.jsのフレームワーク<a href="/">Serverless</a>を使って、<br><a href="https://aws.amazon.com/lambda/" target="_blank" rel="external">AWS Lambda</a>と<a href="https://aws.amazon.com/jp/api-gateway/" target="_blank" rel="external">Amazon API Gateway</a>をつかってSlack Botを試してみたときのメモ。</p>
<a id="more"></a>
<p>SlackのメッセージをAPI GatewayにPOSTして、AWS Lambdaで処理をして、webhookを使ってslackに投稿する。</p>
<p><img src="/images/2016/05/12/serverless8.png" alt=""></p>
<h2 id="AWS_CLI_u3092_u7AEF_u672B_28Mac_29_u306B_u30A4_u30F3_u30B9_u30C8_u30FC_u30EB_u3059_u308B"><a href="#AWS_CLI_u3092_u7AEF_u672B_28Mac_29_u306B_u30A4_u30F3_u30B9_u30C8_u30FC_u30EB_u3059_u308B" class="headerlink" title="AWS CLIを端末(Mac)にインストールする"></a>AWS CLIを端末(Mac)にインストールする</h2><p>なにはともあれ、AWSのコマンドラインインターフェイスを使うので端末にインストールする。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">"https://bootstrap.pypa.io/get-pip.py"</span> -o <span class="string">"get-pip.py"</span></span><br><span class="line">sudo python get-pip.py</span><br><span class="line"></span><br><span class="line">The directory <span class="string">'/Users/YOU/Library/Caches/pip/http'</span> or its parent directory is not owned by the current user and the cache has been disabled. Please check the permissions and owner of that directory. If executing pip with sudo, you may want sudo<span class="string">'s -H flag.</span><br><span class="line">The directory '</span>/Users/YOU/Library/Caches/pip<span class="string">' or its parent directory is not owned by the current user and caching wheels has been disabled. check the permissions and owner of that directory. If executing pip with sudo, you may want sudo'</span>s -H flag.</span><br><span class="line">Requirement already up-to-date: pip <span class="keyword">in</span> /Library/Python/2.7/site-packages/pip-8.1.1-py2.7.egg</span><br><span class="line">Collecting wheel</span><br><span class="line">  Downloading wheel-0.29.0-py2.py3-none-any.whl (66kB)</span><br><span class="line">    100% |████████████████████████████████| 71kB 1.3MB/s</span><br><span class="line">Installing collected packages: wheel</span><br><span class="line">Successfully installed wheel-0.29.0</span><br><span class="line"></span><br><span class="line">sudo pip install awscli</span><br><span class="line"></span><br><span class="line">aws configure</span><br><span class="line">AWS Access Key ID [None]: XXXXXXXXXXXXXXXXXXX</span><br><span class="line">AWS Secret Access Key [None]: xxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">Default region name [None]: tokyo</span><br><span class="line">Default output format [None]: json</span><br><span class="line"></span><br><span class="line">ls -la ~/.aws</span><br><span class="line">total 16</span><br><span class="line">-rw-------    1 YOU  staff    39  5  1 08:32 config</span><br><span class="line">-rw-------    1 YOU  staff   116  5  1 08:32 credentials</span><br></pre></td></tr></table></figure>
<h2 id="IAM_28Identity_and_Access_Management_29_u30E6_u30FC_u30B6_u30FC_u3068_u30DD_u30EA_u30B7_u30FC_u306E_u4F5C_u6210"><a href="#IAM_28Identity_and_Access_Management_29_u30E6_u30FC_u30B6_u30FC_u3068_u30DD_u30EA_u30B7_u30FC_u306E_u4F5C_u6210" class="headerlink" title="IAM(Identity and Access Management)ユーザーとポリシーの作成"></a>IAM(Identity and Access Management)ユーザーとポリシーの作成</h2><p>AWSのダッシュボードの <a href="https://console.aws.amazon.com/iam/home" target="_blank" rel="external">IAM</a> からユーザーを作成する。<br>今回は<code>serverless-admin</code> という名前で作成する。</p>
<p><img src="/images/2016/05/12/serverless1.png" alt=""></p>
<p>認証情報は後ほど必要なので認証情報はダウンロードしておく。</p>
<p><img src="/images/2016/05/12/serverless2.png" alt=""></p>
<p>続いてポリシーをアタッチする。</p>
<p>IAMページのポリシーを選択し、<code>AdministratorAccess</code> を選んでアタッチする。</p>
<p><img src="/images/2016/05/12/serverless3.png" alt=""></p>
<p><img src="/images/2016/05/12/serverless4.png" alt=""></p>
<h2 id="Serverless_u306E_u30A4_u30F3_u30B9_u30C8_u30FC_u30EB_u3068_u30D7_u30ED_u30B8_u30A7_u30AF_u30C8_u4F5C_u6210"><a href="#Serverless_u306E_u30A4_u30F3_u30B9_u30C8_u30FC_u30EB_u3068_u30D7_u30ED_u30B8_u30A7_u30AF_u30C8_u4F5C_u6210" class="headerlink" title="Serverlessのインストールとプロジェクト作成"></a>Serverlessのインストールとプロジェクト作成</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">v5.10.1</span><br><span class="line"></span><br><span class="line">npm i -g serverless</span><br><span class="line"></span><br><span class="line">serverless</span><br><span class="line"> _______                             __</span><br><span class="line">|   _   .-----.----.--.--.-----.----|  .-----.-----.-----.</span><br><span class="line">|   |___|  -__|   _|  |  |  -__|   _|  |  -__|__ --|__ --|</span><br><span class="line">|____   |_____|__|  \___/|_____|__| |__|_____|_____|_____|</span><br><span class="line">|   |   |             The Serverless Application Framework</span><br><span class="line">|       |                           serverless.com, v0.5.5</span><br><span class="line">`-------<span class="string">'</span><br><span class="line"></span><br><span class="line">Commands</span><br><span class="line">* Serverless documentation: http://docs.serverless.com</span><br><span class="line">* You can run commands with "serverless" or the shortcut "sls"</span><br><span class="line">* Pass "--help" after any &lt;context&gt; &lt;action&gt; for contextual help</span><br><span class="line"></span><br><span class="line">"project" actions:</span><br><span class="line">  create</span><br><span class="line">  install</span><br><span class="line">  init</span><br><span class="line">  remove</span><br><span class="line"></span><br><span class="line">"function" actions:</span><br><span class="line">  run</span><br><span class="line">  create</span><br><span class="line">  deploy</span><br><span class="line">  logs</span><br><span class="line">  remove</span><br><span class="line">  rollback</span><br><span class="line"></span><br><span class="line">"endpoint" actions:</span><br><span class="line">  deploy</span><br><span class="line">  remove</span><br><span class="line"></span><br><span class="line">"event" actions:</span><br><span class="line">  deploy</span><br><span class="line">  remove</span><br><span class="line"></span><br><span class="line">"dash" actions:</span><br><span class="line">  deploy</span><br><span class="line">  summary</span><br><span class="line"></span><br><span class="line">"stage" actions:</span><br><span class="line">  create</span><br><span class="line">  remove</span><br><span class="line"></span><br><span class="line">"region" actions:</span><br><span class="line">  create</span><br><span class="line">  remove</span><br><span class="line"></span><br><span class="line">"resources" actions:</span><br><span class="line">  deploy</span><br><span class="line">  remove</span><br><span class="line">  diff</span><br><span class="line"></span><br><span class="line">"plugin" actions:</span><br><span class="line">  create</span><br><span class="line"></span><br><span class="line">"variables" actions:</span><br><span class="line">  list</span><br><span class="line">  set</span><br><span class="line">  unset</span></span><br></pre></td></tr></table></figure>
<p>You can run commands with “serverless” or the shortcut “sls” とあるように<br><code>serverless</code>は<code>sls</code>でaliasされているとのこと。</p>
<p>つづいて、プロジェクトの作成を行う。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">sls project init</span><br><span class="line"> _______                             __</span><br><span class="line">|   _   .-----.----.--.--.-----.----|  .-----.-----.-----.</span><br><span class="line">|   |___|  -__|   _|  |  |  -__|   _|  |  -__|__ --|__ --|</span><br><span class="line">|____   |_____|__|  \___/|_____|__| |__|_____|_____|_____|</span><br><span class="line">|   |   |             The Serverless Application Framework</span><br><span class="line">|       |                           serverless.com, v0.5.5</span><br><span class="line">`-------<span class="string">'</span><br><span class="line"></span><br><span class="line">Serverless: Initializing Serverless Project...</span><br><span class="line">Serverless: Enter a name for this project:  (serverless-b1ntox) serverless-greeints</span><br><span class="line">Serverless: Enter a new stage name for this project:  (dev)</span><br><span class="line">Serverless: For the "dev" stage, do you want to use an existing Amazon Web Services profile or create a new one?</span><br><span class="line">  &gt; Existing Profile</span><br><span class="line">    Create A New Profile</span><br><span class="line">Serverless: Select a profile for your project:</span><br><span class="line">  &gt; default</span><br><span class="line">Serverless: Creating stage "dev"...</span><br><span class="line">Serverless: Select a new region for your stage:</span><br><span class="line">    us-east-1</span><br><span class="line">    us-west-2</span><br><span class="line">  &gt; eu-west-1</span><br><span class="line">    eu-central-1</span><br><span class="line">    ap-northeast-1</span><br><span class="line">Serverless: Creating region "eu-west-1" in stage "dev"...</span><br><span class="line">Serverless: Deploying resources to stage "dev" in region "eu-west-1" via Cloudformation (~3 minutes)...</span><br><span class="line">Serverless: Successfully deployed "dev" resources to "eu-west-1"</span><br><span class="line">Serverless: Successfully created region "eu-west-1" within stage "dev"</span><br><span class="line">Serverless: Successfully created stage "dev"</span><br><span class="line">Serverless: Successfully initialized project "serverless-greeints"</span></span><br></pre></td></tr></table></figure>
<p>プロジェクトを作成すると以下のようになる。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tree -L 2</span><br><span class="line">.</span><br><span class="line">│ </span><br><span class="line">└── serverless-greeints</span><br><span class="line">      ├── _meta</span><br><span class="line">      │   ├── resources</span><br><span class="line">      │   └── variables</span><br><span class="line">      ├── admin.env</span><br><span class="line">      ├── package.json</span><br><span class="line">      ├── s-project.json</span><br><span class="line">      └── s-resources-cf.json</span><br></pre></td></tr></table></figure>
<p>プロジェクト毎に次のような<code>s-project.json</code>が作成される。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"serverless-greeints"</span>,</span><br><span class="line">  <span class="string">"custom"</span>: &#123;&#125;,</span><br><span class="line">  <span class="string">"plugins"</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>admin.env</code>にはAWSのAccess Keysのパスが書き込まれる。<br>初期値はdefaultとなり、$HOME/.awsを参照する。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AWS_DEV_PROFILE=default</span><br></pre></td></tr></table></figure>
<p><code>_meta/variables</code>にはプロジェクトごとのstageやregionなどの設定ファイルがjsonで保持されている。<br>たとえばstateがdev、reagionがus:westなら該当する設定ファイルは<code>s-variables-dev-uswest.json</code>となる。</p>
<p><code>s-resources-cf.json</code>はCloudFormationのテンプレートファイル。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"AWSTemplateFormatVersion"</span>: <span class="string">"2010-09-09"</span>,</span><br><span class="line">  <span class="string">"Description"</span>: <span class="string">"The AWS CloudFormation template for this Serverless application's resources outside of Lambdas and Api Gateway"</span>,</span><br><span class="line">  <span class="string">"Resources"</span>: &#123;</span><br><span class="line">    <span class="string">"IamRoleLambda"</span>: &#123;</span><br><span class="line">      <span class="string">"Type"</span>: <span class="string">"AWS::IAM::Role"</span>,</span><br><span class="line">      <span class="string">"Properties"</span>: &#123;</span><br><span class="line">        <span class="string">"AssumeRolePolicyDocument"</span>: &#123;</span><br><span class="line">          <span class="string">"Version"</span>: <span class="string">"2012-10-17"</span>,</span><br><span class="line">          <span class="string">"Statement"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">"Effect"</span>: <span class="string">"Allow"</span>,</span><br><span class="line">              <span class="string">"Principal"</span>: &#123;</span><br><span class="line">                <span class="string">"Service"</span>: [</span><br><span class="line">                  <span class="string">"lambda.amazonaws.com"</span></span><br><span class="line">                ]</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="string">"Action"</span>: [</span><br><span class="line">                <span class="string">"sts:AssumeRole"</span></span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"Path"</span>: <span class="string">"/"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"IamPolicyLambda"</span>: &#123;</span><br><span class="line">      <span class="string">"Type"</span>: <span class="string">"AWS::IAM::Policy"</span>,</span><br><span class="line">      <span class="string">"Properties"</span>: &#123;</span><br><span class="line">        <span class="string">"PolicyName"</span>: <span class="string">"$&#123;stage&#125;-$&#123;project&#125;-lambda"</span>,</span><br><span class="line">        <span class="string">"PolicyDocument"</span>: &#123;</span><br><span class="line">          <span class="string">"Version"</span>: <span class="string">"2012-10-17"</span>,</span><br><span class="line">          <span class="string">"Statement"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">"Effect"</span>: <span class="string">"Allow"</span>,</span><br><span class="line">              <span class="string">"Action"</span>: [</span><br><span class="line">                <span class="string">"logs:CreateLogGroup"</span>,</span><br><span class="line">                <span class="string">"logs:CreateLogStream"</span>,</span><br><span class="line">                <span class="string">"logs:PutLogEvents"</span></span><br><span class="line">              ],</span><br><span class="line">              <span class="string">"Resource"</span>: <span class="string">"arn:aws:logs:$&#123;region&#125;:*:*"</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"Roles"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">"Ref"</span>: <span class="string">"IamRoleLambda"</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"Outputs"</span>: &#123;</span><br><span class="line">    <span class="string">"IamRoleArnLambda"</span>: &#123;</span><br><span class="line">      <span class="string">"Description"</span>: <span class="string">"ARN of the lambda IAM role"</span>,</span><br><span class="line">      <span class="string">"Value"</span>: &#123;</span><br><span class="line">        <span class="string">"Fn::GetAtt"</span>: [</span><br><span class="line">          <span class="string">"IamRoleLambda"</span>,</span><br><span class="line">          <span class="string">"Arn"</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>_meta</code>ディレクトリはデフォルトで作成される.gitignoreに記載されているため、基本的にgit管理されないようになっている。</p>
<h2 id="function_u3092_u89E6_u3063_u3066_u307F_u308B"><a href="#function_u3092_u89E6_u3063_u3066_u307F_u308B" class="headerlink" title="functionを触ってみる"></a>functionを触ってみる</h2><p>API Gateway、Lambdaで実行されるfunctionを作成します。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> serverless-greeints</span><br><span class="line">sls <span class="keyword">function</span> create <span class="built_in">functions</span>/hello</span><br><span class="line">Serverless: Please, select a runtime <span class="keyword">for</span> this new Function</span><br><span class="line">    nodejs4.3</span><br><span class="line">    python2.7</span><br><span class="line">  &gt; nodejs (v0.10, soon to be deprecated)</span><br><span class="line">Serverless: For this new Function, would you like to create an Endpoint, Event, or just the Function?</span><br><span class="line">  &gt; Create Endpoint</span><br><span class="line">    Create Event</span><br><span class="line">    Just the Function...</span><br><span class="line">Serverless: Successfully created <span class="keyword">function</span>: <span class="string">"functions/hello"</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tree -L 2 <span class="built_in">functions</span></span><br><span class="line"><span class="built_in">functions</span></span><br><span class="line">└── hello</span><br><span class="line">    ├── event.json</span><br><span class="line">    ├── handler.js</span><br><span class="line">    └── s-function.json</span><br></pre></td></tr></table></figure>
<p>Amazon API Gatewayのマッピングテンプレートとなるs-function.jsonは以下のようになる。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"hello"</span>,</span><br><span class="line">  <span class="string">"runtime"</span>: <span class="string">"nodejs"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">"Serverless Lambda function for project: serverless-greeints"</span>,</span><br><span class="line">  <span class="string">"customName"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"customRole"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"handler"</span>: <span class="string">"handler.handler"</span>,</span><br><span class="line">  <span class="string">"timeout"</span>: <span class="number">6</span>,</span><br><span class="line">  <span class="string">"memorySize"</span>: <span class="number">1024</span>,</span><br><span class="line">  <span class="string">"authorizer"</span>: &#123;&#125;,</span><br><span class="line">  <span class="string">"custom"</span>: &#123;</span><br><span class="line">    <span class="string">"excludePatterns"</span>: []</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"endpoints"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"path"</span>: <span class="string">"hello"</span>,</span><br><span class="line">      <span class="string">"method"</span>: <span class="string">"GET"</span>,</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"AWS"</span>,</span><br><span class="line">      <span class="string">"authorizationType"</span>: <span class="string">"none"</span>,</span><br><span class="line">      <span class="string">"authorizerFunction"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">"apiKeyRequired"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">"requestParameters"</span>: &#123;&#125;,</span><br><span class="line">      <span class="string">"requestTemplates"</span>: &#123;</span><br><span class="line">        <span class="string">"application/json"</span>: <span class="string">""</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"responses"</span>: &#123;</span><br><span class="line">        <span class="string">"400"</span>: &#123;</span><br><span class="line">          <span class="string">"statusCode"</span>: <span class="string">"400"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"default"</span>: &#123;</span><br><span class="line">          <span class="string">"statusCode"</span>: <span class="string">"200"</span>,</span><br><span class="line">          <span class="string">"responseParameters"</span>: &#123;&#125;,</span><br><span class="line">          <span class="string">"responseModels"</span>: &#123;</span><br><span class="line">            <span class="string">"application/json;charset=UTF-8"</span>: <span class="string">"Empty"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">"responseTemplates"</span>: &#123;</span><br><span class="line">            <span class="string">"application/json;charset=UTF-8"</span>: <span class="string">""</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"events"</span>: [],</span><br><span class="line">  <span class="string">"environment"</span>: &#123;</span><br><span class="line">    <span class="string">"SERVERLESS_PROJECT"</span>: <span class="string">"$&#123;project&#125;"</span>,</span><br><span class="line">    <span class="string">"SERVERLESS_STAGE"</span>: <span class="string">"$&#123;stage&#125;"</span>,</span><br><span class="line">    <span class="string">"SERVERLESS_REGION"</span>: <span class="string">"$&#123;region&#125;"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"vpc"</span>: &#123;</span><br><span class="line">    <span class="string">"securityGroupIds"</span>: [],</span><br><span class="line">    <span class="string">"subnetIds"</span>: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>実際にfunctionを実行する。</p>
<p>ここは本来はAPI Gateway側で実行されるのだが、Serverlessではローカルとリーモートどちらでも手元から実行できるようになっている。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># stageを選択してないのでlocalで実行</span></span><br><span class="line">sls <span class="keyword">function</span> run hello</span><br><span class="line">Serverless: Running hello...</span><br><span class="line">Serverless: -----------------</span><br><span class="line">Serverless: Success! - This Response Was Returned:</span><br><span class="line">Serverless: &#123;</span><br><span class="line">    <span class="string">"message"</span>: <span class="string">"Go Serverless! Your Lambda function executed successfully!"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># stageを選択してdeployed stageで実行</span></span><br><span class="line">sls <span class="keyword">function</span> run hello <span class="_">-s</span> dev</span><br><span class="line">Serverless: Running hello...</span><br><span class="line">Serverless: WARNING: This variable is not defined: region</span><br><span class="line">Serverless: -----------------</span><br><span class="line">Serverless: Success! - This Response Was Returned:</span><br><span class="line">Serverless: &#123;</span><br><span class="line">    <span class="string">"message"</span>: <span class="string">"Go Serverless! Your Lambda function executed successfully!"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>試したところで、AWSにデプロイする。<br>今回はダッシュボードとなる<code>dash</code>をデプロイする。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"> sls dash deploy</span><br><span class="line"> _______                             __</span><br><span class="line">|   _   .-----.----.--.--.-----.----|  .-----.-----.-----.</span><br><span class="line">|   |___|  -__|   _|  |  |  -__|   _|  |  -__|__ --|__ --|</span><br><span class="line">|____   |_____|__|  \___/|_____|__| |__|_____|_____|_____|</span><br><span class="line">|   |   |             The Serverless Application Framework</span><br><span class="line">|       |                           serverless.com, v0.5.5</span><br><span class="line">`-------<span class="string">'</span><br><span class="line"></span><br><span class="line">Use the &lt;up&gt;, &lt;down&gt;, &lt;pageup&gt;, &lt;pagedown&gt;, &lt;home&gt;, and &lt;end&gt; keys to navigate.</span><br><span class="line">Press &lt;enter&gt; to select/deselect, or &lt;space&gt; to select/deselect and move down.</span><br><span class="line">Press &lt;ctrl&gt; + a to select all, and &lt;ctrl&gt; + d to deselect all.</span><br><span class="line">Press &lt;ctrl&gt; + f to select all functions, and &lt;ctrl&gt; + e to select all endpoints.</span><br><span class="line">Press &lt;ctrl&gt; + &lt;enter&gt; to immediately deploy selected.</span><br><span class="line">Press &lt;escape&gt; to cancel.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Serverless: Select the assets you wish to deploy:</span><br><span class="line">    hello</span><br><span class="line">      function - hello</span><br><span class="line">      endpoint - hello - GET</span><br><span class="line">    - - - - -</span><br><span class="line">  &gt; Deploy</span><br><span class="line">    Cancel</span><br><span class="line"></span><br><span class="line">Serverless: Deploying the specified functions in "dev" to the following regions: eu-west-1</span><br><span class="line">Serverless: ------------------------</span><br><span class="line">Serverless: Successfully deployed the following functions in "dev" to the following regions:</span><br><span class="line">Serverless: eu-west-1 ------------------------</span><br><span class="line">Serverless:   hello (serverless-greeints-hello): arn:aws:lambda:eu-west-1:0000000000:function:serverless-greeints-hello:dev</span><br><span class="line"></span><br><span class="line">Serverless: Deploying endpoints in "dev" to the following regions: eu-west-1</span><br><span class="line">Serverless: Successfully deployed endpoints in "dev" to the following regions:</span><br><span class="line">Serverless: eu-west-1 ------------------------</span><br><span class="line">Serverless:   GET - hello - https://xxxxxxxxx.execute-api.eu-west-1.amazonaws.com/dev/hello</span></span><br></pre></td></tr></table></figure>
<p>最後のエンドポイントが表示されているので、実際にリクエストしてみる。<br>レスポンスが帰って来ればOK。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl https://xxxxxxxxx.execute-api.eu-west-1.amazonaws.com/dev/hello</span><br><span class="line">&#123;<span class="string">"message"</span>:<span class="string">"Go Serverless! Your Lambda function executed successfully!"</span>&#125;</span><br></pre></td></tr></table></figure>
<h3 id="function_u3092_u7DE8_u96C6_u3059_u308B"><a href="#function_u3092_u7DE8_u96C6_u3059_u308B" class="headerlink" title="functionを編集する"></a>functionを編集する</h3><p>一通り触ってみたので、実際にfunctionを編集していく。<br>まず<code>s-functions.json</code>を以下のように変更する。<br>ちなみにAPI Gatewayでは<a href="http://velocity.apache.org/engine/devel/vtl-reference-guide.html" target="_blank" rel="external">VTL(Velocity Template Language)記法</a>が使われる。</p>
<p>マッピングに使用できる変数などは<a href="http://docs.aws.amazon.com/ja_jp/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html" target="_blank" rel="external">マッピングテンプレートリファレンス</a>にまとまっている。</p>
<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">-      "requestTemplates": &#123;&#125;,</span></span><br><span class="line"><span class="addition">+      "requestTemplates": &#123;</span></span><br><span class="line"><span class="addition">+        "application/json": "&#123;\"message\": \"$input.params('message')\"&#125;"</span></span><br><span class="line"><span class="addition">+      &#125;,</span></span><br></pre></td></tr></table></figure>
<p>これでjson形式のリクエストで<code>message</code>を受け取ることができる。</p>
<p>Lambdaで実行する処理を書いていく。</p>
<p>handler.jsを編集する。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports.handler = <span class="function"><span class="keyword">function</span>(<span class="params">event, context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> message = event.message || <span class="string">'Good bye'</span>;</span><br><span class="line">  <span class="keyword">return</span> context.done(<span class="literal">null</span>, &#123;</span><br><span class="line">    message: <span class="string">'Hello '</span> + message + <span class="string">' !'</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>単純にリクエストを待ち受けて、簡単なメッセージを返す。<br>先ほど<code>requestTemplates</code>を修正したので、<code>message</code>を受け取ることができる。</p>
<p>手元でfunctionを実行する。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sls <span class="keyword">function</span> run hello</span><br><span class="line">Serverless: Running hello...</span><br><span class="line">Serverless: -----------------</span><br><span class="line">Serverless: Success! - This Response Was Returned:</span><br><span class="line">Serverless: &#123;</span><br><span class="line">    <span class="string">"message"</span>: <span class="string">"Hello Good bye !"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>また、リクエストされる<code>message</code>を渡してfunctionを実行するには、<br>event.jsonにリクエストを追加する。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="string">"message"</span>: <span class="string">"World"</span> &#125;</span><br></pre></td></tr></table></figure>
<p>再度、ローカルでfunctionを実行する。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sls <span class="keyword">function</span> run hello</span><br><span class="line">Serverless: Running hello...</span><br><span class="line">Serverless: -----------------</span><br><span class="line">Serverless: Success! - This Response Was Returned:</span><br><span class="line">Serverless: &#123;</span><br><span class="line">    <span class="string">"message"</span>: <span class="string">"Hello World !"</span></span><br></pre></td></tr></table></figure>
<p>想定した動きとなったので、実際にfunctionをAWS側にデプロイする。<br>ちなみに今回も<code>dash</code>(ダッシュボード)をデプロイしているが、<code>endpoint</code>のみでも良い。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">sls dash deploy</span><br><span class="line"> _______                             __</span><br><span class="line">|   _   .-----.----.--.--.-----.----|  .-----.-----.-----.</span><br><span class="line">|   |___|  -__|   _|  |  |  -__|   _|  |  -__|__ --|__ --|</span><br><span class="line">|____   |_____|__|  \___/|_____|__| |__|_____|_____|_____|</span><br><span class="line">|   |   |             The Serverless Application Framework</span><br><span class="line">|       |                           serverless.com, v0.5.5</span><br><span class="line">`-------<span class="string">'</span><br><span class="line"></span><br><span class="line">Use the &lt;up&gt;, &lt;down&gt;, &lt;pageup&gt;, &lt;pagedown&gt;, &lt;home&gt;, and &lt;end&gt; keys to navigate.</span><br><span class="line">Press &lt;enter&gt; to select/deselect, or &lt;space&gt; to select/deselect and move down.</span><br><span class="line">Press &lt;ctrl&gt; + a to select all, and &lt;ctrl&gt; + d to deselect all.</span><br><span class="line">Press &lt;ctrl&gt; + f to select all functions, and &lt;ctrl&gt; + e to select all endpoints.</span><br><span class="line">Press &lt;ctrl&gt; + &lt;enter&gt; to immediately deploy selected.</span><br><span class="line">Press &lt;escape&gt; to cancel.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Serverless: Select the assets you wish to deploy:</span><br><span class="line">    hello</span><br><span class="line">      function - hello</span><br><span class="line">      endpoint - hello - GET</span><br><span class="line">    - - - - -</span><br><span class="line">  &gt; Deploy</span><br><span class="line">    Cancel</span><br><span class="line"></span><br><span class="line">Serverless: Deploying the specified functions in "dev" to the following regions: eu-west-1</span><br><span class="line">Serverless: ------------------------</span><br><span class="line">Serverless: Successfully deployed the following functions in "dev" to the following regions:</span><br><span class="line">Serverless: eu-west-1 ------------------------</span><br><span class="line">Serverless:   hello (serverless-greeints-hello): arn:aws:lambda:eu-west-1:0000000000:function:serverless-greeints-hello:dev</span><br><span class="line"></span><br><span class="line">Serverless: Deploying endpoints in "dev" to the following regions: eu-west-1</span><br><span class="line">Serverless: Successfully deployed endpoints in "dev" to the following regions:</span><br><span class="line">Serverless: eu-west-1 ------------------------</span><br><span class="line">Serverless:   GET - hello - https://xxxxxxxxx.execute-api.eu-west-1.amazonaws.com/dev/hello</span></span><br></pre></td></tr></table></figure>
<p>実際にリクエストをしてみる。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl https://xxxxxxxxx.execute-api.eu-west-1.amazonaws.com/dev/hello</span><br><span class="line">&#123;<span class="string">"message"</span>:<span class="string">"Hello Good bye !"</span>&#125;%</span><br><span class="line"></span><br><span class="line">curl https://xxxxxxxxx.execute-api.eu-west-1.amazonaws.com/dev/hello\?message\=World</span><br><span class="line">&#123;<span class="string">"message"</span>:<span class="string">"Hello World !"</span>&#125;%</span><br></pre></td></tr></table></figure>
<p>ということで、Amazon API GatewayとAWS Lambdaをひととおり触った。</p>
<h3 id="POST_u30E1_u30BD_u30C3_u30C9_u306B_u5909_u66F4_u3059_u308B"><a href="#POST_u30E1_u30BD_u30C3_u30C9_u306B_u5909_u66F4_u3059_u308B" class="headerlink" title="POSTメソッドに変更する"></a>POSTメソッドに変更する</h3><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">-      "method": "GET",</span></span><br><span class="line"><span class="addition">+      "method": "POST",</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-      "requestTemplates": &#123;</span></span><br><span class="line"><span class="deletion">-        "application/json": "&#123;\"message\": \"$input.params('message')\"&#125;"</span></span><br><span class="line"><span class="deletion">-      &#125;,</span></span><br><span class="line"><span class="addition">+      "requestTemplates": &#123;</span></span><br><span class="line"><span class="addition">+        "application/json": "&#123;\"message\": \"$util.escapeJavaScript($input.json('$.message'))\"&#125;"</span></span><br><span class="line"><span class="addition">+      &#125;,</span></span><br></pre></td></tr></table></figure>
<p>jsonのpostデータをescape処理して受け取ります。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sls endpoint deploy</span><br><span class="line"></span><br><span class="line">Serverless: Deploying endpoints <span class="keyword">in</span> <span class="string">"dev"</span> to the following regions: eu-west-1</span><br><span class="line">Serverless: Successfully deployed endpoints <span class="keyword">in</span> <span class="string">"dev"</span> to the following regions:</span><br><span class="line">Serverless: eu-west-1 ------------------------</span><br><span class="line">Serverless:   POST - hello - https://xxxxxxxxx.execute-api.eu-west-1.amazonaws.com/dev/hello</span><br></pre></td></tr></table></figure>
<p>最後にPOSTのエンドポイントが表示された。<br>実際にリクエストを投げてみる。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -H <span class="string">"Content-type: application/json"</span> -X POST <span class="_">-d</span> <span class="string">"&#123;\"message\": \"World\"&#125;"</span> https://xxxxxxxxx.execute-api.eu-west-1.amazonaws.com/dev/hello</span><br><span class="line">&#123;<span class="string">"message"</span>:<span class="string">"Hello \"World\" !"</span>&#125;%</span><br></pre></td></tr></table></figure>
<p>問題なくレスポンスが帰ってきた。</p>
<h3 id="Slack_Bot__u3092_u4F5C_u3063_u3066_u307F_u308B"><a href="#Slack_Bot__u3092_u4F5C_u3063_u3066_u307F_u308B" class="headerlink" title="Slack Bot を作ってみる"></a>Slack Bot を作ってみる</h3><p>ここまで出来たので、これらを使ってSlack Botを作ってみる。<br>まずは<a href="https://api.slack.com/web" target="_blank" rel="external">api.slack.com</a>からTokenを発行する。</p>
<p>続いて、AWS Lambdaで実行される<code>handler.js</code>を編集する。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> https = <span class="built_in">require</span>(<span class="string">'https'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parse</span>(<span class="params">data, separator</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> res = &#123;&#125;;</span><br><span class="line">  data.body.split(<span class="string">'&amp;'</span>).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tmp = val.split(separator, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">var</span> k = tmp[<span class="number">0</span>],</span><br><span class="line">        v = tmp[<span class="number">1</span>];</span><br><span class="line">    res[k] = v;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports.handler = <span class="function"><span class="keyword">function</span>(<span class="params">event, context</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Incoming Web Hook のURL</span></span><br><span class="line">  <span class="keyword">var</span> SLACK_HOOKURL = SLACK_INCCOMING_WEBHOOK_URL;</span><br><span class="line">  <span class="keyword">var</span> SLACK_TOKEN = SLACK_TOKEN;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> data = parse(event, <span class="string">'='</span>);</span><br><span class="line">  <span class="keyword">var</span> user_name = data.user_name;</span><br><span class="line">  <span class="keyword">var</span> response_text = <span class="built_in">decodeURIComponent</span>(data.text.replace(data.trigger_word, <span class="string">''</span>).replace(<span class="regexp">/\+/g</span>, <span class="string">' '</span>));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(data.token !== SLACK_TOKEN) &#123;</span><br><span class="line">    <span class="keyword">return</span> context.done(&#123;<span class="string">'text'</span>: <span class="string">':sob: Failed Invalid Token'</span> &#125;, <span class="literal">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> message = <span class="string">":hand: @"</span> + user_name + <span class="string">" Hello "</span> + (response_text || <span class="string">"Good bye"</span>);</span><br><span class="line">  <span class="keyword">var</span> options = &#123;</span><br><span class="line">    hostname: <span class="string">'hooks.slack.com'</span>,</span><br><span class="line">    port: <span class="number">443</span>,</span><br><span class="line">    path: SLACK_HOOKURL,</span><br><span class="line">    method: <span class="string">'POST'</span>,</span><br><span class="line">    headers: &#123; <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>, &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// @metionを使うために`link_names`を設定</span></span><br><span class="line">  <span class="keyword">var</span> data = &#123;</span><br><span class="line">    <span class="string">"text"</span>: message,</span><br><span class="line">    <span class="string">"link_names"</span>: <span class="number">1</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> req = https.request(options, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    res</span><br><span class="line">    .on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// If success, post a response back into the Slack channel</span></span><br><span class="line">        <span class="keyword">return</span> context.done(<span class="literal">null</span>, &#123;<span class="string">'text'</span>: <span class="string">':ok_woman: Success'</span>&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> context.done(&#123;<span class="string">'text'</span>: <span class="string">':sob: Failed '</span> + e.message&#125;, <span class="literal">null</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  req.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> context.done(&#123;<span class="string">'text'</span>: <span class="string">':sob: Failed '</span> + e.message&#125;, <span class="literal">null</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  req.write(<span class="built_in">JSON</span>.stringify(data));</span><br><span class="line">  req.end();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>シンプルにslack apiを実行するだけのBotにした。</p>
<p>次にAWSからSlack Botに対して送られたメッセージにHookする<a href="https://api.slack.com/incoming-webhooks" target="_blank" rel="external">Incoming WebHook</a>を作成する。</p>
<p>今回は設定項目を以下のようにした</p>
<table>
<thead>
<tr>
<th>項目</th>
<th>値</th>
</tr>
</thead>
<tbody>
<tr>
<td>Post to Channel</td>
<td>#general (default)</td>
</tr>
<tr>
<td>Webhook URL</td>
<td><a href="https://hooks.slack.com/services/XXXXXXXX/YYYYYYYYY" target="_blank" rel="external">https://hooks.slack.com/services/XXXXXXXX/YYYYYYYYY</a></td>
</tr>
<tr>
<td>Customize Name</td>
<td>incoming-webhook (default)</td>
</tr>
</tbody>
</table>
<p>ここで作成したURLに対してPOSTすることでSlackに通知される。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -H <span class="string">'Content-type: application/json'</span> --data <span class="string">'&#123;"text": "@here This is posted to &lt;#general&gt; and comes from *monkey-bot*.", "channel": "#general", "username": "monkey-bot", "icon_emoji": ":monkey_face:", "link_names": 1&#125;'</span> https://hooks.slack.com/services/XXXXXX/YYYYYY/ZZZZZZ</span><br></pre></td></tr></table></figure>
<p><img src="/images/2016/05/12/serverless6.png" alt=""></p>
<p>続いて、Slack BotがメッセージをAWSに送信するために使うHookとなる<a href="https://api.slack.com/outgoing-webhooks" target="_blank" rel="external">Outgoing WebHook</a>を作成する。</p>
<table>
<thead>
<tr>
<th>項目</th>
<th>値</th>
</tr>
</thead>
<tbody>
<tr>
<td>Channel</td>
<td>#general (default)</td>
</tr>
<tr>
<td>Trigger Word(s)</td>
<td>greet</td>
</tr>
<tr>
<td>URL(s)</td>
<td><a href="https://xxxxxxxxx.execute-api.eu-west-1.amazonaws.com/dev/hello" target="_blank" rel="external">https://xxxxxxxxx.execute-api.eu-west-1.amazonaws.com/dev/hello</a><br>(作成したGate Way API URL)</td>
</tr>
<tr>
<td>Token</td>
<td>generateされているtoken</td>
</tr>
<tr>
<td>Customize Name</td>
<td>outgoing-webhook (default)</td>
</tr>
</tbody>
</table>
<p><code>Trigger Word</code>でslackに投稿すると、URLにpostされるようになる。</p>
<p>ここまでできたので、実際にBotで遊んでみる。</p>
<p><img src="/images/2016/05/12/serverless7.png" alt=""></p>
<p>ということで、Serverless を使って、Amazon Gate Way API &amp; AWS LambdaでSlack Botができた。<br>サーバーを作り、管理することないため、アプリケーションに注力できるたりが素晴らしい。</p>
<p>AWS Lambdaのようなイベントドリブンなサービスを使うことで、Botやインターネットに接続する機器からのリクエストを受け付けるアプリケーションが容易に作成できる。<br>またイベント数によりオートスケールしていくので、サーバー管理も気にすることはない。</p>
<p>AWS Lambdaの他にもMicrosoftは<a href="https://azure.microsoft.com/ja-jp/documentation/services/functions/" target="_blank" rel="external">Azure Functions</a>というイベント駆動システムを提供している。</p>
<p>今回利用したServerlessはAmazon API GatewayとAWS Lambdaを中心としたイベントドリブンなサービスを開発するフレームワークだったが、AIやBotの盛り上がりから今後もっと様々なプロジェクト生まれていきそうな感じがする。</p>
<h3 id="u53C2_u8003_u306B_u3057_u305F_u30DA_u30FC_u30B8"><a href="#u53C2_u8003_u306B_u3057_u305F_u30DA_u30FC_u30B8" class="headerlink" title="参考にしたページ"></a>参考にしたページ</h3><p><a href="http://docs.serverless.com/docs/installing-serverless" target="_blank" rel="external">serverless docs</a><br><a href="http://davidcai.github.io/blog/posts/serverless-and-cors/" target="_blank" rel="external">Serverless Framework &amp; AWS API Gateway CORS</a><br><a href="https://docs.aws.amazon.com/ja_jp/apigateway/latest/developerguide/welcome.html" target="_blank" rel="external">Amazon API Gateway とは?</a><br><a href="http://docs.aws.amazon.com/ja_jp/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html" target="_blank" rel="external">API Gateway のマッピングテンプレートリファレンス</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>サーバーレスでアプリケーションを構築するためのNode.jsのフレームワーク<a href="/">Serverless</a>を使って、<br><a href="https://aws.amazon.com/lambda/">AWS Lambda</a>と<a href="https://aws.amazon.com/jp/api-gateway/">Amazon API Gateway</a>をつかってSlack Botを試してみたときのメモ。</p>]]>
    
    </summary>
    
      <category term="memo" scheme="http://blog.kazu69.net/categories/memo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Google AnalyticsのMeasurement ProtocolでJavaScript無効なユーザーをトラッキング]]></title>
    <link href="http://blog.kazu69.net/2016/05/04/tracking-noscript-user-measurement-protocol/"/>
    <id>http://blog.kazu69.net/2016/05/04/tracking-noscript-user-measurement-protocol/</id>
    <published>2016-05-04T02:43:25.000Z</published>
    <updated>2016-05-10T11:25:10.000Z</updated>
    <content type="html"><![CDATA[<p>これまでanalyticsdではJavaScriptの無効のユーザー、メールの開封率、サーバーイベント、POSシステムなどは通常のトラッキングタグでは計測できなかった。<br>しかし、新たに追加された<a href="https://developers.google.com/analytics/devguides/collection/protocol/v1/" target="_blank" rel="external">Measurement Protocol</a>を使うことで、直接イベントをトラッキングができる。</p>
<a id="more"></a>
<p>Measurement Protocolはanalytics.jsなどの上位に位置する低レベルのプロトコルであり、<br>直接analyticsのAPIを実行できるため自由度が高い。</p>
<p><img src="/images/2016/05/04/google-analytics.png" alt=""></p>
<blockquote>
<p>developers.google.com/analytics/devguides/platformより</p>
</blockquote>
<p>ちなみに<code>ga.js</code>はMeasurement Protocolを介してないが、ga.jsを使っているTracking IDでも問題なく利用できる。</p>
<hr>
<p>ウェブアプリケーションのnoscriptのユーザー(crawlerやbot)のアクセスをトラッキングする場合、<br>JavaScriptが無効であるため通常のTrackingタグは利用できない。<br>そこで、Measurement Protocolを使い計測する。</p>
<p>Measurement Protocolに渡すべきパラメーターは<a href="https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters" target="_blank" rel="external">Measurement Protocol のパラメータ リファレンス</a>を参考にする。</p>
<p>いずれのイベントでも必須になるパラメーターは</p>
<table>
<thead>
<tr>
<th>パラメーター</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>v</td>
<td>バージョン</td>
</tr>
<tr>
<td>t</td>
<td>ヒットタイプ (pageview, screenview, event, transaction, item, social, exception, timing)</td>
</tr>
<tr>
<td>tid</td>
<td>トラッキングID (UA-XXXX-Y)</td>
</tr>
<tr>
<td>cid</td>
<td>クライアントID</td>
</tr>
</tbody>
</table>
<p>あとはイベントに応じて組み合わせることになる。</p>
<p>実際にパラメーターが正しいかチェックするために<a href="https://ga-dev-tools.appspot.com/hit-builder/" target="_blank" rel="external">Hit Builder</a>が提供されているので、試してみると分かりやすい。</p>
<p>実際にanalytics上でどのように解析されるかを見る場合は、Hit Builderでリクエストして、<br>analyticsのリアルタイム解析で結果をみると効率的だった。</p>
<p>noscriptユーザーに対して次のようなパラメーターを設定する。</p>
<table>
<thead>
<tr>
<th>パラメーター</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>v</td>
<td>1</td>
</tr>
<tr>
<td>tid</td>
<td>トラッキングID (UA-XXXX-Y)</td>
</tr>
<tr>
<td>cid</td>
<td>クライアントID</td>
</tr>
<tr>
<td>t</td>
<td>event</td>
</tr>
<tr>
<td>ec</td>
<td>イベント カテゴリ</td>
</tr>
<tr>
<td>ea</td>
<td>イベント アクション</td>
</tr>
<tr>
<td>el</td>
<td>イベントラベル</td>
</tr>
</tbody>
</table>
<p>上記のパラメーターでPOSTまたはGETできればよいトラッキングできるので、</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST /collect HTTP/1.1</span><br><span class="line">Host: www.google-analytics.com</span><br><span class="line"></span><br><span class="line">v=1</span><br><span class="line">&amp;tid=UA-XXXXX-Y</span><br><span class="line">&amp;cid=xxxxxxxxxx</span><br><span class="line">&amp;t=event</span><br><span class="line">&amp;ec=JavaScript_Disabled</span><br><span class="line">&amp;ea=pageview</span><br><span class="line">&amp;el=UserAgent+ページパス</span><br></pre></td></tr></table></figure>
<p>または</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /collect?v=1&amp;t=event&amp;tid=UA-XXXXX-Y-1&amp;cid=xxxxxxxxxx&amp;ea=pageview&amp;ec=JS_Disabled&amp;ea=pageview&amp;el=UserAgent+ページパス HTTP/1.1</span><br><span class="line">Host: http://www.google-analytics.com</span><br></pre></td></tr></table></figure>
<p>が実行できれば良い。<br>実際にHit Builderで試してみると、次のようになる。</p>
<p><img src="/images/2016/05/04/hit_builder1.png" alt=""><br><img src="/images/2016/05/04/hit_builder2.png" alt=""></p>
<p>例えばPHPのアプリケーションでこれを用いる場合、</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    $cookie = $_COOKIE[<span class="string">'_ga'</span>];</span><br><span class="line">    <span class="keyword">if</span>(is_null($cookie)) &#123;</span><br><span class="line">        $cid = createCid();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $cookieArray = split(<span class="string">'[\.]'</span>, $cookie, <span class="number">4</span>);</span><br><span class="line">        $cid = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!$cookieArray[<span class="number">2</span>] &amp;&amp; !$cookieArray[<span class="number">3</span>]) &#123; $cid = $cookieArray[<span class="number">2</span>] . <span class="string">'.'</span> . $cookieArray[<span class="number">3</span>]; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $cid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sprintf(<span class="string">'%04x%04x-%04x-%04x-%04x-%04x%04x%04x'</span>,</span><br><span class="line">        mt_rand( <span class="number">0</span>, <span class="number">0xffff</span> ),</span><br><span class="line">        mt_rand( <span class="number">0</span>, <span class="number">0xffff</span> ),</span><br><span class="line">        mt_rand( <span class="number">0</span>, <span class="number">0xffff</span> ),</span><br><span class="line">        mt_rand( <span class="number">0</span>, <span class="number">0x0fff</span> ) | <span class="number">0x4000</span>,</span><br><span class="line">        mt_rand( <span class="number">0</span>, <span class="number">0x3fff</span> ) | <span class="number">0x8000</span>,</span><br><span class="line">        mt_rand( <span class="number">0</span>, <span class="number">0xffff</span> ),</span><br><span class="line">        mt_rand( <span class="number">0</span>, <span class="number">0xffff</span> ),</span><br><span class="line">        mt_rand( <span class="number">0</span>, <span class="number">0xffff</span> )</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trackingUrl</span><span class="params">($data)</span> </span>&#123;</span><br><span class="line">    $result = <span class="string">'https://www.google-analytics.com/collect'</span>;</span><br><span class="line">    $result .= <span class="string">'?payload_data&amp;'</span>;</span><br><span class="line">    $result .= http_build_query($data);</span><br><span class="line">    <span class="keyword">return</span> $result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// send pageview</span></span><br><span class="line">$pageview_data = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'v'</span>   =&gt; <span class="number">1</span>,</span><br><span class="line">    <span class="string">'tid'</span> =&gt; <span class="string">'UA-XXXXXXX-X'</span>,          <span class="comment">// tracking id</span></span><br><span class="line">    <span class="string">'cid'</span> =&gt; getCid(),                <span class="comment">// client id</span></span><br><span class="line">    <span class="string">'t'</span>   =&gt; <span class="string">'pageview'</span>,              <span class="comment">// event type</span></span><br><span class="line">    <span class="string">'dh'</span>  =&gt; $_SERVER[<span class="string">'SERVER_NAME'</span>], <span class="comment">// Hostname</span></span><br><span class="line">    <span class="string">'dp'</span>  =&gt; $_SERVER[<span class="string">'REQUEST_URI'</span>], <span class="comment">// Page</span></span><br><span class="line">    <span class="string">'dt'</span>  =&gt; <span class="string">'Page Title'</span>             <span class="comment">// Title</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// send custom event</span></span><br><span class="line">$event_data = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'v'</span>   =&gt; <span class="number">1</span>,</span><br><span class="line">    <span class="string">'tid'</span> =&gt; <span class="string">'UA-XXXXXXX-X'</span>,             <span class="comment">// tracking id</span></span><br><span class="line">    <span class="string">'cid'</span> =&gt; getCid(),                   <span class="comment">// client id</span></span><br><span class="line">    <span class="string">'t'</span>   =&gt; <span class="string">'event'</span>,                    <span class="comment">// event type</span></span><br><span class="line">    <span class="string">'ec'</span>  =&gt; <span class="string">'JavaScript_Disabled'</span>,      <span class="comment">//Category</span></span><br><span class="line">    <span class="string">'ea'</span>  =&gt; <span class="string">'pageview'</span>,                 <span class="comment">//Action</span></span><br><span class="line">    <span class="string">'el'</span>  =&gt; $_SERVER[<span class="string">'HTTP_USER_AGENT'</span>] <span class="comment">//Label</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>cidはUUID(バージョン4)なのでphpでは<a href="http://php.net/manual/ja/function.uniqid.php#94959" target="_blank" rel="external">uniqid</a>を参考にした。</p>
<p>あとは上記をHTMLに組み込んでやるだけ。<br>仕組みは簡単でnoscriptタグ内でimgタグなどで出力してMeasurement Protocolに対してGETを実行するだけでよい。<br>(ajaxでGETやPOSTするという方法もある)</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">noscript</span> <span class="attr">class</span>=<span class="string">"javascript-disabled-tracking"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"<span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> trackingUrl($pageview_data); <span class="meta">?&gt;</span></span>"</span> <span class="attr">width</span>=<span class="string">"0"</span> <span class="attr">height</span>=<span class="string">"0"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"<span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> trackingUrl($event_data); <span class="meta">?&gt;</span></span>"</span> <span class="attr">width</span>=<span class="string">"0"</span> <span class="attr">height</span>=<span class="string">"0"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>analyticsは独自にログ解析用のサービスを構築・運用することに比べると低コストでログ解析基盤が手に入る。<br>限度はあるけど、無料ながらも高機能なのでそこそこの規模でも問題なく利用できる。<br>それに加えて、Measurement Protocolのように直接APIを実行できる機能となると、<br>ネットに接続できれば画面のないようなものでもイベントをトラッキングできるので、ますますanalyticsの価値が高まりそうだ。</p>
<h3 id="u53C2_u8003_u306B_u3057_u305F_u30DA_u30FC_u30B8"><a href="#u53C2_u8003_u306B_u3057_u305F_u30DA_u30FC_u30B8" class="headerlink" title="参考にしたページ"></a>参考にしたページ</h3><p><a href="http://php.net/manual/ja/function.uniqid.php#94959" target="_blank" rel="external">PHP uniqid</a><br><a href="https://developers.google.com/analytics/devguides/platform/" target="_blank" rel="external">Google アナリティクスの使用方法を学習する</a><br><a href="https://developers.google.com/analytics/devguides/collection/protocol/v1/" target="_blank" rel="external">Measurement Protocol の概要</a><br><a href="https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters" target="_blank" rel="external">Measurement Protocol のパラメータ リファレンス</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>これまでanalyticsdではJavaScriptの無効のユーザー、メールの開封率、サーバーイベント、POSシステムなどは通常のトラッキングタグでは計測できなかった。<br>しかし、新たに追加された<a href="https://developers.google.com/analytics/devguides/collection/protocol/v1/">Measurement Protocol</a>を使うことで、直接イベントをトラッキングができる。</p>]]>
    
    </summary>
    
      <category term="tec" scheme="http://blog.kazu69.net/categories/tec/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Dockerコンテナ内でのnpm installを改善してみる]]></title>
    <link href="http://blog.kazu69.net/2016/05/02/npm-install-speedup-in-docker/"/>
    <id>http://blog.kazu69.net/2016/05/02/npm-install-speedup-in-docker/</id>
    <published>2016-05-02T10:12:54.000Z</published>
    <updated>2016-05-10T12:57:48.000Z</updated>
    <content type="html"><![CDATA[<p>開発やCIでやDockerイメージをbuildする際にnpm installすると、cacheがないため時間がかかる。<br>これはpackageの数が多くなると結構辛いことになるので、なんとかできないかと試してみた。</p>
<a id="more"></a>
<p>以下のような適当なpackageを使って試してみる。</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attr">name</span>": <span class="string">"example-project"</span>,</span><br><span class="line">  "<span class="attr">version</span>": <span class="string">"0.0.1"</span>,</span><br><span class="line">  "<span class="attr">description</span>": <span class="string">"example"</span>,</span><br><span class="line">  "<span class="attr">main</span>": <span class="string">"index.js"</span>,</span><br><span class="line">  "<span class="attr">scripts</span>": &#123;</span><br><span class="line">    "<span class="attr">test</span>": <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  "<span class="attr">author</span>": <span class="string">"kazu69"</span>,</span><br><span class="line">  "<span class="attr">license</span>": <span class="string">"MIT"</span>,</span><br><span class="line">  "<span class="attr">dependencies</span>": &#123;</span><br><span class="line">    "<span class="attr">express</span>": <span class="string">"^4.13.4"</span>,</span><br><span class="line">    "<span class="attr">react</span>": <span class="string">"^15.0.1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  "<span class="attr">devDependencies</span>": &#123;</span><br><span class="line">    "<span class="attr">babel</span>": <span class="string">"^6.5.2"</span>,</span><br><span class="line">    "<span class="attr">browserify</span>": <span class="string">"^13.0.0"</span>,</span><br><span class="line">    "<span class="attr">eslint</span>": <span class="string">"^2.8.0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Alpine_Linux_u3092_u5229_u7528_u3059_u308B"><a href="#Alpine_Linux_u3092_u5229_u7528_u3059_u308B" class="headerlink" title="Alpine Linuxを利用する"></a>Alpine Linuxを利用する</h2><p>そもそものDcokerイメージを最小にしておくこと。<br><a href="https://hub.docker.com/_/alpine/" target="_blank" rel="external">Alpine Linux</a>でイメージを作成する。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># application.dockerfile</span><br><span class="line">FROM alpine</span><br><span class="line">RUN apk add --update nodejs bash</span><br><span class="line"></span><br><span class="line">WORKDIR /var/</span><br><span class="line">ADD ./package.json .</span><br></pre></td></tr></table></figure>
<p>この状態で計測する。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">time npm i</span><br><span class="line"></span><br><span class="line">real    0m29.258s</span><br><span class="line">user    0m0.000s</span><br><span class="line">sys 0m0.000s</span><br></pre></td></tr></table></figure>
<h2 id="Install_Progress_u3092_u7121_u52B9_u5316_u3059_u308B"><a href="#Install_Progress_u3092_u7121_u52B9_u5316_u3059_u308B" class="headerlink" title="Install Progressを無効化する"></a>Install Progressを無効化する</h2><p>npm install時に<a href="https://github.com/npm/npm/issues/11283" target="_blank" rel="external">Progress Barを出すと遅くなる</a>ので、非表示にする。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">time npm i --production --no-progress</span><br><span class="line"></span><br><span class="line">real    0m28.150s</span><br><span class="line">user    0m0.010s</span><br><span class="line">sys 0m0.000s</span><br></pre></td></tr></table></figure>
<h2 id="SSL_u3092_u5229_u7528_u3057_u306A_u3044"><a href="#SSL_u3092_u5229_u7528_u3057_u306A_u3044" class="headerlink" title="SSLを利用しない"></a>SSLを利用しない</h2><p>もし可能ならばSSLを使わない、proxyをつかってhttpのregistryを使う。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">time npm i --no-progress --registry http://registry.npmjs.org/</span><br><span class="line"></span><br><span class="line">real    0m26.405s</span><br><span class="line">user    0m0.000s</span><br><span class="line">sys 0m0.000s</span><br></pre></td></tr></table></figure>
<h2 id="Cache_Container__u3092_u4F7F_u3046"><a href="#Cache_Container__u3092_u4F7F_u3046" class="headerlink" title="Cache Container を使う"></a>Cache Container を使う</h2><p>キャッシュコンテナを利用するために、簡単なpackageをキャッシュするだけなコンテナを作成。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># cache.dockerfile</span><br><span class="line">FROM alpine</span><br><span class="line">RUN apk add --update nodejs bash</span><br><span class="line"></span><br><span class="line">WORKDIR /var/</span><br><span class="line">ADD ./package.json .</span><br><span class="line">RUN npm i</span><br><span class="line">VOLUME /var/node_modules</span><br></pre></td></tr></table></figure>
<p>このコンテナのnode_modulesディレクトリをマウントする。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker build -t cache <span class="_">-f</span> cache.dockerfile .</span><br><span class="line">docker run <span class="_">-d</span> --name cache_volume -it cache:latest /bin/bash</span><br><span class="line"></span><br><span class="line">docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">621b7fe67bc8        cache:latest        <span class="string">"/bin/bash"</span>         3 seconds ago       Up 2 seconds                            cache_volume</span><br><span class="line"></span><br><span class="line">docker run --volumes-from cache_volume -it ci:latest /bin/bash</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">time npm i</span><br><span class="line"></span><br><span class="line">real    0m2.270s</span><br><span class="line">user    0m0.000s</span><br><span class="line">sys 0m0.000s</span><br></pre></td></tr></table></figure>
<p>CIなどでDockerを使っている場合はcacheコンテナをサポートしていると思うので、<br>cacheコンテナを利用すると圧倒的に改善できそう。</p>
<p>毎回キャッシュコンテナにinstallしてるのつらいので、package.jsonに変更ある場合のみキャッシュコンテナをupdateする必要がある。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git diff --name-only master $(git rev-parse --abbrev-ref HEAD) | grep -q package.json</span><br><span class="line"><span class="built_in">test</span> $? <span class="_">-eq</span> 0 &amp;&amp; \</span><br><span class="line">docker <span class="built_in">exec</span> -t cache npm i --no-progress --registry http://registry.npmjs.org/</span><br></pre></td></tr></table></figure>
<h3 id="u305D_u306E_u307B_u304B"><a href="#u305D_u306E_u307B_u304B" class="headerlink" title="そのほか"></a>そのほか</h3><p>一度キャッシュしてしまえば、以下のように<br><strong>cache-min</strong> オプションに十分に大きな値を渡す。<br>cache-minはキャッシュを再チェックするまでの最小時間となるので、これによりキャッシュからインストールするようにできる。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --cache-min 999999</span><br></pre></td></tr></table></figure>
<p>また、devDependenciesが不要ならば<strong>production</strong>オプションを追加して</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --production</span><br></pre></td></tr></table></figure>
<p>でdependenciesのみインストールすると良さそう。</p>
<h2 id="u53C2_u8003_u306B_u3057_u305F_u30DA_u30FC_u30B8"><a href="#u53C2_u8003_u306B_u3057_u305F_u30DA_u30FC_u30B8" class="headerlink" title="参考にしたページ"></a>参考にしたページ</h2><p><a href="https://github.com/npm/npm/issues/8581" target="_blank" rel="external">cache-min &amp; unknown version</a><br><a href="https://github.com/npm/npm/issues/2568" target="_blank" rel="external">feature request: force install from cache.</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>開発やCIでやDockerイメージをbuildする際にnpm installすると、cacheがないため時間がかかる。<br>これはpackageの数が多くなると結構辛いことになるので、なんとかできないかと試してみた。</p>]]>
    
    </summary>
    
      <category term="tec" scheme="http://blog.kazu69.net/categories/tec/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PHPアプリケーションでのReact.jsのサーバーレンダリング考える]]></title>
    <link href="http://blog.kazu69.net/2016/04/17/rendering_reactjs_template_server_side_in_php_application/"/>
    <id>http://blog.kazu69.net/2016/04/17/rendering_reactjs_template_server_side_in_php_application/</id>
    <published>2016-04-17T09:08:21.000Z</published>
    <updated>2016-04-26T04:59:50.000Z</updated>
    <content type="html"><![CDATA[<p>PHPでReact.jsなアプリケーションを導入する時に眺めてみた時のメモ。</p>
<a id="more"></a>
<p>まず、ブラウザからのリクエストに対して、サーバー側でDOMをレンダリングする必要がある。<br>これは、ブラウザでDOMレンダリングする場合は、サーチエンジンのアクセスに対して、<br>空の要素を返してしまう。<br>そのため、その結果がインデックスされるとSEO的によろしくないからである。</p>
<p>そこで、どこでReact.jsを実行してDOMを生成するのかを考える必要がある。</p>
<ul>
<li>PHPでJSを実行する</li>
<li>React.jsをレンダリングする小さなアプリケーションに処理を委譲する</li>
</ul>
<p>の2つのパターンを考えられる。</p>
<p>例として簡単なView Classのテンプレートをレンダリングする。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.countUp = <span class="keyword">this</span>.countUp.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.countDown = <span class="keyword">this</span>.countDown.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      count: <span class="keyword">this</span>.props.count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">   static defaultProps = &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  static propTypes = &#123;</span><br><span class="line">    count: React.PropTypes.number.isRequired</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  countUp(event) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;count: <span class="keyword">this</span>.state.count + <span class="number">1</span>&#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  countDown(event) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;count: <span class="keyword">this</span>.state.count - <span class="number">1</span>&#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">'counter'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">'count'</span>&gt;</span></span><br><span class="line">          &#123;this.state.count&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.countUp.bind(this)&#125;</span>&gt;</span> count up <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.countDown.bind(this)&#125;</span>&gt;</span> count down <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    )</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="PHP_u3067JS_u3092_u5B9F_u884C_u3059_u308B"><a href="#PHP_u3067JS_u3092_u5B9F_u884C_u3059_u308B" class="headerlink" title="PHPでJSを実行する"></a>PHPでJSを実行する</h3><p>PHPに<a href="http://php.net/manual/ja/book.v8js.php" target="_blank" rel="external">V8jsモジュール</a>を追加することで、<br>jsをコンパイルして実行できるようになる。<br>(require: PHP &gt;= 5.3.3)</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install v8js</span></span><br><span class="line">pecl install v8js-0.1.3 \</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"extension=v8js.so"</span> &gt;&gt; /etc/php5/cli/php.ini</span><br><span class="line"></span><br><span class="line"><span class="comment"># install composer</span></span><br><span class="line">curl <span class="_">-s</span>S https://getcomposer.org/installer | php -- --install-dir=/usr/<span class="built_in">local</span>/bin --filename=composer</span><br><span class="line"></span><br><span class="line"><span class="comment"># オプションを追加してconfigure</span></span><br><span class="line">./configure --with-freetype-dir=/usr/include/ \</span><br><span class="line">            --with-jpeg-dir=/usr/include/ \</span><br><span class="line">            --with-gd \</span><br><span class="line">            --with-mcrypt \</span><br><span class="line">            --with-libzip \</span><br><span class="line">            --with-bz2 \</span><br><span class="line">            --enable-mbstring \</span><br><span class="line">            --enable-v8js</span><br></pre></td></tr></table></figure>
<p>通常ブラウザ向けにReact.jsを提供するのと同じように、<br><a href="http://browserify.org/" target="_blank" rel="external">Browserify</a>を使いbundleし、v8jsでphpを実行する。</p>
<p>最終的に<strong>renderToString</strong>でreactIdを割り振られたDOMを出力する。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require_once</span> dirname(<span class="keyword">__FILE__</span>) . <span class="string">'/../vendor/autoload.php'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_markup</span><span class="params">($component, $prop)</span> </span>&#123;</span><br><span class="line">  $default_prop = json_encode($prop);</span><br><span class="line">  $v8 = <span class="keyword">new</span> V8Js();</span><br><span class="line">  $js[] = <span class="string">"var global = global || this, self = self || this, window = window || this;"</span>;</span><br><span class="line">  $js[] = file_get_contents(<span class="string">'js/bundle.min.js'</span>, <span class="keyword">true</span>);</span><br><span class="line">  $js[] = <span class="string">"print(ReactDomServer.renderToString(React.createElement($&#123;component&#125;, $&#123;default_prop&#125;)));"</span>;</span><br><span class="line">  $code = implode(<span class="string">";\n"</span>, $js);</span><br><span class="line">  ob_start();</span><br><span class="line">  $v8-&gt;executeString($code);</span><br><span class="line">  <span class="keyword">return</span> ob_get_clean();</span><br><span class="line">&#125;</span><br><span class="line">$component = <span class="string">'Counter'</span>;</span><br><span class="line">$prop = [<span class="string">'count'</span> =&gt; <span class="number">3</span>];</span><br><span class="line">$markup = get_markup($component, $prop);</span><br></pre></td></tr></table></figure>
<p>Facebookの<a href="https://github.com/reactjs/react-php-v8js" target="_blank" rel="external">react-php-v8js</a>をそのままに処理を書いた。</p>
<p>PHPにモジュールを追加できるのであれば、PHP側でtemplateを返すほうが容易である。<br>とくにreact-php-v8jsなどを使うことで簡単に実装はできそう。</p>
<h3 id="u30C6_u30F3_u30D7_u30EC_u30FC_u30C8_u51E6_u7406_u3092_u30EC_u30F3_u30C0_u30EA_u30F3_u30B0_u30A2_u30D7_u30EA_u30B1_u30FC_u30B7_u30E7_u30F3_u306B_u59D4_u8B72_u3059_u308B"><a href="#u30C6_u30F3_u30D7_u30EC_u30FC_u30C8_u51E6_u7406_u3092_u30EC_u30F3_u30C0_u30EA_u30F3_u30B0_u30A2_u30D7_u30EA_u30B1_u30FC_u30B7_u30E7_u30F3_u306B_u59D4_u8B72_u3059_u308B" class="headerlink" title="テンプレート処理をレンダリングアプリケーションに委譲する"></a>テンプレート処理をレンダリングアプリケーションに委譲する</h3><p>稼動中でPHPアプリケーションに対して手を入れることができない場合などは、<br>このパターンを採用することが考えられる。<br>実際にReact.jsを実行するのはnodejsで書かれたサーバーになる。</p>
<p>PHPアプリケーションからはHTTPリクエストを送信するだけとなる。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$context = stream_context_create(</span><br><span class="line">    <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'http'</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'method'</span>=&gt; <span class="string">'POST'</span>,</span><br><span class="line">            <span class="string">'header'</span>=&gt; <span class="string">'Content-type: application/json; charset=UTF-8'</span>,</span><br><span class="line">            <span class="string">'content'</span> =&gt; json_encode(</span><br><span class="line">                <span class="keyword">array</span>(</span><br><span class="line">                    <span class="string">'count'</span> =&gt; <span class="number">4</span></span><br><span class="line">                )</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">);</span><br><span class="line">$output = file_get_contents($url, <span class="keyword">false</span>, $context);</span><br></pre></td></tr></table></figure>
<p>という感じでPHPからPOSTされたdataに対して、<br>たとえば<a href="http://expressjs.com/" target="_blank" rel="external">express</a>でざっくりサーバーを書く。</p>
<p>こちらも最終的に<strong>renderToString</strong>でreactIdを割り振られたDOMを出力する。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">'express'</span>;</span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">'path'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOMServer <span class="keyword">from</span> <span class="string">'react-dom/server'</span>;</span><br><span class="line"><span class="keyword">import</span> bodyParser <span class="keyword">from</span> <span class="string">'body-parser'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">'/'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> view = path.resolve(<span class="string">'./views/'</span> + req.query.component);</span><br><span class="line">    <span class="keyword">const</span> Component = <span class="built_in">require</span>(view).default;</span><br><span class="line">    <span class="keyword">const</span> props = req.body || <span class="literal">null</span>;</span><br><span class="line">    res.status(<span class="number">200</span>).send(</span><br><span class="line">      ReactDOMServer.renderToString(</span><br><span class="line">        React.createElement(Component, props)</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">     res.status(<span class="number">500</span>).send(error.message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'App listening on port 3000!'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>こうすることでテンプレートを処理をして、htmlを返すことだけに注力できる。<br>nodejsサーバーからのレスポンスをPHPのレスポンスとして出力してあげると良い。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl http://APPLICATION_IP/template_nodejs.php</span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;&lt;div class=<span class="string">"counter"</span> data-reactroot=<span class="string">""</span> data-reactid=<span class="string">"1"</span> data-react-checksum=<span class="string">"685065078"</span>&gt;&lt;span class=<span class="string">"count"</span> data-reactid=<span class="string">"2"</span>&gt;4&lt;/span&gt;&lt;button data-reactid=<span class="string">"3"</span>&gt; count up &lt;/button&gt;&lt;button data-reactid=<span class="string">"4"</span>&gt; count down &lt;/button&gt;&lt;/div&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>仮にnodejsサーバーとPHPアプリケーションでのConnectionエラーなどがあった場合でも、<br>ブラウザレンダリング機構を用いれば、コンテンツが表示されないという致命的な問題は回避できる。</p>
<p>nodejsサーバーを採用した場合は、サーバーは常にステートレス(状態を保持しない)なので、<br>スケールアウトしやすく、またアプリケーションのテストも容易になる。</p>
<h3 id="u305D_u306E_u307B_u304B"><a href="#u305D_u306E_u307B_u304B" class="headerlink" title="そのほか"></a>そのほか</h3><p>どちらの方法採用しても、サーバーでレンダリングされたDOMに対して、<br>ブラウザ側でイベントをbindする必要がある。<br>この場合、すでにDOMがレンダリングされているので、React.jsはDOMを再描画する必要はない。</p>
<p>サーバーレンダリングを行うことで、ブラウザ側での描画を避けることができため、<br>サーバーからドキュメントがダウンロードされるとコンテンツが表示される。<br>つまり描画までの時間を短縮できる。</p>
<hr>
<p><a href="https://github.com/kazu69/render-reactjs-with-php-example/" target="_blank" rel="external">今回試したサンプル</a></p>
<h3 id="u53C2_u8003_u306B_u3057_u305F_u30DA_u30FC_u30B8"><a href="#u53C2_u8003_u306B_u3057_u305F_u30DA_u30FC_u30B8" class="headerlink" title="参考にしたページ"></a>参考にしたページ</h3><p><a href="http://php.net/manual/ja/book.v8js.php" target="_blank" rel="external">v8js</a><br><a href="https://github.com/reactjs/react-php-v8js" target="_blank" rel="external">react-php-v8js</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>PHPでReact.jsなアプリケーションを導入する時に眺めてみた時のメモ。</p>]]>
    
    </summary>
    
      <category term="tec" scheme="http://blog.kazu69.net/categories/tec/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[resouce hintsとpreloadを使ってリソースの取得を最適化する]]></title>
    <link href="http://blog.kazu69.net/2016/03/19/optimize_resources_using_resoucehint_and_preload/"/>
    <id>http://blog.kazu69.net/2016/03/19/optimize_resources_using_resoucehint_and_preload/</id>
    <published>2016-03-19T07:56:14.000Z</published>
    <updated>2016-03-21T12:19:16.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://www.w3.org/TR/resource-hints/" target="_blank" rel="external">Resource Hints</a>と<a href="https://www.w3.org/TR/preload/" target="_blank" rel="external">Preload</a>を使うことでリソースの取得を最適化できるようなので試してみた。</p>
<a id="more"></a>
<p>もともとはHTTP2にしてServer Pushを使うことで、予めリソースをサーバー側から送ることができるが、<br>ブラウザのキャッシュのメリットを活用できないんじゃないかということが気になっていた。<br>また、単純にHTTP2対応してもウェブページにはcrossoriginなリソースを多く利用しているので、<br>そのパフォーマンスの問題は解決しないのではないかという疑問があった。</p>
<p>それらを解決する手段としてResource Hintsなどを使ったPrebrowsingの技術が活用できそう。</p>
<p>preloadに関しては<a href="https://www.smashingmagazine.com/2016/02/preload-what-is-it-good-for/" target="_blank" rel="external">Preload: What Is It Good For?</a>がまとまっているので参考にした。</p>
<h2 id="Resource_Hints__u306B_u3064_u3044_u3066"><a href="#Resource_Hints__u306B_u3064_u3044_u3066" class="headerlink" title="Resource Hints について"></a>Resource Hints について</h2><p>Resource Hints はlink要素に <strong>dns-prefetch</strong>、<strong>preconnect</strong>、<strong>prefetch</strong>、<strong>prerender</strong>のいずれかを指定することで、取得するリソースに対してバックグラウンドで事前に処理をすることで、遷移後のページのパフォーマンス向上に寄与できる。<br>次に遷移するページで必要なリーソースをバックグランドで取得し、遷移後にページが表示されるまでの時間を短縮することができる。<br>Browserプロセスの裏側でRenderプロセスがPrebrowsing処理する感じ。</p>
<p>例えば</p>
<ul>
<li>ログイン前にPrebrowsingして、ログイン後のページの表示パフォーマンスを向上させる</li>
<li>商品購入前にPrebrowsingして、商品詳細ページの表示パフォーマンスを向上させる</li>
<li>ユーザー登録フォームの前にPrebrowsingして、登録フォームの表示パフォーマンスを向上させる</li>
</ul>
<p>など、多くのウェブアプリケーションでありそうなもので活用できる。</p>
<h3 id="u8A66_u3057_u3066_u307F_u308B"><a href="#u8A66_u3057_u3066_u307F_u308B" class="headerlink" title="試してみる"></a>試してみる</h3><p>以下のようなファイルに対してHTTP2をつかってResource Hintsを試してみる。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">class</span>=<span class="string">"no-js"</span> <span class="attr">lang</span>=<span class="string">"ja"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"x-ua-compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Sample<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon"</span> <span class="attr">href</span>=<span class="string">"apple-touch-icon.png"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- normalize --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"//cdnjs.cloudflare.com/ajax/libs/normalize/3.0.3/normalize.css"</span> <span class="attr">integrity</span>=<span class="string">"sha384-+K7c3ujxU/SqpJg+sVdgOemJ3tcpzSGHWv3+1TgPb20j3DmE2srNJo5kVStOVq4k"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- bootstrap --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"//maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css"</span> <span class="attr">integrity</span>=<span class="string">"sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"//maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap-theme.min.css"</span> <span class="attr">integrity</span>=<span class="string">"sha384-fLW2N01lMqjakBkx3l/M9EahuwpSfeNvV63J5ezn3uZzapT0u7EYsXMjQV+0En5r"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- font awasome --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"//maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"//fortawesome.github.io/Font-Awesome/assets/font-awesome/fonts/fontawesome-webfont.woff2"</span> <span class="attr">as</span>=<span class="string">"font"</span> <span class="attr">type</span>=<span class="string">"font/woff2"</span> <span class="attr">crossorigin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/main.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--[if lt IE 8]&gt;</span><br><span class="line">            &lt;p class="browserupgrade"&gt;You are using an &lt;strong&gt;outdated&lt;/strong&gt; browser. Please &lt;a href="http://browsehappy.com/"&gt;upgrade your browser&lt;/a&gt; to improve your experience.&lt;/p&gt;</span><br><span class="line">        &lt;![endif]--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Add your site or application content here --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello world! This is HTML5 Boilerplate.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- bootstrap --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"</span> <span class="attr">integrity</span>=<span class="string">"sha384-0mSbJDEHialfmuBBQP6A4Qrprq5OVfW37PRR3j5ELqxss1yVqOtnepnHVP9aJ7xS"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- modernizr --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//ajax.aspnetcdn.com/ajax/modernizr/modernizr-2.8.3.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- jQuery --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//code.jquery.com/jquery-1.12.1.js"</span> <span class="attr">integrity</span>=<span class="string">"sha256-VuhDpmsr9xiKwvTIHfYWCIQ84US9WqZsLfR4P7qF6O8="</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/plugins.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Google Analytics: change UA-XXXXX-Y to be your site's ID. --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//www.google-analytics.com/analytics.js"</span> <span class="attr">async</span> <span class="attr">defer</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>このファイルへのアクセスをChrome Dev ToolのNetwork panelで見てみる</p>
<p><img src="/images/2016/03/19/default.png" alt=""></p>
<p>このような感じ。</p>
<h3 id="dns-prefetch"><a href="#dns-prefetch" class="headerlink" title="dns-prefetch"></a>dns-prefetch</h3><p>DNSによる名前解決をできるだけ早くおこなうことで、ページ読込み時にかかる名前解決によるコストを下げる。<br><a href="http://caniuse.com/#search=dns-prefetch" target="_blank" rel="external">多くのブラウザですでにサポートされている</a>。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//example.com"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>amazon.comでは以下のように活用されている模様。<br><strong>x-dns-prefetch-control</strong> でDNS Prefetch機能をユーザーの意志とは関係なく実装できる。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- from amazon.com --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"x-dns-prefetch-control"</span> <span class="attr">content</span>=<span class="string">"on"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//g-ec2.images-amazon.com"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//ecx.images-amazon.com"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//z-ecx.images-amazon.com"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//z-ak.images-amazon.com"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//completion.amazon.com"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//fls-fe.amazon.co.jp"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//d1y6jrbzotnyjg.cloudfront.net"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>実際に次のようなページを作成して試してみた。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"ja"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"x-dns-prefetch-control"</span> <span class="attr">content</span>=<span class="string">"on"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>DNS-Prefetch<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//:cdnjs.cloudflare.com"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//:maxcdn.bootstrapcdn.com"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//:ajax.aspnetcdn.com"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//:code.jquery.com"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//:www.google-analytics.com/"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"main.html"</span>&gt;</span>main page<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/2016/03/19/dns-prefetch.png" alt=""></p>
<p>CDNを使っているので名前解決にそこまで時間がかかっていないが、それでも名前解決の時間が短縮されている。</p>
<h3 id="preconnect"><a href="#preconnect" class="headerlink" title="preconnect"></a>preconnect</h3><p>DNSルックアップ、TCPハンドシェイク、TLSネゴシエーションまでを事前に処理することができる。<br>schemeはhttp, httpsのみが許可されていて、crossorigin属性が定義されている。<br>ちなみに2016/03 現在では<a href="http://caniuse.com/#search=preconnect" target="_blank" rel="external">ChromeとFirefoxではサポート</a>されている様子。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preconnect"</span> <span class="attr">href</span>=<span class="string">"//example.com"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preconnect"</span> <span class="attr">href</span>=<span class="string">"//cdn.example.com"</span> <span class="attr">crossorigin</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>また、Resource Hintはlinkタグを挿入したらいいということでJavaScriptを使えば簡単に動的に追加もできる。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">preconnect</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> hint = <span class="built_in">document</span>.createElement(<span class="string">'link'</span>);</span><br><span class="line">    hint.rel = <span class="string">'preconnect'</span>;</span><br><span class="line">    hint.href = url;</span><br><span class="line">    <span class="built_in">document</span>.head.appendChild(hint);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>実際に遷移前のページとして以下のようなものを使う</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"ja"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Preconnect<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preconnect"</span> <span class="attr">href</span>=<span class="string">"//cdnjs.cloudflare.com/ajax/libs/normalize/3.0.3/normalize.css"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preconnect"</span> <span class="attr">href</span>=<span class="string">"//maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preconnect"</span> <span class="attr">href</span>=<span class="string">"//maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap-theme.min.css"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preconnect"</span> <span class="attr">href</span>=<span class="string">"//maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preconnect"</span> <span class="attr">href</span>=<span class="string">"//maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preconnect"</span> <span class="attr">href</span>=<span class="string">"//ajax.aspnetcdn.com/ajax/modernizr/modernizr-2.8.3.js"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preconnect"</span> <span class="attr">href</span>=<span class="string">"//code.jquery.com/jquery-1.12.1.js"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preconnect"</span> <span class="attr">href</span>=<span class="string">"//www.google-analytics.com/analytics.js"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"main.html"</span>&gt;</span>main page<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Chromeで chrome://net-internals/#dns を見てみると</p>
<table>
<thead>
<tr>
<th>Hostname</th>
<th>Family</th>
<th>Addresses</th>
<th>Expires</th>
</tr>
</thead>
<tbody>
<tr>
<td>ajax.aspnetcdn.com</td>
<td>IPV4</td>
<td>68.232.45.201</td>
<td>2016-03-09 15:05:55.444 [Expired]</td>
</tr>
<tr>
<td>cdnjs.cloudflare.com</td>
<td>IPV4</td>
<td>198.41.215.66<br>198.41.215.67<br>198.41.214.67<br>198.41.214.68<br>198.41.215.68</td>
<td>2016-03-09 15:05:55.443 [Expired]</td>
</tr>
<tr>
<td>code.jquery.com</td>
<td>IPV4</td>
<td>94.46.159.11</td>
<td>2016-03-09 15:05:55.444 [Expired]</td>
</tr>
<tr>
<td>maxcdn.bootstrapcdn.com</td>
<td>IPV4</td>
<td>94.31.29.154</td>
<td>2016-03-09 15:05:55.442 [Expired]</td>
</tr>
<tr>
<td>www.google-analytics.com</td>
<td>IPV4</td>
<td>216.58.197.206</td>
<td>2016-03-09 15:05:55.474 [Expired]</td>
</tr>
</tbody>
</table>
<p>Chromeで chrome://net-internals/#events でも確認</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Source</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>534655</td>
<td>CONNECT_JOB</td>
<td>pm/ssl/cdnjs.cloudflare.com:443</td>
</tr>
<tr>
<td>534656</td>
<td>CONNECT_JOB</td>
<td>pm/ssl/cdnjs.cloudflare.com:443</td>
</tr>
<tr>
<td>534657</td>
<td>HOST_RESOLVER_IMPL_JOB</td>
<td>cdnjs.cloudflare.com</td>
</tr>
<tr>
<td>534658</td>
<td>HTTP_STREAM_JOB</td>
<td><a href="https://maxcdn.bootstrapcdn.com/" target="_blank" rel="external">https://maxcdn.bootstrapcdn.com/</a></td>
</tr>
<tr>
<td>534659</td>
<td>CONNECT_JOB</td>
<td>pm/ssl/maxcdn.bootstrapcdn.com:443</td>
</tr>
<tr>
<td>534660</td>
<td>CONNECT_JOB</td>
<td>pm/ssl/maxcdn.bootstrapcdn.com:443</td>
</tr>
<tr>
<td>534661</td>
<td>HOST_RESOLVER_IMPL_JOB</td>
<td>maxcdn.bootstrapcdn.com</td>
</tr>
<tr>
<td>534662</td>
<td>HTTP_STREAM_JOB</td>
<td><a href="https://maxcdn.bootstrapcdn.com/" target="_blank" rel="external">https://maxcdn.bootstrapcdn.com/</a></td>
</tr>
<tr>
<td>534663</td>
<td>HTTP_STREAM_JOB</td>
<td><a href="https://maxcdn.bootstrapcdn.com/" target="_blank" rel="external">https://maxcdn.bootstrapcdn.com/</a></td>
</tr>
<tr>
<td>534664</td>
<td>HTTP_STREAM_JOB</td>
<td><a href="https://maxcdn.bootstrapcdn.com/" target="_blank" rel="external">https://maxcdn.bootstrapcdn.com/</a></td>
</tr>
<tr>
<td>534665</td>
<td>HTTP_STREAM_JOB</td>
<td><a href="https://ajax.aspnetcdn.com/" target="_blank" rel="external">https://ajax.aspnetcdn.com/</a></td>
</tr>
<tr>
<td>534666</td>
<td>CONNECT_JOB</td>
<td>pm/ssl/ajax.aspnetcdn.com:443</td>
</tr>
<tr>
<td>534667</td>
<td>CONNECT_JOB</td>
<td>pm/ssl/ajax.aspnetcdn.com:443</td>
</tr>
<tr>
<td>534668</td>
<td>HOST_RESOLVER_IMPL_JOB</td>
<td>ajax.aspnetcdn.com</td>
</tr>
<tr>
<td>534669</td>
<td>HTTP_STREAM_JOB</td>
<td><a href="https://code.jquery.com/" target="_blank" rel="external">https://code.jquery.com/</a></td>
</tr>
<tr>
<td>534670</td>
<td>CONNECT_JOB</td>
<td>pm/ssl/code.jquery.com:443</td>
</tr>
<tr>
<td>534671</td>
<td>CONNECT_JOB</td>
<td>pm/ssl/code.jquery.com:443</td>
</tr>
<tr>
<td>534672</td>
<td>HOST_RESOLVER_IMPL_JOB</td>
<td>code.jquery.com</td>
</tr>
<tr>
<td>534673</td>
<td>HTTP_STREAM_JOB</td>
<td><a href="https://www.google-analytics.com/" target="_blank" rel="external">https://www.google-analytics.com/</a></td>
</tr>
<tr>
<td>534674</td>
<td>CONNECT_JOB</td>
<td>pm/ssl/www.google-analytics.com:443</td>
</tr>
<tr>
<td>534675</td>
<td>CONNECT_JOB</td>
<td>pm/ssl/www.google-analytics.com:443</td>
</tr>
<tr>
<td>534676</td>
<td>HOST_RESOLVER_IMPL_JOB</td>
<td>www.google-analytics.com</td>
</tr>
<tr>
<td>534677</td>
<td>SOCKET</td>
<td>pm/ssl/ajax.aspnetcdn.com:443</td>
</tr>
<tr>
<td>534678</td>
<td>SOCKET</td>
<td>pm/ssl/cdnjs.cloudflare.com:443</td>
</tr>
<tr>
<td>534679</td>
<td>SOCKET</td>
<td>pm/ssl/maxcdn.bootstrapcdn.com:443</td>
</tr>
<tr>
<td>534680</td>
<td>SOCKET</td>
<td>pm/ssl/code.jquery.com:443</td>
</tr>
<tr>
<td>534681</td>
<td>SOCKET</td>
<td>pm/ssl/www.google-analytics.com:443</td>
</tr>
</tbody>
</table>
<p>確かに事前にリクエストしていることがわかる。<br>アクセスしてみる。Google dev toolのNetwork pannelから</p>
<p><img src="/images/2016/03/19/preconnect.png" alt=""></p>
<p>すでにconnectしているまでは完了しており、ダウンロードするだけとなり早い。</p>
<h3 id="prefetch"><a href="#prefetch" class="headerlink" title="prefetch"></a>prefetch</h3><p>ページを予めダウンロードまでおこない、キャッシュに格納する。<br>リソースのサイズが大きい場合やネットワークが遅い場合などはブラウザはprefetchを行わない。<br>またas属性でリソースを適切なコンテキストを指定でき、これによりブラウザは最適なfetchプロセスでresourceを取得する。</p>
<p>prefetchは<a href="http://caniuse.com/#search=prefetch" target="_blank" rel="external">最近のブラウザではだいたいサポート</a>されてる。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"prefetch"</span> <span class="attr">href</span>=<span class="string">"//example.com/next-page.html"</span> <span class="attr">as</span>=<span class="string">"html"</span> <span class="attr">crossorigin</span>=<span class="string">"use-credentials"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"prefetch"</span> <span class="attr">href</span>=<span class="string">"/library.js"</span> <span class="attr">as</span>=<span class="string">"script"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>こちらもChromeで chrome://net-internals/#events を見てみると</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Source</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>538454</td>
<td>URL_REQUEST</td>
<td><a href="https://cdnjs.cloudflare.com/ajax/libs/normalize/3.0.3/normalize.css" target="_blank" rel="external">https://cdnjs.cloudflare.com/ajax/libs/normalize/3.0.3/normalize.css</a></td>
</tr>
<tr>
<td>538456</td>
<td>URL_REQUEST</td>
<td><a href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" target="_blank" rel="external">https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css</a></td>
</tr>
<tr>
<td>538458</td>
<td>URL_REQUEST</td>
<td><a href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap-theme.min.css" target="_blank" rel="external">https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap-theme.min.css</a></td>
</tr>
<tr>
<td>538460</td>
<td>URL_REQUEST</td>
<td><a href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css" target="_blank" rel="external">https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css</a></td>
</tr>
<tr>
<td>538462</td>
<td>URL_REQUEST</td>
<td><a href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js" target="_blank" rel="external">https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js</a></td>
</tr>
<tr>
<td>538464</td>
<td>URL_REQUEST</td>
<td><a href="https://ajax.aspnetcdn.com/ajax/modernizr/modernizr-2.8.3.js" target="_blank" rel="external">https://ajax.aspnetcdn.com/ajax/modernizr/modernizr-2.8.3.js</a></td>
</tr>
<tr>
<td>538466</td>
<td>URL_REQUEST</td>
<td><a href="https://code.jquery.com/jquery-1.12.1.js" target="_blank" rel="external">https://code.jquery.com/jquery-1.12.1.js</a></td>
</tr>
<tr>
<td>538468</td>
<td>URL_REQUEST</td>
<td><a href="https://www.google-analytics.com/analytics.js" target="_blank" rel="external">https://www.google-analytics.com/analytics.js</a></td>
</tr>
<tr>
<td>538470</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://cdnjs.cloudflare.com/ajax/libs/normalize/3.0.3/normalize.css" target="_blank" rel="external">https://cdnjs.cloudflare.com/ajax/libs/normalize/3.0.3/normalize.css</a></td>
</tr>
<tr>
<td>538471</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" target="_blank" rel="external">https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css</a></td>
</tr>
<tr>
<td>538472</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap-theme.min.css" target="_blank" rel="external">https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap-theme.min.css</a></td>
</tr>
<tr>
<td>538473</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css" target="_blank" rel="external">https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css</a></td>
</tr>
<tr>
<td>538474</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js" target="_blank" rel="external">https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js</a></td>
</tr>
<tr>
<td>538475</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://ajax.aspnetcdn.com/ajax/modernizr/modernizr-2.8.3.js" target="_blank" rel="external">https://ajax.aspnetcdn.com/ajax/modernizr/modernizr-2.8.3.js</a></td>
</tr>
<tr>
<td>538476</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://code.jquery.com/jquery-1.12.1.js" target="_blank" rel="external">https://code.jquery.com/jquery-1.12.1.js</a></td>
</tr>
<tr>
<td>538477</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://www.google-analytics.com/analytics.js" target="_blank" rel="external">https://www.google-analytics.com/analytics.js</a></td>
</tr>
</tbody>
</table>
<p>リクエストからcacheまで行われている。</p>
<p>Chrome dev toolのNetwork pannelでもリクエストしていることが見てわかる。</p>
<p><img src="/images/2016/03/19/prefetch1.png" alt=""></p>
<p>実際にcssを読込んでいるページに遷移してみると、cacheしているので早い。</p>
<p><img src="/images/2016/03/19/prefetch2.png" alt=""></p>
<h3 id="prerender"><a href="#prerender" class="headerlink" title="prerender"></a>prerender</h3><p>事前にバックグランドで指定リンク先のリソースをダウンロードし、DOM構築、JavaScriptの実行、CSS適用、レイアウトまで行う。<br>Render Processですでにページを構築している感じなるっぽい。(見えないタブでページを描画してしまってる感じ)<br>よって、遷移後はタブが切り替わるのように、ページがすぐに表示されるようになる。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"prerender"</span> <span class="attr">href</span>=<span class="string">"//example.com/next-page.html"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>サポートは2016/03 現在<a href="http://caniuse.com/#feat=link-rel-prerender" target="_blank" rel="external">ChromeとEdge、Operaがサポート</a>している。</p>
<p>こちらも同じ感じのhtmlを準備して試してみる。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"ja"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Prerender<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"prerender"</span> <span class="attr">href</span>=<span class="string">"main.html"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"main.html"</span>&gt;</span>main page<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>こちらは遷移先のページ(prerender.htmlとした)を指定して、試してみる。<br>Chromeで chrome://net-internals/#events を見てみると</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Source</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>561062</td>
<td>URL_REQUEST</td>
<td><a href="https://192.168.99.100:8443/main.html" target="_blank" rel="external">https://192.168.99.100:8443/main.html</a></td>
</tr>
<tr>
<td>561064</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://192.168.99.100:8443/main.html" target="_blank" rel="external">https://192.168.99.100:8443/main.html</a></td>
</tr>
<tr>
<td>561065</td>
<td>HTTP_STREAM_JOB</td>
<td><a href="https://192.168.99.100:8443/" target="_blank" rel="external">https://192.168.99.100:8443/</a></td>
</tr>
<tr>
<td>561066</td>
<td>URL_REQUEST</td>
<td><a href="https://cdnjs.cloudflare.com/ajax/libs/normalize/3.0.3/normalize.css" target="_blank" rel="external">https://cdnjs.cloudflare.com/ajax/libs/normalize/3.0.3/normalize.css</a></td>
</tr>
<tr>
<td>561068</td>
<td>URL_REQUEST</td>
<td><a href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" target="_blank" rel="external">https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css</a></td>
</tr>
<tr>
<td>561070</td>
<td>URL_REQUEST</td>
<td><a href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap-theme.min.css" target="_blank" rel="external">https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap-theme.min.css</a></td>
</tr>
<tr>
<td>561072</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://cdnjs.cloudflare.com/ajax/libs/normalize/3.0.3/normalize.css" target="_blank" rel="external">https://cdnjs.cloudflare.com/ajax/libs/normalize/3.0.3/normalize.css</a></td>
</tr>
<tr>
<td>561073</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" target="_blank" rel="external">https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css</a></td>
</tr>
<tr>
<td>561074</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap-theme.min.css" target="_blank" rel="external">https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap-theme.min.css</a></td>
</tr>
<tr>
<td>561075</td>
<td>URL_REQUEST</td>
<td><a href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css" target="_blank" rel="external">https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css</a></td>
</tr>
<tr>
<td>561077</td>
<td>URL_REQUEST</td>
<td><a href="https://fortawesome.github.io/Font-Awesome/assets/font-awesome/fonts/fontawesome-webfont.woff2" target="_blank" rel="external">https://fortawesome.github.io/Font-Awesome/assets/font-awesome/fonts/fontawesome-webfont.woff2</a></td>
</tr>
<tr>
<td>561079</td>
<td>URL_REQUEST</td>
<td><a href="https://192.168.99.100:8443/css/main.css" target="_blank" rel="external">https://192.168.99.100:8443/css/main.css</a></td>
</tr>
<tr>
<td>561081</td>
<td>URL_REQUEST</td>
<td><a href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js" target="_blank" rel="external">https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js</a></td>
</tr>
<tr>
<td>561083</td>
<td>URL_REQUEST</td>
<td><a href="https://ajax.aspnetcdn.com/ajax/modernizr/modernizr-2.8.3.js" target="_blank" rel="external">https://ajax.aspnetcdn.com/ajax/modernizr/modernizr-2.8.3.js</a></td>
</tr>
<tr>
<td>561085</td>
<td>URL_REQUEST</td>
<td><a href="https://code.jquery.com/jquery-1.12.1.js" target="_blank" rel="external">https://code.jquery.com/jquery-1.12.1.js</a></td>
</tr>
<tr>
<td>561087</td>
<td>URL_REQUEST</td>
<td><a href="https://192.168.99.100:8443/js/plugins.js" target="_blank" rel="external">https://192.168.99.100:8443/js/plugins.js</a></td>
</tr>
<tr>
<td>561089</td>
<td>URL_REQUEST</td>
<td><a href="https://192.168.99.100:8443/js/main.js" target="_blank" rel="external">https://192.168.99.100:8443/js/main.js</a></td>
</tr>
<tr>
<td>561091</td>
<td>URL_REQUEST</td>
<td><a href="https://www.google-analytics.com/analytics.js" target="_blank" rel="external">https://www.google-analytics.com/analytics.js</a></td>
</tr>
<tr>
<td>561093</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css" target="_blank" rel="external">https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css</a></td>
</tr>
<tr>
<td>561094</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://fortawesome.github.io/Font-Awesome/assets/font-awesome/fonts/fontawesome-webfont.woff2" target="_blank" rel="external">https://fortawesome.github.io/Font-Awesome/assets/font-awesome/fonts/fontawesome-webfont.woff2</a></td>
</tr>
<tr>
<td>561095</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js" target="_blank" rel="external">https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js</a></td>
</tr>
<tr>
<td>561096</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://ajax.aspnetcdn.com/ajax/modernizr/modernizr-2.8.3.js" target="_blank" rel="external">https://ajax.aspnetcdn.com/ajax/modernizr/modernizr-2.8.3.js</a></td>
</tr>
<tr>
<td>561097</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://code.jquery.com/jquery-1.12.1.js" target="_blank" rel="external">https://code.jquery.com/jquery-1.12.1.js</a></td>
</tr>
<tr>
<td>561098</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://www.google-analytics.com/analytics.js" target="_blank" rel="external">https://www.google-analytics.com/analytics.js</a></td>
</tr>
<tr>
<td>561099</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://192.168.99.100:8443/css/main.css" target="_blank" rel="external">https://192.168.99.100:8443/css/main.css</a></td>
</tr>
<tr>
<td>561100</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://192.168.99.100:8443/js/plugins.js" target="_blank" rel="external">https://192.168.99.100:8443/js/plugins.js</a></td>
</tr>
<tr>
<td>561101</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://192.168.99.100:8443/js/main.js" target="_blank" rel="external">https://192.168.99.100:8443/js/main.js</a></td>
</tr>
<tr>
<td>561102</td>
<td>HTTP_STREAM_JOB</td>
<td><a href="https://192.168.99.100:8443/" target="_blank" rel="external">https://192.168.99.100:8443/</a></td>
</tr>
<tr>
<td>561103</td>
<td>HTTP_STREAM_JOB</td>
<td><a href="https://192.168.99.100:8443/" target="_blank" rel="external">https://192.168.99.100:8443/</a></td>
</tr>
<tr>
<td>561104</td>
<td>HTTP_STREAM_JOB</td>
<td><a href="https://192.168.99.100:8443/" target="_blank" rel="external">https://192.168.99.100:8443/</a></td>
</tr>
<tr>
<td>561105</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js" target="_blank" rel="external">https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js</a></td>
</tr>
<tr>
<td>561106</td>
<td>URL_REQUEST</td>
<td><a href="https://ajax.aspnetcdn.com/ajax/modernizr/modernizr-2.8.3.js" target="_blank" rel="external">https://ajax.aspnetcdn.com/ajax/modernizr/modernizr-2.8.3.js</a></td>
</tr>
<tr>
<td>561108</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://ajax.aspnetcdn.com/ajax/modernizr/modernizr-2.8.3.js" target="_blank" rel="external">https://ajax.aspnetcdn.com/ajax/modernizr/modernizr-2.8.3.js</a></td>
</tr>
<tr>
<td>561109</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://ajax.aspnetcdn.com/ajax/modernizr/modernizr-2.8.3.js" target="_blank" rel="external">https://ajax.aspnetcdn.com/ajax/modernizr/modernizr-2.8.3.js</a></td>
</tr>
<tr>
<td>561110</td>
<td>URL_REQUEST</td>
<td><a href="https://code.jquery.com/jquery-1.12.1.js" target="_blank" rel="external">https://code.jquery.com/jquery-1.12.1.js</a></td>
</tr>
<tr>
<td>561112</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://code.jquery.com/jquery-1.12.1.js" target="_blank" rel="external">https://code.jquery.com/jquery-1.12.1.js</a></td>
</tr>
<tr>
<td>561113</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://code.jquery.com/jquery-1.12.1.js" target="_blank" rel="external">https://code.jquery.com/jquery-1.12.1.js</a></td>
</tr>
<tr>
<td>561114</td>
<td>URL_REQUEST</td>
<td><a href="https://www.google-analytics.com/analytics.js" target="_blank" rel="external">https://www.google-analytics.com/analytics.js</a></td>
</tr>
<tr>
<td>561116</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://www.google-analytics.com/analytics.js" target="_blank" rel="external">https://www.google-analytics.com/analytics.js</a></td>
</tr>
</tbody>
</table>
<p>リクエストされ、cacheもされている。しかし、こちらはChrome dev toolのNetwork pannelでは確認できない。<br>このまま該当ページに遷移する。</p>
<p><img src="/images/2016/03/19/prerender.png" alt=""></p>
<p>予めページの準備が整ってるだけあり、体感的にも早い。</p>
<h2 id="preload"><a href="#preload" class="headerlink" title="preload"></a>preload</h2><p>こちらはResource Hintsではなく、別の機能としてドキュメントも分けられている。<br>利用するにはResource Hintsと同様にlinkタグを用いる。</p>
<p><a href="http://blog.chromium.org/2016/03/chrome-50-beta-push-notification.html" target="_blank" rel="external">Chrome version 50 からサポートされる様子</a>。<br>2016/03/19 現在はcanaryでは利用できる。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preload"</span> <span class="attr">href</span>=<span class="string">"/assets/font.woff"</span> <span class="attr">as</span>=<span class="string">"font"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preload"</span> <span class="attr">href</span>=<span class="string">"/style/other.css"</span> <span class="attr">as</span>=<span class="string">"style"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preload"</span> <span class="attr">href</span>=<span class="string">"//example.com/resource"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preload"</span> <span class="attr">href</span>=<span class="string">"https://fonts.example.com/font.woff"</span> <span class="attr">as</span>=<span class="string">"font"</span> <span class="attr">crossorigin</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>または、HTTP response HeaderにLinkを追加することでも実現できる。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Link: https://example.com/font.woff; rel=preload; as=font</span><br><span class="line">Link: https://example.com/app/script.js; rel=preload; as=script</span><br><span class="line">Link: https://example.com/logo-hires.jpg; rel=preload; as=image</span><br><span class="line">Link: https://fonts.example.com/font.woff; rel=preload; as=font; crossorigin</span><br></pre></td></tr></table></figure>
<p>as属性にはfont、script、style、image、documentなどが利用できる。<br>リソースの種類の詳細は<a href="https://www.w3.org/TR/preload/#widl-HTMLLinkElement-as" target="_blank" rel="external">widl-HTMLLinkElement-as</a>から確認出来る</p>
<h3 id="peload_u306E_u7279_u5FB4"><a href="#peload_u306E_u7279_u5FB4" class="headerlink" title="peloadの特徴"></a>peloadの特徴</h3><ul>
<li>ページの読込をブロックしない</li>
<li>Resource Hintsが遷移前に次のページのResourceを先行して処理するのと異なり、<br>現在のページにおいてResourceを先読みする。</li>
<li>取得するリソースの優先度を設定できる。</li>
<li>Resourceをfetchする際に<a href="https://developer.mozilla.org/ja/docs/Web/Security/CSP" target="_blank" rel="external">Content-Security-Policy(CSP)</a>を確認できる</li>
<li>Resourceのタイプに応じたAcceptヘッダーを送ることができる</li>
<li>将来的なResourceは再利用のために、ブラウザはResourceタイプを決定することができる</li>
</ul>
<p>preloadのタグは任意のタイミングで動的に追加された場合、リソースの読み込みが開始される。<br>しかし、その時点では現在のページに対して、取得したリソースを実行をしたり、ページに適用をすることはない。</p>
<p>これらを踏まえて、いくつかのパターンでためしてみる。</p>
<h4 id="u52D5_u7684_u306Blink_u30BF_u30B0_u3092_u8FFD_u52A0"><a href="#u52D5_u7684_u306Blink_u30BF_u30B0_u3092_u8FFD_u52A0" class="headerlink" title="動的にlinkタグを追加"></a>動的にlinkタグを追加</h4><p>JavaScriptで動的にlinkタグを追加して、任意のタイミングでpreloadする。<br>onloadイベントにてscriptタグを動的に生成することで、ページに適用できる。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addScripts</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">  script.src = <span class="string">'execute.js'</span>;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> link = <span class="built_in">document</span>.createElement(<span class="string">'link'</span>);</span><br><span class="line">link.href = <span class="string">'execute.js'</span>;</span><br><span class="line">link.rel = <span class="string">'preload'</span>;</span><br><span class="line">link.as = <span class="string">'script'</span>;</span><br><span class="line">link.addEventListener(<span class="string">'load'</span>, addScripts, <span class="literal">false</span>);</span><br><span class="line">link.addEventListener(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123; <span class="built_in">console</span>.log(error) &#125;, <span class="literal">false</span>);</span><br><span class="line"><span class="built_in">document</span>.head.appendChild(link);</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h4 id="u30A6_u30A7_u30D6_u30D5_u30A9_u30F3_u30C8_u306E_u5148_u8AAD_u307F"><a href="#u30A6_u30A7_u30D6_u30D5_u30A9_u30F3_u30C8_u306E_u5148_u8AAD_u307F" class="headerlink" title="ウェブフォントの先読み"></a>ウェブフォントの先読み</h4><p>WebフォントをPreloadする。<br>webフォントの問題点として、パフォーマンスがあった。<br>実際にフォントの読込みが遅延することで、ページ全体のパーフォーマンスが低下します。<br>Preloadを利用することで、ブロッキングされないためパフォーマンスが向上する。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preload"</span> <span class="attr">href</span>=<span class="string">"//fonts.googleapis.com/css?family=Montserrat"</span> <span class="attr">as</span>=<span class="string">"font"</span> <span class="attr">crossorigin</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="u30D0_u30C3_u30AF_u30B0_u30E9_u30F3_u30A6_u30F3_u30C9_u3067_u5148_u8AAD_u307F_u3057_u3066load_u306E_u30BF_u30A4_u30DF_u30F3_u30B0_u3067_u9069_u7528"><a href="#u30D0_u30C3_u30AF_u30B0_u30E9_u30F3_u30A6_u30F3_u30C9_u3067_u5148_u8AAD_u307F_u3057_u3066load_u306E_u30BF_u30A4_u30DF_u30F3_u30B0_u3067_u9069_u7528" class="headerlink" title="バックグランウンドで先読みしてloadのタイミングで適用"></a>バックグランウンドで先読みしてloadのタイミングで適用</h4><p>任意のタイミングでPreloadして、Resource取得後にlinkタグのrel属性値をstylesheetに変えることで<br>直接cssを適用できる。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> link = <span class="built_in">document</span>.createElement(<span class="string">"link"</span>);</span><br><span class="line">link.rel = <span class="string">"preload"</span>;</span><br><span class="line">link.as = <span class="string">"style"</span>;</span><br><span class="line">link.href = <span class="string">"css/style.css"</span>;</span><br><span class="line">link.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.rel = <span class="string">'stylesheet'</span> &#125;, <span class="literal">false</span>);</span><br><span class="line">link.addEventListener(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123; <span class="built_in">console</span>.log(error) &#125;, <span class="literal">false</span>);</span><br><span class="line"><span class="built_in">document</span>.head.appendChild(link);</span><br></pre></td></tr></table></figure>
<h4 id="u30E1_u30C7_u30A3_u30A2_u30AF_u30A8_u30EA"><a href="#u30E1_u30C7_u30A3_u30A2_u30AF_u30A8_u30EA" class="headerlink" title="メディアクエリ"></a>メディアクエリ</h4><p>media属性を用いることでレスポンシブにpreloadもできるようになる様子。<br>(現在はまだサポートされていない)<br>デバイスに応じて必要なリソースを取得することでsumartphoneなどでのページ表示のパフォーマンスの改善になりそう。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preload"</span> <span class="attr">as</span>=<span class="string">"image"</span> <span class="attr">href</span>=<span class="string">"image-max-width.png"</span> <span class="attr">media</span>=<span class="string">"(max-width: 640px)"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="HTTP2_Server_Push__u3068_u306E_u9055_u3044"><a href="#HTTP2_Server_Push__u3068_u306E_u9055_u3044" class="headerlink" title="HTTP2 Server Push との違い"></a>HTTP2 Server Push との違い</h3><p>peloadの場合はサードパーティーのresourceも先読みできる。<br>いっぽう、Server Pushではさすがにサードパーティーのresourceを先読みすることは難しい。</p>
<p>また、preloadの場合はブラウザのキャッシュを有効に活用できるほか、コンテントネゴシエーションも利用できる。<br>これに対してServer Pushは現在のところこれは利用できないため、すでにキャッシュできているResourceも一方的に送ってくる結果になってしまう。<br>h2oではcasper(<a href="https://h2o.examp1e.net/configure/http2_directives.html#http2-casper" target="_blank" rel="external">cache-aware server-push</a>)ディレクティブを追加してこのあたりを改善できるようにしよう策定している様子。</p>
<h3 id="u6240_u611F"><a href="#u6240_u611F" class="headerlink" title="所感"></a>所感</h3><p>HTTP2化のほかに、ブラウザキャッシュやサードパーティーのリソースなどを活用できるPrebrowsingも併用することで、<br>webアプリケーションのパフォーマンスの改善が期待できる。<br>とくにスマートフォンなどのマルチなデバイスをサポートしているサービスなどは活用した方が良い。</p>
<p>今回は<a href="https://blog.kazu69.net/2015/08/05/try-http2-with-h2o-and-mruby/">前回</a>利用した<a href="https://github.com/kazu69/h2o_mruby_playground" target="_blank" rel="external">kazu69/h2o_mruby_playground</a>の環境でためした。</p>
<h5 id="u53C2_u8003_u306B_u3057_u305F_u30DA_u30FC_u30B8"><a href="#u53C2_u8003_u306B_u3057_u305F_u30DA_u30FC_u30B8" class="headerlink" title="参考にしたページ"></a>参考にしたページ</h5><p><a href="https://www.chromestatus.com/feature/5757468554559488" target="_blank" rel="external">https://www.chromestatus.com/feature/5757468554559488</a><br><a href="https://www.chromium.org/developers/design-documents/prerender" target="_blank" rel="external">https://www.chromium.org/developers/design-documents/prerender</a><br><a href="https://developer.mozilla.org/ja/docs/Link_prefetching_FAQ" target="_blank" rel="external">https://developer.mozilla.org/ja/docs/Link_prefetching_FAQ</a><br><a href="https://css-tricks.com/prefetching-preloading-prebrowsing/" target="_blank" rel="external">https://css-tricks.com/prefetching-preloading-prebrowsing/</a><br><a href="https://www.smashingmagazine.com/2016/02/preload-what-is-it-good-for/" target="_blank" rel="external">https://www.smashingmagazine.com/2016/02/preload-what-is-it-good-for/</a><br><a href="https://github.com/w3c/preload/" target="_blank" rel="external">https://github.com/w3c/preload/</a><br><a href="https://github.com/igrigorik/resource-hints" target="_blank" rel="external">https://github.com/igrigorik/resource-hints</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://www.w3.org/TR/resource-hints/">Resource Hints</a>と<a href="https://www.w3.org/TR/preload/">Preload</a>を使うことでリソースの取得を最適化できるようなので試してみた。</p>]]>
    
    </summary>
    
      <category term="web" scheme="http://blog.kazu69.net/tags/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[React FluxアプリをReact Redux(ES2015)で書き直した時のメモ]]></title>
    <link href="http://blog.kazu69.net/2016/02/04/rebuilding-react-app-to-using-es2015-classes-and-redux/"/>
    <id>http://blog.kazu69.net/2016/02/04/rebuilding-react-app-to-using-es2015-classes-and-redux/</id>
    <published>2016-02-04T10:58:25.000Z</published>
    <updated>2016-02-09T15:39:15.000Z</updated>
    <content type="html"><![CDATA[<p>しばらく<a href="https://facebook.github.io/react/" target="_blank" rel="external">React</a>周りの情報を追うのが疎かになっていた感があったので、<br>ReactアプリをES2015 classでリファクタリングして、ついでに<a href="http://redux.js.org/" target="_blank" rel="external">Redux</a>にのせてみた際に学んだことの個人的なまとめ。</p>
<a id="more"></a>
<p>すでに自明のことばかりであるけど。</p>
<h2 id="ES2015_class_u3092_u4F7F_u3046"><a href="#ES2015_class_u3092_u4F7F_u3046" class="headerlink" title="ES2015 classを使う"></a>ES2015 classを使う</h2><h3 id="class"><a href="#class" class="headerlink" title="class"></a>class</h3><p>例えばES5でコンポーネントクラスを作成する<strong>createClass</strong>を使用している。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5 style</span></span><br><span class="line"><span class="keyword">var</span> Task = React.createClass(&#123;</span><br><span class="line">  handleClick: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123; ... &#125;,</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; ... &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>React v0.13からはES2015のclassへのサポートされてるので、<br>ES2015 class定義を使って書くときは、createClassでなく、<a href="https://facebook.github.io/react/docs/component-api.html" target="_blank" rel="external">Component</a>を使うことで可能になる。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES2015 class style</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  handleClick() &#123;...&#125;</span><br><span class="line">  render() &#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>function</strong>が消えよりシンプルになる。ただしこれだけではまだエラーとなる。</p>
<h3 id="State_2C_Property"><a href="#State_2C_Property" class="headerlink" title="State, Property"></a>State, Property</h3><p>コンポーネントのインスタンス作成時にstateを初期化するために、<strong>getInitialState</strong>。<br>propertyのdefault値を定義する<strong>getDefaultProps</strong>やpropsの情報を保持する<strong>propTypes</strong>など一般的にコンポーネントには必要な情報がある。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5 style</span></span><br><span class="line"><span class="keyword">var</span> Task = React.createClass(&#123;</span><br><span class="line">  getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">　  <span class="keyword">return</span> &#123; complete: <span class="keyword">this</span>.props.todo.complete &#125;</span><br><span class="line">  &#125;),</span><br><span class="line">  getDefaultProps: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; complete: <span class="literal">false</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  propTypes: &#123;</span><br><span class="line">    complete: React.PropTypes.bool.isRequired</span><br><span class="line">  &#125;,</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; ... &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>ES2015 classで記述する場合は、getInitialStateを使わずに、<strong>constructor</strong>で行う。<br>これでより意図が通じる形に書きなおすことができる。<br>また、static修飾子を使いpropsの設定値を静的メンバとして登録するので、getterの定義が不要となる。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES2015 class style</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; complete: <span class="keyword">this</span>.props.todo.complete &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  static defaultProps = &#123;</span><br><span class="line">    complete: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  static propTypes = &#123;</span><br><span class="line">    complete: React.PropTypes.bool.isRequired</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Instance_Method"><a href="#Instance_Method" class="headerlink" title="Instance Method"></a>Instance Method</h3><p>コンポーネントのイベントなどで呼ばれるmethod群は、<strong>createClass</strong>を用いる場合はthisが自動でコンポーネントにバンドされる(Autobinding)。<br><a href="https://facebook.github.io/react/blog/2013/07/02/react-v0-4-autobind-by-default.html" target="_blank" rel="external">New in React v0.4: Autobind by Default</a></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">var</span> Task = React.createClass(&#123;</span><br><span class="line">  getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">　  <span class="keyword">return</span> &#123; complete: <span class="keyword">this</span>.props.todo.complete &#125;</span><br><span class="line">  &#125;),</span><br><span class="line">  getDefaultProps: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; complete: <span class="literal">false</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  propTypes: &#123;</span><br><span class="line">    complete: React.PropTypes.bool.isRequired</span><br><span class="line">  &#125;,</span><br><span class="line">  handleClick: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123; ... &#125;,</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; ... &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>ES2015 class を用いる場合このAutobindingが行われないため、<br>constructorの中で手動で<a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" target="_blank" rel="external">bind</a>を使ってthisの束縛を明示的に行うことが必要。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES2015 class style</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; complete: <span class="keyword">this</span>.props.todo.complete &#125;;</span><br><span class="line">    <span class="keyword">this</span>.handleClick = <span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  static defaultProps = &#123;</span><br><span class="line">    complete: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  static propTypes = &#123;</span><br><span class="line">    complete: React.PropTypes.bool.isRequired</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleClick(event) &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>class定義を使う場合、幾つかのがメソッド(isMountedなど)利用できなくなる。</p>
<p>実際、class定義、createClassのどちらを使うのかとかの議論している記事もあり、<br>まだどちらがスタンダードというわけでもなさそう。</p>
<p>個人的にはcreateClassを使いcomponentのclassを作成するよりも、class定義を使う方が将来性もあるので良い気がする。</p>
<h2 id="Redux_u3092_u4F7F_u3046"><a href="#Redux_u3092_u4F7F_u3046" class="headerlink" title="Reduxを使う"></a>Reduxを使う</h2><p><a href="https://github.com/facebook/flux" target="_blank" rel="external">Flux</a>などの思想をもとに作成されたJavaScripアプリの状態管理のライブラリ。<br>1つのStoreオブジェクトでstateは管理され、データフローはFluxと同じく一方向。<br>アプリケーション全体の状態を管理している<strong>state</strong>の変更はactionオブジェクトから渡されるデータをもとに、reducerを通してのみ行われる。</p>
<p>Reduxを利用するにあたり、<a href="http://rackt.org/redux/docs/basics/index.html" target="_blank" rel="external">document</a>を参考に登場人物たちを一旦整理する。</p>
<p>ちなみにFluxのdata flowは</p>
<p><img src="/images/2016/02/04/flux.png" alt=""></p>
<h3 id="actions"><a href="#actions" class="headerlink" title="actions"></a>actions</h3><p>plainなオブジェクトであり、stateの状態を変更する情報(type)を持つ必要がある。</p>
<h3 id="reducers"><a href="#reducers" class="headerlink" title="reducers"></a>reducers</h3><p>reducersはシンプルな関数である(Changes are made with pure functions)。<br>actionから送られたtypeをもとに、実際にstateを変更する。</p>
<h3 id="states"><a href="#states" class="headerlink" title="states"></a>states</h3><p>アプリケーション全体の状態を管理するシングルオブジェクト。<br>stateはImuutable(State is read-only)である必要があるので、stateを直接変更しないで、<strong>Object.assign()</strong>などを使って必ずコピーする。</p>
<h3 id="stores"><a href="#stores" class="headerlink" title="stores"></a>stores</h3><p>applicationの状態(state)を管理し、actionsとreducersを統合しているオブジェクト。<br>rootReducerにより初期状態のstoreが生成される。<br>また、<strong>getState()</strong>でstoreにアクセスできる。<strong>dispatch(action)</strong>でstateを更新でき、<strong>subscribe(listener)</strong>でListner登録できる。</p>
<h3 id="container"><a href="#container" class="headerlink" title="container"></a>container</h3><p>Reduxの最上位のレイヤーであり、ここでReduxのstateとcomponentをつなぐ役割を果たす。</p>
<h3 id="components"><a href="#components" class="headerlink" title="components"></a>components</h3><p>Reduxとは関連しないView。<br>storeのdataをcontainerよりpropsのバケツリレーで受け取る。</p>
<p>Reduxのデータフローは</p>
<p><img src="/images/2016/02/04/redux.png" alt=""></p>
<h3 id="u79FB_u884C_u306B_u3042_u305F_u308A_u5909_u308F_u308B_u7B87_u6240"><a href="#u79FB_u884C_u306B_u3042_u305F_u308A_u5909_u308F_u308B_u7B87_u6240" class="headerlink" title="移行にあたり変わる箇所"></a>移行にあたり変わる箇所</h3><p>ActionCreatorはReduxと違いシンプルな関数であり、FluxではComponentで呼ばれているが、<br>ReduxではContainerでDispatchされるようになる。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// flux action</span></span><br><span class="line"><span class="keyword">var</span> TodoActions = &#123;</span><br><span class="line">  create: <span class="function"><span class="keyword">function</span>(<span class="params">text</span>) </span>&#123; ... &#125;,</span><br><span class="line">  update: <span class="function"><span class="keyword">function</span>(<span class="params">text</span>) </span>&#123; ... &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// redux action</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">text</span>) </span>&#123; ... &#125;,</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">text</span>) </span>&#123; ... &#125;,</span><br></pre></td></tr></table></figure>
<p>また、FluxではStoreのメソッドでstateを変更するが、ReduxではReducerでのみStoreの値を変更する。<br>ReduxではStoreにのみ状態が保持される形となる。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// redux reducer で stateを変更する</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">todos</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span>(action.actionType) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'CREATE'</span>:</span><br><span class="line">      <span class="comment">// create state</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'UPDATE'</span>:</span><br><span class="line">      <span class="comment">// update state</span></span><br><span class="line">      ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>データの取得に関しても、Fluxでは必要に応じてComponentが直接Storeから値を取得することができたが、<br>Reduxではデータはcontainerで取得され、componentにはpropsとしで渡されてる。</p>
<p>Fluxでは複数のStoreにデータを保持するが、Reduxでは1つのStoreでデータを管理するため、複数のStoreはツリー構造で管理するようになる。</p>
<h2 id="Build_Process"><a href="#Build_Process" class="headerlink" title="Build Process"></a>Build Process</h2><h3 id="browserify"><a href="#browserify" class="headerlink" title="browserify"></a>browserify</h3><p><a href="https://webpack.github.io/" target="_blank" rel="external">webpack</a>でもいいけれど、個人的にモノシリックに感じるのでbrowserifyを利用。<br>ES2015 classのinstance filedとstaticの変換は<a href="https://babeljs.io/docs/plugins/preset-stage-1/" target="_blank" rel="external">Stage 1 preset</a>の<a href="http://babeljs.io/docs/plugins/transform-class-properties/" target="_blank" rel="external">transform-class-properties</a>を使うようになる。</p>
<h2 id="u6240_u611F"><a href="#u6240_u611F" class="headerlink" title="所感"></a>所感</h2><p>Fluxでは処理の中心にはdispacherが存在し、そこから渡されるactionを通して変更が各コンポーネントに通知され、<br>UIが更新される。</p>
<p>これに対してReduxの場合は中心となるのはシングルオブジェクトのstate(single source of truth)。stateの変更を受けUIが変更される。<br>stateが1つのオブジェクトとして構成されるので、その管理がシンプルになりそう。<br>また、fluxのstoreでのcallback周りの管理をreducerと切り出しているので、そういう点でもシンプルに<br>管理できるように感じる点だった。</p>
<p>ReduxはFRP(Functional Reactive Programming)的なアプローチとは反対に、保持している状態(state)を安全に上手に遷移させていくということに焦点が絞られている。</p>
<p>学ぶにあたり作った<a href="https://github.com/kazu69/example-react-redux/" target="_blank" rel="external">todoアプリ kazu69/example-react-redux</a></p>
<h4 id="u53C2_u8003_u306B_u3057_u305F_u30DA_u30FC_u30B8"><a href="#u53C2_u8003_u306B_u3057_u305F_u30DA_u30FC_u30B8" class="headerlink" title="参考にしたページ"></a>参考にしたページ</h4><p><a href="https://facebook.github.io/react/blog/2015/01/27/react-v0.13.0-beta-1.html#autobinding" target="_blank" rel="external">https://facebook.github.io/react/blog/2015/01/27/react-v0.13.0-beta-1.html#autobinding</a><br><a href="https://github.com/yannickcr/eslint-plugin-react/issues/203" target="_blank" rel="external">https://github.com/yannickcr/eslint-plugin-react/issues/203</a><br><a href="http://babeljs.io/docs/plugins/preset-stage-1/" target="_blank" rel="external">http://babeljs.io/docs/plugins/preset-stage-1/</a><br><a href="http://rackt.org/redux/index.html" target="_blank" rel="external">http://rackt.org/redux/index.html</a><br><a href="https://github.com/rackt/redux/issues/756" target="_blank" rel="external">https://github.com/rackt/redux/issues/756</a><br><a href="http://staltz.com/unidirectional-user-interface-architectures.html" target="_blank" rel="external">http://staltz.com/unidirectional-user-interface-architectures.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>しばらく<a href="https://facebook.github.io/react/">React</a>周りの情報を追うのが疎かになっていた感があったので、<br>ReactアプリをES2015 classでリファクタリングして、ついでに<a href="http://redux.js.org/">Redux</a>にのせてみた際に学んだことの個人的なまとめ。</p>]]>
    
    </summary>
    
      <category term="web" scheme="http://blog.kazu69.net/tags/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[docker上のmysqlを使うにあたりよくあるパターン]]></title>
    <link href="http://blog.kazu69.net/2016/01/13/put-together-pattern-of-docker-mysql/"/>
    <id>http://blog.kazu69.net/2016/01/13/put-together-pattern-of-docker-mysql/</id>
    <published>2016-01-13T13:43:30.000Z</published>
    <updated>2016-01-23T03:11:52.000Z</updated>
    <content type="html"><![CDATA[<p>しばらく時間が空くと忘れてしまうので備忘録。<br>dockerでmysqlサーバーを立てた時にありがちなパターンをまとめた。</p>
<a id="more"></a>
<p>今回は<a href="https://hub.docker.com/_/mysql/" target="_blank" rel="external">mysqlの公式イメージ</a>を使う前提。</p>
<h2 id="u8D77_u52D5_u6642_u306B_u521D_u671F_u30C7_u30FC_u30BF_u3068_u30E6_u30FC_u30B6_u30FC_u8FFD_u52A0"><a href="#u8D77_u52D5_u6642_u306B_u521D_u671F_u30C7_u30FC_u30BF_u3068_u30E6_u30FC_u30B6_u30FC_u8FFD_u52A0" class="headerlink" title="起動時に初期データとユーザー追加"></a>起動時に初期データとユーザー追加</h2><p>起動時にテーブルを作成したり、データを追加したい時、ユーザーを追加しておきたい時。<br>例えば、以下のようなユーザー追加と初期データ追加用のsqlファイルを任意のディレクトリ(今回はinit.dにしておく)に置いておき、</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span><br><span class="line"></span></span><br><span class="line">CREATE_USER=<span class="string">'mysql'</span></span><br><span class="line">CREATE_PASSWORD=<span class="string">'secret'</span></span><br><span class="line">GRANT=<span class="string">"GRANT ALL ON <span class="variable">$&#123;MYSQL_DATABASE&#125;</span>.* TO <span class="variable">$&#123;CREATE_USER&#125;</span>@'%' IDENTIFIED BY <span class="variable">$&#123;CREATE_PASSWORD&#125;</span>; FLUSH PRIVILEGES"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$GRANT</span> | mysql -u <span class="variable">$&#123;MYSQL_ROOT_USER&#125;</span> -p<span class="variable">$&#123;MYSQL_ROOT_PASSWORD&#125;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`personal`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`personal`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`id`</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">LOCK</span> <span class="keyword">TABLES</span> <span class="string">`personal`</span> WRITE;</span><br><span class="line"><span class="comment">/*!40000 ALTER TABLE `personal` DISABLE KEYS */</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`personal`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>)</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="number">1</span>, <span class="string">'root@local'</span>) <span class="keyword">AS</span> tmp</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="string">`id`</span> <span class="keyword">FROM</span> <span class="string">`personal`</span> <span class="keyword">WHERE</span> <span class="string">`id`</span> = <span class="number">1</span></span><br><span class="line">) <span class="keyword">LIMIT</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>これをイメージの<strong>/docker-entrypoint-initdb.d</strong>に<strong>.sql</strong>や<strong>.sh</strong>ファイルとして配置してやることで<br>コンテナ起動時する前に実行される。(<a href="https://github.com/docker-library/mysql/pull/90" target="_blank" rel="external">Pull Request</a>)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># Dcokerfile</span><br><span class="line"></span><br><span class="line">FROM mysql</span><br><span class="line">EXPORT &apos;3306:3306&apos;</span><br><span class="line">ENV MYSQL_ROOT_USER root</span><br><span class="line">ENV MYSQL_ROOT_PASSWORD root</span><br><span class="line">ENV MYSQL_DATABASE sample_db</span><br><span class="line">ENV MYSQL_USER test</span><br><span class="line">ENV MYSQL_PASSWORD password</span><br><span class="line"></span><br><span class="line"># 初期データをコンテナ起動時に実行</span><br><span class="line">VOLUME ./init.d:/docker-entrypoint-initdb.d</span><br></pre></td></tr></table></figure>
<h2 id="u30C7_u30FC_u30BF_u3092_u6C38_u7D9A_u5316_u3059_u308B"><a href="#u30C7_u30FC_u30BF_u3092_u6C38_u7D9A_u5316_u3059_u308B" class="headerlink" title="データを永続化する"></a>データを永続化する</h2><p>Dockerfile内でVOLUMEコマンドを使いホストのディレクトリをコンテナにマウントしてやることで永続化できる。<br>ポータビリティ(可搬性)を求める場合はデータを格納専用のコンテナを別途用意すると良い。</p>
<p>データ格納専用コンテナのディレクトリをデータベース用のコンテナにマウントすることで実現できる。<br>データ自体は永続化されているので、データベース用のコンテナな使い捨てできる。</p>
<p>データを格納専用のコンテナを作成は必要最小限の機能があればいいので<a href="https://hub.docker.com/_/busybox/" target="_blank" rel="external">busybox</a>とかでいい。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># データを格納専用のコンテナ</span></span><br><span class="line"><span class="comment"># -v でマウントするディレクトリ指定</span></span><br><span class="line">docker run \</span><br><span class="line">    <span class="_">-d</span> \</span><br><span class="line">    --name storage \</span><br><span class="line">    -v /var/lib/mysql \</span><br><span class="line">    busybox</span><br><span class="line"></span><br><span class="line"><span class="comment"># --volumes-from オプションで格納専用のコンテナを参照</span></span><br><span class="line">docker run \</span><br><span class="line">    <span class="_">-d</span> \</span><br><span class="line">    --name database \</span><br><span class="line">    --volumes-from storage \</span><br><span class="line">    <span class="_">-e</span> MYSQL_ROOT_PASSWORD=root \</span><br><span class="line">    mysql</span><br></pre></td></tr></table></figure>
<p>docker-inspectで詳細を見ると</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line">    &#123;</span><br><span class="line">...</span><br><span class="line">    "Mounts": [</span><br><span class="line">        &#123;</span><br><span class="line">            "Name": "1b3136bd545afa6d76427edd27408f47...",</span><br><span class="line">            "Source": "/mnt/sda1/var/lib/docker/volumes/1b3136bd545afa6d76427edd27408f47612ea1cd1f7a1857d810b24ecae2c16d/_data",</span><br><span class="line">            "Destination": "/var/lib/mysql",</span><br><span class="line">            "Driver": "local",</span><br><span class="line">            "Mode": "",</span><br><span class="line">            "RW": true</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">...</span><br><span class="line">      "Image": "mysql",</span><br><span class="line">        "Volumes": &#123;</span><br><span class="line">            "/var/lib/mysql": &#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>実体は /mnt/sda1/var/lib/docker/volumes/ にあるようだ。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">docmer-machine ssh dev</span><br><span class="line">                        <span class="comment">##         .</span></span><br><span class="line">                  <span class="comment">## ## ##        ==</span></span><br><span class="line">               <span class="comment">## ## ## ## ##    ===</span></span><br><span class="line">           /<span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">"\___/ ===</span><br><span class="line">      ~~~ &#123;~~ ~~~~ ~~~ ~~~~ ~~~ ~ /  ===- ~~~</span><br><span class="line">           \______ o           __/</span><br><span class="line">             \    \         __/</span><br><span class="line">              \____\_______/</span><br><span class="line"> _                 _   ____     _            _</span><br><span class="line">| |__   ___   ___ | |_|___ \ __| | ___   ___| | _____ _ __</span><br><span class="line">| '_ \ / _ \ / _ \| __| __) / _` |/ _ \ / __| |/ / _ \ '__|</span><br><span class="line">| |_) | (_) | (_) | |_ / __/ (_| | (_) | (__|   &lt;  __/ |</span><br><span class="line">|_.__/ \___/ \___/ \__|_____\__,_|\___/ \___|_|\_\___|_|</span><br><span class="line">Boot2Docker version 1.9.1, build master : cef800b - Fri Nov 20 19:33:59 UTC 2015</span><br><span class="line"></span><br><span class="line">sudo ls /mnt/sda1/var/lib/docker/volumes/1b3136bd545afa6d76427edd27408f47612ea1cd1f7a1857d810b24ecae2c16d/_data</span><br><span class="line">auto.cnf            ib_buffer_pool      ib_logfile0         ib_logfile1         ibdata1             ibtmp1              mysql               performance_schema  sys</span></span><br></pre></td></tr></table></figure>
<p>あった。</p>
<h2 id="u30C7_u30FC_u30BF_u3092_u30D0_u30C3_u30AF_u30A2_u30C3_u30D7_u3059_u308B"><a href="#u30C7_u30FC_u30BF_u3092_u30D0_u30C3_u30AF_u30A2_u30C3_u30D7_u3059_u308B" class="headerlink" title="データをバックアップする"></a>データをバックアップする</h2><p>上記の方法で永続化したデータも、バックアップする必要があると思う。<br>この場合、データ格納専用コンテナのディレクトリとホストのディレクトリもマウントするコンテナを作成し、<br>データをホストディレクトに渡せばいいだけ。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm --volumes-from database -v $(<span class="built_in">pwd</span>):/backup busybox tar czvf /backup/archive.tar.gz /var/lib/mysql</span><br></pre></td></tr></table></figure>
<p>ということで、開発環境やCI環境のコンテナ化の時にMySQL環境作成時に思い出そう。<br><a href="https://github.com/kazu69/docker-mysql-pattern-sample" target="_blank" rel="external">今回使ったデータのまとめ</a></p>
<h4 id="u53C2_u8003_u306B_u3057_u305F_u30DA_u30FC_u30B8"><a href="#u53C2_u8003_u306B_u3057_u305F_u30DA_u30FC_u30B8" class="headerlink" title="参考にしたページ"></a>参考にしたページ</h4><p><a href="http://qiita.com/lciel/items/e21a4ede3bac7fb3ec5a" target="_blank" rel="external">Docker の Data Volume まわりを整理する</a><br><a href="https://docs.docker.com/engine/userguide/dockervolumes/#mount-a-host-directory-as-a-data-volume" target="_blank" rel="external">Mount a host directory as a data volume</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>しばらく時間が空くと忘れてしまうので備忘録。<br>dockerでmysqlサーバーを立てた時にありがちなパターンをまとめた。</p>]]>
    
    </summary>
    
      <category term="tec" scheme="http://blog.kazu69.net/categories/tec/"/>
    
      <category term="memo" scheme="http://blog.kazu69.net/categories/tec/memo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ビジュアルのRegression Test(回帰テスト)ツールを試してみた]]></title>
    <link href="http://blog.kazu69.net/2016/01/02/looking-css-regression-testing-tool/"/>
    <id>http://blog.kazu69.net/2016/01/02/looking-css-regression-testing-tool/</id>
    <published>2016-01-01T15:18:43.000Z</published>
    <updated>2016-01-11T15:28:35.000Z</updated>
    <content type="html"><![CDATA[<p>運用年数の長いウェブサービスでcssやhtmlのリファクタリングをするにあたって、ビジュアルのRegression test(回帰テスト)が必要となってきたので、導入するにあたりいくつかのツールを眺めてみた。</p>
<a id="more"></a>
<p>今回、ビジュアルのRegression testとしてcsscritic、BackstopJS、Succss、PhantomCSSを軽く触ってみた。</p>
<h2 id="csscritic"><a href="#csscritic" class="headerlink" title="csscritic"></a>csscritic</h2><blockquote>
<p>A lightweight tool for regression testing of Cascading Style Sheets</p>
</blockquote>
<p>とある通り、<a href="https://github.com/cburgmer/csscritic" target="_blank" rel="external">csscritic</a>はシンプルな設定でテストを実施することが可能。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i csscritic http-server --no-optional</span><br></pre></td></tr></table></figure>
<p>テスト対象となるhtml(test.html)を以下のようにする</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Page under test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span><br><span class="line">        .test &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">            vertical-align: top;</span><br><span class="line">            width: 204px;</span><br><span class="line">            height: 50px;</span><br><span class="line">            font-size: 90px;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">        .blue &#123;</span><br><span class="line">            background-color: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test blue"</span>&gt;</span></span><br><span class="line">        Blue</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>テスト用のhtmlファイル(RegressionRunner.html)を作成</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Regression Runner<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/csscritic/dist/csscritic.allinone.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span><br><span class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            csscritic</span><br><span class="line">                <span class="comment">/* テストケースをlabel */</span></span><br><span class="line">                .component(<span class="string">'Example test'</span>)</span><br><span class="line"></span><br><span class="line">                <span class="comment">/* レポーターの設定 */</span></span><br><span class="line">                .add(&#123;</span><br><span class="line">                    url: <span class="string">'test.html'</span>,</span><br><span class="line">                    desc: <span class="string">'should look good'</span></span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line">                <span class="comment">/* テストケースを追加 */</span></span><br><span class="line">                .addReporter(csscritic.NiceReporter())</span><br><span class="line"></span><br><span class="line">                <span class="comment">/* テスト実行 */</span></span><br><span class="line">                .execute();</span><br><span class="line">        &#125;;</span><br><span class="line">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/cburgmer/csscritic/wiki/API" target="_blank" rel="external">APIはドキュメント</a>があるので必要に応じて参照。</p>
<p>RegressionRunner.htmlをブラウザで開くことでまず現在の表示状態を確認できる。<br>Chromeの場合<a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Same_origin_policy_for_JavaScript" target="_blank" rel="external">same-origin</a>の制限で表示できないので、ローカルサーバーを立てて表示する。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node_modules/.bin/http-server</span><br><span class="line">open http://localhost:8080//RegressionRunner.html</span><br></pre></td></tr></table></figure>
<p><img src="/images/2016/01/02/csscritic_first_run.png" alt=""></p>
<p>テスト対象のhtmlを<a href="http://phantomjs.org/" target="_blank" rel="external">PhantomJS</a>でレンダリングし、対象となる箇所を目視確認し、問題ない場合はacceptしていく。(htmlファイルの他に画像ファイルを指定することも可能)</p>
<p>このacceptした結果はローカルのIndexed DBに保持される。<br>再度ページを読込むと、前回レンダリング結果との比較を行う。ここで差分がある場合はfaildとなる。</p>
<p><img src="/images/2016/01/02/csscritic_success.png" alt=""></p>
<p>sama-originの制限や動的生成される場合などで、ローカルのコードベースでテストをできない時は、<br>proxyを使うか、screenshotの画像と比較するなどで対応すると良いらしい。</p>
<p>csscriticは簡単な設定で容易にRegression テストを導入できる。<br>Styleguideなどのドキュメントに導入するなどの活用ができそう。<br>基本的にローカルのstaticなコードに対してテストするので、それ以外の場合はひと手間かかる。</p>
<h2 id="BackstopJS"><a href="#BackstopJS" class="headerlink" title="BackstopJS"></a>BackstopJS</h2><p><a href="https://github.com/garris/BackstopJS" target="_blank" rel="external">BackstopJS</a>は複数のview portに対してRegressionテストを実行できるのが特徴。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># インストール</span></span><br><span class="line">npm i -D backstopjs</span><br><span class="line">npm i -g gulp phantomjs casperjs</span><br><span class="line"></span><br><span class="line"><span class="comment"># backstopjsのGulp Taskを実行する必要があるため</span></span><br><span class="line"><span class="built_in">cd</span> node_modules/backstopjs</span><br><span class="line"></span><br><span class="line"><span class="comment"># configファイル(backstop.json)生成</span></span><br><span class="line">gulp genConfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># bitmaps_reference に比較元になる現在のキャプチャを生成する</span></span><br><span class="line">gulp reference</span><br><span class="line"></span><br><span class="line"><span class="comment"># 変更した内容との比較がbitmaps_test/&lt;timestamp&gt;/に生成される</span></span><br><span class="line">gulp <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># レポーターを開く</span></span><br><span class="line">gulp openReport</span><br></pre></td></tr></table></figure>
<p>backstop.jsonは以下を使った。jsonの他に<a href="https://github.com/garris/BackstopJS/blob/master/test/configExample.js" target="_blank" rel="external">javascript</a>もつかえる様子。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"viewports"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"phone"</span>,</span><br><span class="line">      <span class="string">"width"</span>: <span class="number">320</span>,</span><br><span class="line">      <span class="string">"height"</span>: <span class="number">480</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"scenarios"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"label"</span>: <span class="string">"http://getbootstrap.com"</span>,</span><br><span class="line">      <span class="string">"url"</span>: <span class="string">"http://getbootstrap.com"</span>,</span><br><span class="line">      <span class="string">"hideSelectors"</span>: [],</span><br><span class="line">      <span class="string">"removeSelectors"</span>: [</span><br><span class="line">        <span class="string">"#carbonads-container"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"selectors"</span>: [</span><br><span class="line">        <span class="string">"header"</span>,</span><br><span class="line">        <span class="string">"main"</span>,</span><br><span class="line">        <span class="string">"footer"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"readyEvent"</span>: <span class="string">"backstopjs_ready"</span>,</span><br><span class="line">      <span class="string">"delay"</span>: <span class="number">500</span>,</span><br><span class="line">      <span class="string">"misMatchThreshold"</span> : <span class="number">0.1</span>,</span><br><span class="line">      <span class="string">"onReadyScript"</span>: <span class="string">"onReady.js"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"paths"</span>: &#123;</span><br><span class="line">    <span class="string">"bitmaps_reference"</span>: <span class="string">"../../backstop_data/bitmaps_reference"</span>,</span><br><span class="line">    <span class="string">"bitmaps_test"</span>: <span class="string">"../../backstop_data/bitmaps_test"</span>,</span><br><span class="line">    <span class="string">"compare_data"</span>: <span class="string">"../../backstop_data/bitmaps_test/compare.json"</span>,</span><br><span class="line">    <span class="string">"casper_scripts"</span>: <span class="string">"../../backstop_data/casper_scripts"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"engine"</span>: <span class="string">"phantomjs"</span>,</span><br><span class="line">  <span class="string">"report"</span>: [<span class="string">"CLI"</span>, <span class="string">"browser"</span>],</span><br><span class="line">  <span class="string">"cliExitOnFail"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"casperFlags"</span>: [],</span><br><span class="line">  <span class="string">"debug"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"port"</span>: <span class="number">3001</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>レポーターを開くとテスト結果とそれぞれの要素が表示される。</p>
<p><img src="/images/2016/01/02/backstopjs_reporter_result.png" alt=""></p>
<p><img src="/images/2016/01/02/backstopjs_reporter_element.png" alt=""></p>
<p>viewportsで複数のviewportのプロパティを指定することができる。<br>hideSelectorsは指定要素に visibility:hidden を適用する。これは広告など任意のコンテンツが表示される要素を非表示にする。<br>removeSelectorsは指定要素に display:none を適用する。未実装などの要素をテストしないようにする。<br>出力ファイルのパスの設定はpathsとなる。</p>
<p>BackstopJSはセットアップからテストの実施までインストールしたbackstopjsのgulpを実行する必要があるので、npm scriptsを作っておくとかで対応した。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"backstop-reference"</span>: <span class="string">"cd ./node_modules/backstopjs &amp;&amp; gulp reference"</span>,</span><br><span class="line">  <span class="string">"backstop-test"</span>: <span class="string">"cd ./node_modules/backstopjs &amp;&amp; gulp test"</span>,</span><br><span class="line">  <span class="string">"backstop-report"</span>: <span class="string">"cd ./node_modules/backstopjs &amp;&amp; gulp openReport"</span></span><br><span class="line">&#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>複数のviewportに対してテストをまとめて実行できる点は、レスポンシブサイトではすごく重宝しそう。<br>ツール自体はgulpへの依存度が大きく、すでにワークフローが確立しているプロジェクトなどでは導入の際に検討が必要となりそう。</p>
<h2 id="Succss"><a href="#Succss" class="headerlink" title="Succss"></a>Succss</h2><p><a href="https://github.com/B2F/Succss" target="_blank" rel="external">Succss</a> も導入の簡単なRegression test toolらしく、こちらは2015年にリリースされているので比較的新しい。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm i -g success</span><br><span class="line"></span><br><span class="line"><span class="comment"># 現在の状態のscrennshotを追加する</span></span><br><span class="line">succss add configuration.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 変更を比較する</span></span><br><span class="line">succss check configuration.js</span><br></pre></td></tr></table></figure>
<p>設定ファイル(configuration.js)は以下を使用した。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Succss.pages = &#123;</span><br><span class="line">  <span class="string">'homepage'</span>: &#123;</span><br><span class="line">    url:<span class="string">'succss.ifzenelse.net/'</span>,</span><br><span class="line">    directory:<span class="string">'screenshots/'</span>,</span><br><span class="line">    captures: &#123;</span><br><span class="line">      <span class="string">'header'</span>:</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">'before'</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">this</span>.click(<span class="string">'#logo-image'</span>);</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'... Waiting for color squares reinitialization'</span>);</span><br><span class="line">          <span class="keyword">this</span>.wait(<span class="number">900</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'Done!'</span>);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Succss.viewports = &#123;</span><br><span class="line">  <span class="string">'default'</span>: &#123;</span><br><span class="line">    width: <span class="number">320</span>,</span><br><span class="line">    height: <span class="number">240</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'mobile-landscape'</span>: &#123;</span><br><span class="line">    width: <span class="number">640</span>,</span><br><span class="line">    height: <span class="number">480</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>directoryはscrennshotの保存先ディレクトリ。<br>capturesで比較する要素css selectorsで指定できる。また関数を使うことも可能。</p>
<p><img src="/images/2016/01/02/succss_result.png" alt=""></p>
<p>Succssは設定がシンプルかつ複数のviewportに対してテストを実行でき、オプションも豊富である。<br>画像を比較するdiffツールに<a href="https://github.com/Huddle/Resemble.js" target="_blank" rel="external">Resemble.js</a>のほか<a href="https://github.com/HumbleSoftware/js-imagediff" target="_blank" rel="external">imagediff.js</a>も使うことができる点で他と違っている。</p>
<p>特定のタスクランナーに依存してないので既存のプロジェクトに導入しやすい感じがある。</p>
<h2 id="PhantomCSS"><a href="#PhantomCSS" class="headerlink" title="PhantomCSS"></a>PhantomCSS</h2><p><a href="https://github.com/Huddle/PhantomCSS" target="_blank" rel="external">PhantomCSS</a>は<a href="http://casperjs.org/" target="_blank" rel="external">CasperJS</a>モジュールとして機能するツール。</p>
<p>PhantomCSS自体のinitializeは<a href="https://github.com/Huddle/PhantomCSS/blob/master/demo/testsuite.js" target="_blank" rel="external">demo</a>を参照すると良さそう。</p>
<p>今回はdemoを使って軽く試してみる。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> phantomcss = <span class="built_in">require</span>(<span class="string">'phantomcss'</span>);</span><br><span class="line"></span><br><span class="line">casper.test.begin(<span class="string">'Coffee machine visual tests'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"> test </span>) </span>&#123;</span><br><span class="line">    phantomcss.init(&#123;</span><br><span class="line">        casper: casper,</span><br><span class="line">        screenshotRoot: <span class="string">'screenshots'</span>,</span><br><span class="line">        failedComparisonsRoot: <span class="string">'failures'</span>,</span><br><span class="line">        comparisonResultRoot: <span class="string">'results'</span>,</span><br><span class="line">        libraryRoot: <span class="string">'node_modules/phantomcss'</span>,</span><br><span class="line">        addLabelToFailedImage: <span class="literal">false</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    casper.on( <span class="string">'remote.message'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"> msg </span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.echo( msg );</span><br><span class="line">    &#125; )</span><br><span class="line"></span><br><span class="line">    casper.on( <span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"> err </span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.die( <span class="string">"PhantomJS has errored: "</span> + err );</span><br><span class="line">    &#125; );</span><br><span class="line"></span><br><span class="line">    casper.on( <span class="string">'resource.error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"> err </span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        casper.log( <span class="string">'Resource load error: '</span> + err, <span class="string">'warning'</span> );</span><br><span class="line">    &#125; );</span><br><span class="line"></span><br><span class="line">    casper.start(<span class="string">'coffeemachine.html'</span>);</span><br><span class="line">    casper.viewport( <span class="number">1024</span>, <span class="number">768</span> );</span><br><span class="line"></span><br><span class="line">    casper.then( <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        casper.click( <span class="string">'#coffee-machine-button'</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// wait for modal to fade-in </span></span><br><span class="line">        casper.waitForSelector( <span class="string">'#myModal:not([style*="display: none"])'</span>,</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">success</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                phantomcss.screenshot( <span class="string">'#myModal'</span>, <span class="string">'coffee machine dialog'</span> );</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                casper.test.fail( <span class="string">'Should see coffee machine'</span> );</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125; );</span><br><span class="line"></span><br><span class="line">    casper.then( <span class="function"><span class="keyword">function</span> <span class="title">now_check_the_screenshots</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        phantomcss.compareAll();</span><br><span class="line">    &#125; );</span><br><span class="line"></span><br><span class="line">    casper.run(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">'\nTHE END.'</span> );</span><br><span class="line">        casper.test.done();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 現状のscreenshotを生成</span></span><br><span class="line">casperjs <span class="built_in">test</span> test.js</span><br><span class="line">Test file: test.js</span><br><span class="line"><span class="comment"># Coffee machine visual tests</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">New screenshot at results/coffee machine dialog_0.png</span><br><span class="line"></span><br><span class="line">Must be your first time?</span><br><span class="line">Some screenshots have been generated <span class="keyword">in</span> the directory results</span><br><span class="line">This is your <span class="string">'baseline'</span>, check the images manually. If they<span class="string">'re wrong, delete the images.</span><br><span class="line">The next time you run these tests, new screenshots will be taken.  These screenshots will be compared to the original.</span><br><span class="line">If they are different, PhantomCSS will report a failure.</span><br><span class="line"></span><br><span class="line">THE END.</span><br><span class="line"></span><br><span class="line"># わざと差分を出して比較テストを行う</span><br><span class="line">asperjs test test.js</span><br><span class="line">Test file: test.js</span><br><span class="line"># Coffee machine visual tests</span><br><span class="line">Failure! Saved to failures/coffee machine dialog_0.fail.png</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">FAIL Visual change found for screenshot results/coffee machine dialog_0.png (8.65% mismatch)</span><br><span class="line">#    type: fail</span><br><span class="line">#    file: test.js</span><br><span class="line">#    subject: false</span><br><span class="line"></span><br><span class="line">PhantomCSS found 1 tests, 1 of them failed.</span><br><span class="line"></span><br><span class="line">PhantomCSS has created some images that try to show the difference (in the directory failures). Fuchsia colored pixels indicate a difference betwen the new and old screenshots.</span><br><span class="line"></span><br><span class="line">THE END.</span><br><span class="line">FAIL 1 test executed in 4.162s, 0 passed, 1 failed, 0 dubious, 0 skipped.</span><br><span class="line"></span><br><span class="line">Details for the 1 failed test:</span><br><span class="line"></span><br><span class="line">In test.js</span><br><span class="line">  Coffee machine visual tests</span><br><span class="line">    fail: Visual change found for screenshot results/coffee machine dialog_0.png (8.65% mismatch)</span></span><br></pre></td></tr></table></figure>
<p>差分が出た場合は以下のように差分が視覚的に確認できる。</p>
<p><img src="/images/2016/01/02/phantomcss_failer.png" alt=""></p>
<p>PhantomCSSはドキュメントを見る限りでは、オプションが色々とありCasperJSのテストが書ければなんとかなりそうな雰囲気。<br>既存のプロジェクトに導入しても十分活躍できそう。<br>複数の複雑な条件をテストする際はCasperJSのコードを頑張っていく感じになりそう。</p>
<h2 id="u307E_u3068_u3081"><a href="#u307E_u3068_u3081" class="headerlink" title="まとめ"></a>まとめ</h2><p>どれも基本的に PhantomJS + CasperJS でscreenshotを取得して、resemble.jsで画像を比較するパターンとなっている。<br>(<a href="https://slimerjs.org/" target="_blank" rel="external">slimerjs</a>もオプションで使える)<br>Regressionテストを導入する場合、プロジェクトによってどれを選択するのか判断しないといけなが、個人的には以下のように考えた。</p>
<p>既にstyleguideがある場合はcsscriticをstyleguideに導入するのは簡単なので良さそう。<br>Gulpを使っているプロジェクトで簡単に導入したいならBackstopJSは強力なのでこちらを選択する。<br>タスクランナーに依存しないで、シンプルに導入したいならSuccssで問題ない。<br>CasperJsでテストコード書くことが可能な場合は、複雑な条件でテストできるようにしたいならばPhantomCSSを選んでおくのが良さそう。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>運用年数の長いウェブサービスでcssやhtmlのリファクタリングをするにあたって、ビジュアルのRegression test(回帰テスト)が必要となってきたので、導入するにあたりいくつかのツールを眺めてみた。</p>]]>
    
    </summary>
    
      <category term="web" scheme="http://blog.kazu69.net/tags/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[mysqlのバイナリログのフォーマットを調べた]]></title>
    <link href="http://blog.kazu69.net/2015/12/01/examined-mysql-binlog-format/"/>
    <id>http://blog.kazu69.net/2015/12/01/examined-mysql-binlog-format/</id>
    <published>2015-12-01T10:19:09.000Z</published>
    <updated>2015-12-09T04:48:20.000Z</updated>
    <content type="html"><![CDATA[<p>とあるアプリケーションをレンタルサーバーに設置しようとした際に、<br><a href="https://mariadb.com/" target="_blank" rel="external">MariaDB</a>が以下のようなエラーを吐いていた。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Unsafe statement written to the binary log using statement format</span><br><span class="line">since BINLOG_FORMAT = STATEMENT. Statement is unsafe because it</span><br><span class="line">invokes a trigger or a stored function that inserts into an</span><br><span class="line">AUTO_INCREMENT column. Inserted values cannot be logged correctly.</span><br></pre></td></tr></table></figure>
<p>バイナリログフォーマットがSTATEMENTだと安全でないのでよろしくないらしい。<br>STATEMENTだと安全でないということはどういうことか。少し試してみた。</p>
<a id="more"></a>
<h2 id="u30D0_u30A4_u30CA_u30EA_u30ED_u30B0_u306B_u3064_u3044_u3066"><a href="#u30D0_u30A4_u30CA_u30EA_u30ED_u30B0_u306B_u3064_u3044_u3066" class="headerlink" title="バイナリログについて"></a>バイナリログについて</h2><p>RDBMSでいうところのトランザクションログをMySQLではバイナリログという。</p>
<p>バイナリログにはMySQLにおいてデータベースに対して</p>
<ul>
<li>トランザクションの開始および終了</li>
<li>値の挿入(INSERT)、値の更新(UPDATE)、削除(DELETE)</li>
<li>テーブル、インデックスの作成削除</li>
</ul>
<p>の履歴が保持されている。</p>
<p>トランザクションログはRDBMSによって異なり、以下に大別される。</p>
<table>
<thead>
<tr>
<th>トランザクションログ</th>
<th>概要</th>
</tr>
</thead>
<tbody>
<tr>
<td>論理ロギング</td>
<td>データベースに対する論理動作(SQL文)の変更履歴を管理</td>
</tr>
<tr>
<td>物理ロギング</td>
<td>変更があったデータの変更前のイメージを管理</td>
</tr>
</tbody>
</table>
<p>バイナリログはデフォルトでは生成されないのでmy.cnfに設定を追加する必要がある。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># grep my.cnf</span></span><br><span class="line">mysql --help | grep my.cnf</span><br><span class="line">touch /usr/<span class="built_in">local</span>/etc/my.cnf</span><br><span class="line"></span><br><span class="line">cat /usr/<span class="built_in">local</span>/etc/my.cnf</span><br></pre></td></tr></table></figure>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">log-bin</span>=mysql-bin</span><br></pre></td></tr></table></figure>
<p>設定することにより、/usr/local/var/mysql/mysql-bin.000001 のようにログファイルが生成される。<br>再起動などすると /usr/local/var/mysql/mysql-bin.000002 と新たなログファイルが生成される。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ls /usr/<span class="built_in">local</span>/var/mysql/</span><br><span class="line"></span><br><span class="line">mysql-bin.000001</span><br><span class="line"></span><br><span class="line">mysql.server restart</span><br><span class="line">Shutting down MySQL</span><br><span class="line">. SUCCESS!</span><br><span class="line">Starting MySQL</span><br><span class="line">. SUCCESS!</span><br><span class="line"></span><br><span class="line">ls /usr/<span class="built_in">local</span>/var/mysql/</span><br><span class="line"></span><br><span class="line">mysql-bin.000001</span><br><span class="line">mysql-bin.000002</span><br></pre></td></tr></table></figure>
<p>存在するログファイルは /usr/local/var/mysql/mysql-bin.index にリストアップされている。<br>ということで rm などでログだけ消すと次回起動時にエラーになる。mysql-bin.indexからも削除する必要が有る。</p>
<p>また、ログファイルは溜まっていく一方なので自動削除するためにmy.cnfに設定を追加。<br>expire_log_days でログを保持する期間を追加。(初期値は0で削除しない)<br>7日間保持するなら、以下のような感じ。</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">log-bin</span>=mysql-bin</span><br><span class="line"><span class="attr">expire_log_days</span> = <span class="number">7</span></span><br></pre></td></tr></table></figure>
<h2 id="u30D0_u30A4_u30CA_u30EA_u30ED_u30B0_u306E_u30D5_u30A9_u30FC_u30DE_u30C3_u30C8"><a href="#u30D0_u30A4_u30CA_u30EA_u30ED_u30B0_u306E_u30D5_u30A9_u30FC_u30DE_u30C3_u30C8" class="headerlink" title="バイナリログのフォーマット"></a>バイナリログのフォーマット</h2><p>バイナリログのフォーマットは3種類あり、それぞれ以下のようになっている。</p>
<table>
<thead>
<tr>
<th>フォーマット</th>
<th>特徴</th>
</tr>
</thead>
<tbody>
<tr>
<td>STATEMENT</td>
<td>実行されたSQLに基づいてロギング</td>
</tr>
<tr>
<td>ROW</td>
<td>行ベースに基づきロギング</td>
</tr>
<tr>
<td>MIXED</td>
<td>基本はSTATEMENTだが特定の条件では行ベースでロギングする</td>
</tr>
</tbody>
</table>
<p>おそらくレンタルサーバーとかだと、STATEMENTに設定されていることが多いんじゃないかなと思う。</p>
<p>それぞれの挙動を適当なテーブルを作り試してみる。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create database <span class="built_in">test</span>;</span><br><span class="line">create table personal(id int auto_increment, name varchar(10),index(id));</span><br><span class="line">SHOW FULL COLUMNS FROM personal;</span><br><span class="line">+-------+-------------+-----------------+------+-----+---------+----------------+---------------------------------+---------+</span><br><span class="line">| Field | Type        | Collation       | Null | Key | Default | Extra          | Privileges                      | Comment |</span><br><span class="line">+-------+-------------+-----------------+------+-----+---------+----------------+---------------------------------+---------+</span><br><span class="line">| id    | int(11)     | NULL            | NO   | MUL | NULL    | auto_increment | select,insert,update,references |         |</span><br><span class="line">| name  | varchar(10) | utf8_general_ci | YES  |     | NULL    |                | select,insert,update,references |         |</span><br><span class="line">+-------+-------------+-----------------+------+-----+---------+----------------+---------------------------------+---------+</span><br></pre></td></tr></table></figure>
<h3 id="Statement_base"><a href="#Statement_base" class="headerlink" title="Statement base"></a>Statement base</h3><p>デフォルトのフォーマット(MySQL5.6まで)。データやテーブル変更の実際に実行されたSQL文をログとして記録する。<br>Non-Deterministicということで、Unsafeとなる。<br>つまりレプリケーションのスレーブ側のサーバーでログを元に同じSQLを実行しても<br>同じになるとは限らないため。</p>
<p><a href="https://dev.mysql.com/doc/refman/5.6/ja/replication-sbr-rbr.html" target="_blank" rel="external">https://dev.mysql.com/doc/refman/5.6/ja/replication-sbr-rbr.html</a></p>
<p>実際にtableに値を追加してバイナリログを確認していく。</p>
<p>insertしてみる</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># set statement</span></span><br><span class="line">SET binlog_format = <span class="string">'STATEMENT'</span>;</span><br><span class="line"></span><br><span class="line">SHOW variables LIKE <span class="string">"binlog_format"</span>;</span><br><span class="line">+---------------+-----------+</span><br><span class="line">| Variable_name | Value     |</span><br><span class="line">+---------------+-----------+</span><br><span class="line">| binlog_format | STATEMENT |</span><br><span class="line">+---------------+-----------+</span><br><span class="line"></span><br><span class="line">FLUSH LOGS;</span><br><span class="line">Query OK, 0 rows affected (0.07 sec)</span><br><span class="line"></span><br><span class="line"> SHOW MASTER STATUS;</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| mysql-bin.000001 |      120 |              |                  |                   |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># insert</span></span><br><span class="line">INSERT INTO personal(name) VALUES(<span class="string">'tom'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># show binlog</span></span><br><span class="line">mysqlbinlog /usr/<span class="built_in">local</span>/var/mysql/mysql-bin.000001</span><br><span class="line"></span><br><span class="line">BEGIN</span><br><span class="line">/*!*/;</span><br><span class="line"><span class="comment"># at 199</span></span><br><span class="line"><span class="comment"># at 231</span></span><br><span class="line"><span class="comment">#151205 20:54:19 server id 1  end_log_pos 231 CRC32 0x40b495c3  Intvar</span></span><br><span class="line">SET INSERT_ID=1/*!*/;</span><br><span class="line"><span class="comment">#151205 20:54:19 server id 1  end_log_pos 345 CRC32 0x9668f30b  Query   thread_id=1 exec_time=0 error_code=0</span></span><br><span class="line">use `<span class="built_in">test</span>`/*!*/;</span><br><span class="line">SET TIMESTAMP=1449316459/*!*/;</span><br><span class="line">INSERT INTO personal(name) VALUES(<span class="string">'tom'</span>)</span><br><span class="line">/*!*/;</span><br><span class="line"><span class="comment"># at 345</span></span><br><span class="line"><span class="comment">#151205 20:54:19 server id 1  end_log_pos 376 CRC32 0x2247f106  Xid = 8</span></span><br><span class="line">COMMIT/*!*/;</span><br></pre></td></tr></table></figure>
<p>ログファイルはそれぞれ以下のような項目がある。</p>
<table>
<thead>
<tr>
<th>項目</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>at</td>
<td>バイナリファイル内でのオフセット</td>
</tr>
<tr>
<td>server id</td>
<td>ステートメントが実行されたサーバー</td>
</tr>
<tr>
<td>end_log_pos</td>
<td>次のイベントが開始される位置</td>
</tr>
<tr>
<td>thread_id</td>
<td>実行したスレッド</td>
</tr>
<tr>
<td>exec_time</td>
<td>実行時間</td>
</tr>
<tr>
<td>error_code</td>
<td>イベントの実行結果(0はエラーなし)</td>
</tr>
</tbody>
</table>
<p>続いてupdateしてみる</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># update</span></span><br><span class="line">UPDATE personal SET name=<span class="string">'tommy'</span> WHERE id = 1;</span><br><span class="line"></span><br><span class="line"><span class="comment"># show binlog</span></span><br><span class="line">mysqlbinlog /usr/<span class="built_in">local</span>/var/mysql/mysql-bin.000001</span><br><span class="line"></span><br><span class="line"><span class="comment"># at 376</span></span><br><span class="line"><span class="comment">#151205 20:56:39 server id 1  end_log_pos 455 CRC32 0x852a4061  Query   thread_id=1 exec_time=0 error_code=0</span></span><br><span class="line">SET TIMESTAMP=1449319780/*!*/;</span><br><span class="line">BEGIN</span><br><span class="line">/*!*/;</span><br><span class="line"><span class="comment"># at 455</span></span><br><span class="line"><span class="comment">#151205 20:56:39 server id 1  end_log_pos 574 CRC32 0xc5128701  Query   thread_id=1 exec_time=0 error_code=0</span></span><br><span class="line">SET TIMESTAMP=1449319780/*!*/;</span><br><span class="line">UPDATE personal SET name=<span class="string">'tommy'</span> WHERE id = 1</span><br><span class="line">/*!*/;</span><br><span class="line"><span class="comment"># at 574</span></span><br><span class="line"><span class="comment">#151205 20:56:39 server id 1  end_log_pos 605 CRC32 0x9217061a  Xid = 9</span></span><br><span class="line">COMMIT/*!*/;</span><br></pre></td></tr></table></figure>
<p>変更のないように同じ値でupdateを試してみると</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># update</span></span><br><span class="line">UPDATE personal SET name=<span class="string">'tommy'</span> WHERE id = 1;</span><br><span class="line"></span><br><span class="line"><span class="comment"># at 605</span></span><br><span class="line"><span class="comment">#151205 20:58:12 server id 1  end_log_pos 684 CRC32 0x7bcd8a62  Query   thread_id=1 exec_time=0 error_code=0</span></span><br><span class="line">SET TIMESTAMP=1449319820/*!*/;</span><br><span class="line">BEGIN</span><br><span class="line">/*!*/;</span><br><span class="line"><span class="comment"># at 684</span></span><br><span class="line"><span class="comment">#151205 20:58:12 server id 1  end_log_pos 803 CRC32 0x132e24fc  Query   thread_id=1 exec_time=0 error_code=0</span></span><br><span class="line">SET TIMESTAMP=1449319820/*!*/;</span><br><span class="line">UPDATE personal SET name=<span class="string">'tommy'</span> WHERE id = 1</span><br><span class="line">/*!*/;</span><br><span class="line"><span class="comment"># at 803</span></span><br><span class="line"><span class="comment">#151205 20:58:12 server id 1  end_log_pos 834 CRC32 0xb3d62bb8  Xid = 10</span></span><br><span class="line">COMMIT/*!*/;</span><br></pre></td></tr></table></figure>
<p>STATEMENTは実行されたSQL文をロギングするので、値に変更がなくてもログが出力される。</p>
<h3 id="Row_base"><a href="#Row_base" class="headerlink" title="Row base"></a>Row base</h3><p>つづいてROWフォーマットで同じように試してみる。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SET binlog_format = <span class="string">'ROW'</span>;</span><br><span class="line">SHOW variables LIKE <span class="string">"binlog_format"</span>;</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| binlog_format | ROW   |</span><br><span class="line">+---------------+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>データをinsertする。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># insert</span></span><br><span class="line">INSERT INTO personal(name) VALUES(<span class="string">'tom'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># show binlog</span></span><br><span class="line">mysqlbinlog /usr/<span class="built_in">local</span>/var/mysql/mysql-bin.000001</span><br><span class="line"></span><br><span class="line"><span class="comment"># at 580</span></span><br><span class="line"><span class="comment">#151205 21:08:25 server id 1  end_log_pos 652 CRC32 0x629d7346  Query   thread_id=1 exec_time=0 error_code=0</span></span><br><span class="line">SET TIMESTAMP=1449321070/*!*/;</span><br><span class="line">BEGIN</span><br><span class="line">/*!*/;</span><br><span class="line"><span class="comment"># at 652</span></span><br><span class="line"><span class="comment">#151205 21:08:25 server id 1  end_log_pos 706 CRC32 0xb60de956  Table_map: `test`.`personal` mapped to number 70</span></span><br><span class="line"><span class="comment"># at 706</span></span><br><span class="line"><span class="comment">#151205 21:08:25 server id 1  end_log_pos 750 CRC32 0x5af605af  Write_rows: table id 70 flags: STMT_END_F</span></span><br><span class="line"></span><br><span class="line">BINLOG <span class="string">'</span><br><span class="line">buJiVhMBAAAANgAAAMICAAAAAEYAAAAAAAEABHRlc3QACHBlcnNvbmFsAAIDDwIeAAJW6Q22</span><br><span class="line">buJiVh4BAAAALAAAAO4CAAAAAEYAAAAAAAEAAgAC//wCAAAAA3Rvba8F9lo=</span><br><span class="line">'</span>/*!*/;</span><br><span class="line"><span class="comment"># at 750</span></span><br><span class="line"><span class="comment">#151205 21:08:25 server id 1  end_log_pos 781 CRC32 0x979d473d  Xid = 12</span></span><br><span class="line">COMMIT/*!*/;</span><br></pre></td></tr></table></figure>
<p>出力されるログはbase64エンコードされている。<br>オプションをつけて実行する。</p>
<p><strong>–base64-output</strong>でバイナリログのエントリを base-64 エンコードで出力できる。<br>DECODE-ROWSを指定して、-vオプションもつけることで行イベントをSQLステートメントとしてデコードできる。</p>
<p>詳細は<a href="http://dev.mysql.com/doc/refman/5.6/ja/mysqlbinlog.html#option_mysqlbinlog_base64-output" target="_blank" rel="external">このあたりを参考</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># show binlog</span></span><br><span class="line">mysqlbinlog /usr/<span class="built_in">local</span>/var/mysql/mysql-bin.000001 --base64-output=DECODE-ROWS -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># at 580</span></span><br><span class="line"><span class="comment">#151205 21:08:25 server id 1  end_log_pos 652 CRC32 0x629d7346  Query   thread_id=1 exec_time=0 error_code=0</span></span><br><span class="line">SET TIMESTAMP=1449321070/*!*/;</span><br><span class="line">BEGIN</span><br><span class="line">/*!*/;</span><br><span class="line"><span class="comment"># at 652</span></span><br><span class="line"><span class="comment">#151205 21:08:25 server id 1  end_log_pos 706 CRC32 0xb60de956  Table_map: `test`.`personal` mapped to number 70</span></span><br><span class="line"><span class="comment"># at 706</span></span><br><span class="line"><span class="comment">#151205 21:08:25 server id 1  end_log_pos 750 CRC32 0x5af605af  Write_rows: table id 70 flags: STMT_END_F</span></span><br><span class="line"><span class="comment">### INSERT INTO `test`.`personal`</span></span><br><span class="line"><span class="comment">### SET</span></span><br><span class="line"><span class="comment">###   @1=2</span></span><br><span class="line"><span class="comment">###   @2='tom'</span></span><br><span class="line"><span class="comment"># at 750</span></span><br><span class="line"><span class="comment">#151205 21:08:25 server id 1  end_log_pos 781 CRC32 0x979d473d  Xid = 12</span></span><br><span class="line">COMMIT/*!*/;</span><br></pre></td></tr></table></figure>
<p>updateしてみる</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># update</span></span><br><span class="line">UPDATE personal SET name=<span class="string">'tommy'</span> WHERE id = 1;</span><br><span class="line"></span><br><span class="line"><span class="comment"># show binlog</span></span><br><span class="line">mysqlbinlog /usr/<span class="built_in">local</span>/var/mysql/mysql-bin.000001 --base64-output=DECODE-ROWS -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># at 781</span></span><br><span class="line"><span class="comment">#151206 21:12:11 server id 1  end_log_pos 853 CRC32 0xf1228fc3  Query   thread_id=1 exec_time=0 error_code=0</span></span><br><span class="line">SET TIMESTAMP=1449368345/*!*/;</span><br><span class="line">BEGIN</span><br><span class="line">/*!*/;</span><br><span class="line"><span class="comment"># at 853</span></span><br><span class="line"><span class="comment">#151206 21:12:11 server id 1  end_log_pos 907 CRC32 0xa2ca1af1  Table_map: `test`.`personal` mapped to number 70</span></span><br><span class="line"><span class="comment"># at 907</span></span><br><span class="line"><span class="comment">#151206 21:12:11 server id 1  end_log_pos 963 CRC32 0xdfe4919c  Update_rows: table id 70 flags: STMT_END_F</span></span><br><span class="line"><span class="comment">### UPDATE `test`.`personal`</span></span><br><span class="line"><span class="comment">### WHERE</span></span><br><span class="line"><span class="comment">###   @1=1</span></span><br><span class="line"><span class="comment">###   @2='tom'</span></span><br><span class="line"><span class="comment">### SET</span></span><br><span class="line"><span class="comment">###   @1=1</span></span><br><span class="line"><span class="comment">###   @2='tommy'</span></span><br><span class="line"><span class="comment"># at 963</span></span><br><span class="line"><span class="comment">#151206 21:12:11 server id 1  end_log_pos 994 CRC32 0x81ba30c7  Xid = 16</span></span><br><span class="line">COMMIT/*!*/;</span><br></pre></td></tr></table></figure>
<p>同じ値でupdateする。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># update</span></span><br><span class="line">UPDATE personal SET name=<span class="string">'tommy'</span> WHERE id = 1;</span><br></pre></td></tr></table></figure>
<p>更新が発生してないのでログは出力されてない。</p>
<h3 id="Mixed_base"><a href="#Mixed_base" class="headerlink" title="Mixed base"></a>Mixed base</h3><p>最後にMIXEDを試してみる。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SET binlog_format = <span class="string">'MIXED'</span>;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">SHOW variables LIKE <span class="string">"binlog_format"</span>;</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| binlog_format | MIXED |</span><br><span class="line">+---------------+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>データをinsertする。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># insert</span></span><br><span class="line">INSERT INTO personal(name) VALUES(<span class="string">'tom'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># show binlog</span></span><br><span class="line">mysqlbinlog /usr/<span class="built_in">local</span>/var/mysql/mysql-bin.000001</span><br><span class="line"></span><br><span class="line"><span class="comment"># at 1198</span></span><br><span class="line"><span class="comment">#151206 21:14:35 server id 1  end_log_pos 1277 CRC32 0xe74bdeed     Query   thread_id=1 exec_time=0 error_code=0</span></span><br><span class="line">SET TIMESTAMP=1449374917/*!*/;</span><br><span class="line">BEGIN</span><br><span class="line">/*!*/;</span><br><span class="line"><span class="comment"># at 1277</span></span><br><span class="line"><span class="comment"># at 1309</span></span><br><span class="line"><span class="comment">#151206 21:14:35 server id 1  end_log_pos 1309 CRC32 0xd5a25039     Intvar</span></span><br><span class="line">SET INSERT_ID=3/*!*/;</span><br><span class="line"><span class="comment">#151206 21:14:35 server id 1  end_log_pos 1423 CRC32 0x2a2b7771     Query   thread_id=1 exec_time=0 error_code=0</span></span><br><span class="line">SET TIMESTAMP=1449374917/*!*/;</span><br><span class="line">INSERT INTO personal(name) VALUES(<span class="string">'tom'</span>)</span><br><span class="line">/*!*/;</span><br><span class="line"><span class="comment"># at 1423</span></span><br><span class="line"><span class="comment">#151206 21:14:35 server id 1  end_log_pos 1454 CRC32 0x83cb8b10     Xid = 23</span></span><br><span class="line">COMMIT/*!*/;</span><br></pre></td></tr></table></figure>
<p>STATEMENTと同様で実行したSQLの履歴がログに出力される。<br>updateする。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># update</span></span><br><span class="line">UPDATE personal SET name=<span class="string">'tommy'</span> WHERE id = 1;</span><br><span class="line"></span><br><span class="line"><span class="comment"># show binlog</span></span><br><span class="line">/*!*/;</span><br><span class="line"><span class="comment"># at 1732</span></span><br><span class="line"><span class="comment">#151206 21:16:48 server id 1  end_log_pos 1811 CRC32 0xd0ddade4     Query   thread_id=1 exec_time=0 error_code=0</span></span><br><span class="line">SET TIMESTAMP=1449375744/*!*/;</span><br><span class="line">BEGIN</span><br><span class="line">/*!*/;</span><br><span class="line"><span class="comment"># at 1811</span></span><br><span class="line"><span class="comment">#151206 21:16:48 server id 1  end_log_pos 1930 CRC32 0xb27b4345     Query   thread_id=1 exec_time=0 error_code=0</span></span><br><span class="line">SET TIMESTAMP=1449375744/*!*/;</span><br><span class="line">update personal <span class="built_in">set</span> name=<span class="string">'tommy'</span> <span class="built_in">where</span> id = 1</span><br><span class="line">/*!*/;</span><br><span class="line"><span class="comment"># at 1930</span></span><br><span class="line"><span class="comment">#151206 21:16:48 server id 1  end_log_pos 1961 CRC32 0x51bab152     Xid = 26</span></span><br><span class="line">COMMIT/*!*/;</span><br></pre></td></tr></table></figure>
<p>一部の関数を使った場合はROWフォーマットで出力される。<br>CURRENT_USER() を使って更新してみる。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># update</span></span><br><span class="line">UPDATE personal SET name=CURRENT_USER() WHERE id = 1;</span><br><span class="line"></span><br><span class="line"><span class="comment"># show binlog</span></span><br><span class="line">mysqlbinlog /usr/<span class="built_in">local</span>/var/mysql/mysql-bin.000006</span><br><span class="line"><span class="comment"># at 1961</span></span><br><span class="line"><span class="comment">#151206 21:18:04 server id 1  end_log_pos 2033 CRC32 0x62cb65dd     Query   thread_id=1 exec_time=0 error_code=0</span></span><br><span class="line">SET TIMESTAMP=1449376039/*!*/;</span><br><span class="line">BEGIN</span><br><span class="line">/*!*/;</span><br><span class="line"><span class="comment"># at 2033</span></span><br><span class="line"><span class="comment">#151206 21:18:04 server id 1  end_log_pos 2087 CRC32 0x6e57c961     Table_map: `test`.`personal` mapped to number 70</span></span><br><span class="line"><span class="comment"># at 2087</span></span><br><span class="line"><span class="comment">#151206 21:18:04 server id 1  end_log_pos 2150 CRC32 0x6a1d8b78     Update_rows: table id 70 flags: STMT_END_F</span></span><br><span class="line"></span><br><span class="line">BINLOG</span><br><span class="line">J7ljVhMBAAAANgAAACcIAAAAAEYAAAAAAAEABHRlc3QACHBlcnNvbmFsAAIDDwIeAAJhyVdu</span><br><span class="line">J7ljVh8BAAAAPwAAAGYIAAAAAEYAAAAAAAEAAgAC///8AwAAAAV0b21tefwDAAAACnJvb3RAbG9j</span><br><span class="line">YWx4ix1q</span><br><span class="line"><span class="string">'/*!*/;</span><br><span class="line"># at 2150</span><br><span class="line">#151206 21:18:04 server id 1  end_log_pos 2181 CRC32 0x12bf3230     Xid = 29</span><br><span class="line">COMMIT/*!*/;</span><br><span class="line"></span><br><span class="line"># decode base64 binlog</span><br><span class="line">mysqlbinlog /usr/local/var/mysql/mysql-bin.000001 --base64-output=DECODE-ROWS -v</span><br><span class="line"></span><br><span class="line"># at 1961</span><br><span class="line">#151206 21:18:04 server id 1  end_log_pos 2033 CRC32 0x62cb65dd     Query   thread_id=1 exec_time=0 error_code=0</span><br><span class="line">SET TIMESTAMP=1449376039/*!*/;</span><br><span class="line">BEGIN</span><br><span class="line">/*!*/;</span><br><span class="line"># at 2033</span><br><span class="line">#151206 21:18:04 server id 1  end_log_pos 2087 CRC32 0x6e57c961     Table_map: `test`.`personal` mapped to number 70</span><br><span class="line"># at 2087</span><br><span class="line">#151206 21:18:04 server id 1  end_log_pos 2150 CRC32 0x6a1d8b78     Update_rows: table id 70 flags: STMT_END_F</span><br><span class="line">### UPDATE `test`.`personal`</span><br><span class="line">### WHERE</span><br><span class="line">###   @1=1</span><br><span class="line">###   @2='</span>tommy<span class="string">'</span><br><span class="line">### SET</span><br><span class="line">###   @1=1</span><br><span class="line">###   @2='</span>root@<span class="built_in">local</span><span class="string">'</span><br><span class="line"># at 2150</span><br><span class="line">#151206 21:18:04 server id 1  end_log_pos 2181 CRC32 0x12bf3230     Xid = 29</span><br><span class="line">COMMIT/*!*/;</span></span><br></pre></td></tr></table></figure>
<p>となりROWベースとなっていることがわかる。</p>
<h3 id="u307E_u3068_u3081"><a href="#u307E_u3068_u3081" class="headerlink" title="まとめ"></a>まとめ</h3><p>STATEMENTは実行したSQL文がログに記載され、エンコードされていないためサイズも小さく、ログも読みづらい。<br>反面 Non-Deterministic なので、必ずしも同じクエリを実行しても同じ結果が得られるわけでない。<br>それに対してMIXED、ROWはサイズは大きくなるが、結果が異なってくるということはなく安全である。</p>
<p>デフォルトでMIXEDとかROWとかにした方がいいのじゃないかと思ってたけど、<br><a href="http://dev.mysql.com/doc/refman/5.7/en/replication-options-binary-log.html#sysvar_binlog_format" target="_blank" rel="external">MySQL 5.7.7からはdefaultがROW</a>になったようだった。</p>
<h4 id="u53C2_u8003_u306B_u3057_u305F_u30DA_u30FC_u30B8"><a href="#u53C2_u8003_u306B_u3057_u305F_u30DA_u30FC_u30B8" class="headerlink" title="参考にしたページ"></a>参考にしたページ</h4><p><a href="http://dev.mysql.com/doc/refman/5.6/ja/mysqlbinlog.html" target="_blank" rel="external">4.6.8 mysqlbinlog — バイナリログファイルを処理するためのユーティリティー</a><br><a href="https://mariadb.com/kb/en/mariadb/binary-log-formats/" target="_blank" rel="external">MariaDB Binary Log Formats</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>とあるアプリケーションをレンタルサーバーに設置しようとした際に、<br><a href="https://mariadb.com/">MariaDB</a>が以下のようなエラーを吐いていた。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Unsafe statement written to the binary log using statement format</span><br><span class="line">since BINLOG_FORMAT = STATEMENT. Statement is unsafe because it</span><br><span class="line">invokes a trigger or a stored function that inserts into an</span><br><span class="line">AUTO_INCREMENT column. Inserted values cannot be logged correctly.</span><br></pre></td></tr></table></figure>
<p>バイナリログフォーマットがSTATEMENTだと安全でないのでよろしくないらしい。<br>STATEMENTだと安全でないということはどういうことか。少し試してみた。</p>]]>
    
    </summary>
    
      <category term="memo" scheme="http://blog.kazu69.net/categories/memo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[EFK(Elasticsearch + Fluentd + Kibana)をDocker-Composeで試してみた]]></title>
    <link href="http://blog.kazu69.net/2015/11/13/create-efk-with-docker/"/>
    <id>http://blog.kazu69.net/2015/11/13/create-efk-with-docker/</id>
    <published>2015-11-13T13:44:53.000Z</published>
    <updated>2015-11-24T16:05:57.000Z</updated>
    <content type="html"><![CDATA[<p>なかなか試せなかったログ収集・解析周りのツールを周回遅れで軽く試してみた。<br>Docker 1.8 から<a href="http://docs.docker.com/engine/reference/logging/fluentd/" target="_blank" rel="external">Fluentdもlog driver</a>に追加されているので、これを使って簡単なサンプルを構築した。</p>
<a id="more"></a>
<h2 id="u69CB_u6210"><a href="#u69CB_u6210" class="headerlink" title="構成"></a>構成</h2><p>適当なnodeJSアプリケーションのフロントにnginxを立たせて、<br>収集したログをtd-agentで、Fluentdのログ収集コンテナに24224ポートで転送する。<br>あとはElasticsearch、Kibanaで解析・表示する。</p>
<p>アプリケーションからのログ転送はDockerのlog-driverオプションを使うので、td-agentの導入を省けた。<br><a href="https://github.com/fluent/fluentd-docker-image" target="_blank" rel="external">Fluentd</a>、<a href="https://github.com/dockerfile/elasticsearch" target="_blank" rel="external">Elasticsearch</a>、<a href="https://github.com/eliotk/docker-kibana" target="_blank" rel="external">Kibana</a>はそれぞれオフィシャルのイメージがあるので、そちらを活用した。<br>Elasticsearchは9200ポート、kibanaは5601ポートを使った。</p>
<h2 id="u30ED_u30B0_u53CE_u96C6_u30FB_u89E3_u6790_u57FA_u76E4_u306E_u30BB_u30C3_u30C8_u30A2_u30C3_u30D7"><a href="#u30ED_u30B0_u53CE_u96C6_u30FB_u89E3_u6790_u57FA_u76E4_u306E_u30BB_u30C3_u30C8_u30A2_u30C3_u30D7" class="headerlink" title="ログ収集・解析基盤のセットアップ"></a>ログ収集・解析基盤のセットアップ</h2><h3 id="Fluentd"><a href="#Fluentd" class="headerlink" title="Fluentd"></a>Fluentd</h3>
<script src="https://gist-it.appspot.com/github/kazu69/docker-efk/blob/master/fluentd/Dockerfile"></script>

<p>fluentdの設定はログをElasticsearch(9200ポート)に転送している。<br>forwardで転送されてきたログでdockerというタグのついたものを9200ポートで送信している。<br>logstash_formatの設定は出力形式、これがfalseの場合kibanaで解析する際に@timestampフィールドが作成されないようで時系列で集計できない。</p>

<script src="https://gist-it.appspot.com/github/kazu69/docker-efk/blob/master/fluentd/fluent.conf"></script>

<h3 id="kibana"><a href="#kibana" class="headerlink" title="kibana"></a>kibana</h3><p>5601ポートでアクセスすることで解析画面を表示できる。<br>これはどちらかというと設定より使い方を習得する方が大変そうな。</p>
<h2 id="docker-compose_u306E_u30B3_u30F3_u30C6_u30CA_u306E_u30D8_u30EB_u30B9_u30C1_u30A7_u30C3_u30AF"><a href="#docker-compose_u306E_u30B3_u30F3_u30C6_u30CA_u306E_u30D8_u30EB_u30B9_u30C1_u30A7_u30C3_u30AF" class="headerlink" title="docker-composeのコンテナのヘルスチェック"></a>docker-composeのコンテナのヘルスチェック</h2><p>docker-composeを使った際に、各コンテナとの疎通確認にncコマンドを使っている。そのため、ほとんどのentrypoint.shファイルの内容がほとんど同じになってしまった。</p>

<script src="https://gist-it.appspot.com/github/kazu69/docker-efk/blob/master/fluentd/entrypoint.sh"></script>

<p>コンテナ間の依存を解消する方法がいまいちわかってないのでこのような手法をとったのだが、もっといい方法がありそう。<br><a href="https://github.com/docker/compose/pull/686" target="_blank" rel="external">docker-compose issue#686</a>にあるようなので、今後解決されるかも。</p>
<h2 id="u8D77_u52D5_u3057_u3066_u307F_u308B"><a href="#u8D77_u52D5_u3057_u3066_u307F_u308B" class="headerlink" title="起動してみる"></a>起動してみる</h2><script src="//gist.github.com/kazu69/84e383c0dab2e115352c.js?file=exec.sh"></script>
<p>kibanaにアクセスすると</p>
<p><img src="https://gist.githubusercontent.com/kazu69/84e383c0dab2e115352c/raw/3602e3920c3021754b7a8bda17f8b6505cd49b6d/1.png" alt=""></p>
<p>logstash形式のものをフィルタリング</p>
<p><img src="https://gist.githubusercontent.com/kazu69/84e383c0dab2e115352c/raw/3602e3920c3021754b7a8bda17f8b6505cd49b6d/2.png" alt=""></p>
<p>ということで、とりあえず最小限の環境は構築できた。</p>
<p>今回作成したサンプル <a href="https://github.com/kazu69/docker-efk" target="_blank" rel="external">kazu69/docker-efk</a></p>
<h3 id="u53C2_u8003_u306B_u3057_u305F_u30DA_u30FC_u30B8"><a href="#u53C2_u8003_u306B_u3057_u305F_u30DA_u30FC_u30B8" class="headerlink" title="参考にしたページ"></a>参考にしたページ</h3><p><a href="http://stackoverflow.com/questions/31212547/passing-bash-code-through-the-environment-for-docker-compose/" target="_blank" rel="external">Passing bash code through the environment (for docker-compose)</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>なかなか試せなかったログ収集・解析周りのツールを周回遅れで軽く試してみた。<br>Docker 1.8 から<a href="http://docs.docker.com/engine/reference/logging/fluentd/">Fluentdもlog driver</a>に追加されているので、これを使って簡単なサンプルを構築した。</p>]]>
    
    </summary>
    
      <category term="web" scheme="http://blog.kazu69.net/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[active recordでtinyint(1)がbooleanではない形式を扱う]]></title>
    <link href="http://blog.kazu69.net/2015/10/22/active-record-tinyint/"/>
    <id>http://blog.kazu69.net/2015/10/22/active-record-tinyint/</id>
    <published>2015-10-22T09:17:13.000Z</published>
    <updated>2015-11-25T12:57:53.000Z</updated>
    <content type="html"><![CDATA[<p>ActiveRecordを使っていて、tinyint(1)なレコードの取り扱いにちょっとハマったので備忘録。</p>
<a id="more"></a>
<p>MySQLでtinyint(1)はbooleanと同じなので 0 か 1 しかとらないはずだが、<br>今回はなぜか2なる値があり、常にfalseとなっていた。</p>
<p>これは<a href="http://apidock.com/rails/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter/emulate_booleans/class" target="_blank" rel="external">ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter#emulate_booleans</a>が使われれるため。</p>
<p>あまりないけど、こういう場合は以下の方法で解決出来る。</p>
<p>Railsアプリケーション全体でこの設定を使わない場合</p>
<script src="//gist.github.com/kazu69/da4db6ba0b96673840a5.js?file=application.rb"></script>
<p>または、Model単位ではキャストする</p>
<script src="//gist.github.com/kazu69/da4db6ba0b96673840a5.js?file=example_model.rb"></script>
<p>ちゃんとソースにコメント書いてあるんで比較的常識的なことだったんですね…。</p>
<p>参考にしたページ<br><a href="https://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb#L107-L116" target="_blank" rel="external">rails/activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb</a><br><a href="https://github.com/rails/rails/blob/4-2-stable/activerecord/lib/active_record/attributes.rb#L50-L52" target="_blank" rel="external">rails/activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>ActiveRecordを使っていて、tinyint(1)なレコードの取り扱いにちょっとハマったので備忘録。</p>]]>
    
    </summary>
    
      <category term="ruby" scheme="http://blog.kazu69.net/categories/ruby/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[stackprofを使って、Rspecのテストのパフォーマンス改善]]></title>
    <link href="http://blog.kazu69.net/2015/10/20/use-stackprof-improve-performance-of-rspec/"/>
    <id>http://blog.kazu69.net/2015/10/20/use-stackprof-improve-performance-of-rspec/</id>
    <published>2015-10-20T13:58:38.000Z</published>
    <updated>2015-11-24T15:05:57.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://github.com/tmm1/stackprof" target="_blank" rel="external">stackprof</a> を使えばrspecのプロファイリングが出来る戸言うことを知ったので、<br>早速テストでためしてみた。</p>
<a id="more"></a>
<p>Gemfileに追加して</p>
<script src="//gist.github.com/kazu69/8628e1ed92533fd61881.js?file=Gemfile"></script>
<p>そしてbundle install。</p>
<p>around hookでテストの開始前後での時間を計測します。<br>stackprofの設定は環境変数で渡します。</p>
<p>ということで、いかのようにspec_helper.rbに追加。</p>
<script src="//gist.github.com/kazu69/8628e1ed92533fd61881.js?file=spec_helper.rb"></script>
<p>そして実行</p>
<script src="//gist.github.com/kazu69/8628e1ed92533fd61881.js?file=run.sh"></script>
<p>指定したディレクトリにプロフファイリング結果がdumpされる</p>
<script src="//gist.github.com/kazu69/8628e1ed92533fd61881.js?file=ls.sh"></script>
<p>プロファイル結果を分析</p>
<script src="//gist.github.com/kazu69/8628e1ed92533fd61881.js?file=profile.sh"></script>
<p>この場合 ActiveSupport::Callbacks#run_callbacks が重そう。</p>
<p>こんな感じで重い箇所を洗い出して改善していける。</p>
<p>参考にしたページ<br><a href="http://blog.iempire.ru/2015/10/13/profiling-specs/" target="_blank" rel="external">Profiling RSpec examples with Stackprof</a><br><a href="http://spring-mt.hatenablog.com/entry/2015/01/24/112454" target="_blank" rel="external">railsアプリでstackprofを使ってボトルネックを探す + JSON::Schema(2.2.1)の高速化</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://github.com/tmm1/stackprof">stackprof</a> を使えばrspecのプロファイリングが出来る戸言うことを知ったので、<br>早速テストでためしてみた。</p>]]>
    
    </summary>
    
      <category term="ruby" scheme="http://blog.kazu69.net/categories/ruby/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[nginScriptを試してみた]]></title>
    <link href="http://blog.kazu69.net/2015/10/18/tried-nginscript/"/>
    <id>http://blog.kazu69.net/2015/10/18/tried-nginscript/</id>
    <published>2015-10-18T14:40:20.000Z</published>
    <updated>2015-10-26T16:01:08.000Z</updated>
    <content type="html"><![CDATA[<p>nginx上で動作するJavaScript仮想マシンである、<a href="https://www.nginx.com/blog/launching-nginscript-and-looking-ahead/" target="_blank" rel="external">nginScript</a> なるものがリリースされた。<br>(まだプレビュー版とのことだが)</p>
<p>これはリクエスト処理の実行時に評価され、特定のリクエストに対してnginxの内部処理をを調整することが可能になる。っぽい。</p>
<p><a href="https://www.nginx.com/resources/wiki/modules/lua/" target="_blank" rel="external">Lua</a>や<a href="https://github.com/matsumoto-r/ngx_mruby" target="_blank" rel="external">ngx_mruby</a>と同じような感じで使えるのようだ。</p>
<a id="more"></a>
<p><a href="https://www.nginx.com/resources/wiki/nginScript/" target="_blank" rel="external">nginScriptのwiki</a>を参考にDocker + docker-machineで簡単に試してみた。</p>
<h2 id="install_and_build_nginx"><a href="#install_and_build_nginx" class="headerlink" title="install and build nginx"></a>install and build nginx</h2><p><a href="http://nginx.org/en/download.html" target="_blank" rel="external">nginx: download</a>から最新のバージョンを取得する。<br>またnginScriptはオプションとして提供されているので、<a href="http://hg.nginx.org/" target="_blank" rel="external">nginxのMercurial</a>から取得する必要がある。</p>
<script src="//gist.github.com/kazu69/d531eea15e20201c0742.js?file=Dockerfile"></script>
<p>これを適当な感じでbuild</p>
<script src="//gist.github.com/kazu69/d531eea15e20201c0742.js?file=build.sh"></script>
<h2 id="nginScript"><a href="#nginScript" class="headerlink" title="nginScript"></a>nginScript</h2><p>ちなみにnginx.confは以下のようになっている</p>
<script src="//gist.github.com/kazu69/d531eea15e20201c0742.js?file=nginx.conf"></script>
<h3 id="js_run"><a href="#js_run" class="headerlink" title="js_run"></a>js_run</h3><p>nginScriptはlocationごとに評価され、実行される。<br>locationディレクティブでnginScriptを利用する際はjs_run で実行する必要がある。</p>
<script src="//gist.github.com/kazu69/d531eea15e20201c0742.js?file=js_run.sh"></script>
<h3 id="js_set"><a href="#js_set" class="headerlink" title="js_set"></a>js_set</h3><p>また、JavaScriptを使い内部変数を定義することもできる。<br>その際はhttpディレクティブに設定を書く必要がある。</p>
<script src="//gist.github.com/kazu69/d531eea15e20201c0742.js?file=js_set.sh"></script>
<h3 id="24r_28_u30EA_u30AF_u30A8_u30B9_u30C8_u30AA_u30D6_u30B8_u30A7_u30AF_u30C8_29"><a href="#24r_28_u30EA_u30AF_u30A8_u30B9_u30C8_u30AA_u30D6_u30B8_u30A7_u30AF_u30C8_29" class="headerlink" title="$r(リクエストオブジェクト)"></a>$r(リクエストオブジェクト)</h3><p>その他、リクエストの内部変数として $rがJavaScriptオブジェクトとして利用できる。<br>$rはsendHeader(),send(),finish() というメソッドが現在のところ定義されており、これらを利用してレスポンスを返すことができる。</p>
<h3 id="u30EA_u30AF_u30A8_u30B9_u30C8_u30D1_u30E9_u30E1_u30FC_u30BF"><a href="#u30EA_u30AF_u30A8_u30B9_u30C8_u30D1_u30E9_u30E1_u30FC_u30BF" class="headerlink" title="リクエストパラメータ"></a>リクエストパラメータ</h3><p>$r.args にJavaScriptのオブジェクトとして格納されている。</p>
<p>nginScriptはECMA標準準拠というわけではないようだが、基本的なことはできそう。<br>適当な関数を定義して評価することや、カスタムヘッダーを追加することなどはできた。</p>
<script src="//gist.github.com/kazu69/d531eea15e20201c0742.js?file=function.sh"></script>
<p>ということで、ほとんど<a href="http://hg.nginx.org/njs/file/tip/README" target="_blank" rel="external">Readme</a> をそのまま試したことになるけど、<br>いまのところlocationディレクティブにhookして、リクエスト、レスポンスをJavaScriptで操作できる位という感じだった。</p>
<p>参考にしたページ<br><a href="https://www.nginx.com/resources/wiki/nginScript/" target="_blank" rel="external">nginx Wiki documentation</a><br><a href="http://hg.nginx.org/njs/file/11d4d66851ed/README?_ga=1.105907269.772607199.1445353842" target="_blank" rel="external">README</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>nginx上で動作するJavaScript仮想マシンである、<a href="https://www.nginx.com/blog/launching-nginscript-and-looking-ahead/">nginScript</a> なるものがリリースされた。<br>(まだプレビュー版とのことだが)</p>
<p>これはリクエスト処理の実行時に評価され、特定のリクエストに対してnginxの内部処理をを調整することが可能になる。っぽい。</p>
<p><a href="https://www.nginx.com/resources/wiki/modules/lua/">Lua</a>や<a href="https://github.com/matsumoto-r/ngx_mruby">ngx_mruby</a>と同じような感じで使えるのようだ。</p>]]>
    
    </summary>
    
      <category term="nginx" scheme="http://blog.kazu69.net/categories/nginx/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Subresource Integrityについて調べた]]></title>
    <link href="http://blog.kazu69.net/2015/10/01/check-for-subresource-integrity/"/>
    <id>http://blog.kazu69.net/2015/10/01/check-for-subresource-integrity/</id>
    <published>2015-10-01T13:34:16.000Z</published>
    <updated>2015-10-13T15:24:22.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://githubengineering.com/subresource-integrity/" target="_blank" rel="external">Subresource Integrity</a> という記事をみて、<br>ちょっと興味深かったのでSubresource Integrityについて、軽く見てみた。</p>
<a id="more"></a>
<h2 id="Subresource_Integrity_u306F_u3069_u3046_u3044_u3046_u3082_u306E_u304B"><a href="#Subresource_Integrity_u306F_u3069_u3046_u3044_u3046_u3082_u306E_u304B" class="headerlink" title="Subresource Integrityはどういうものか"></a>Subresource Integrityはどういうものか</h2><p>おそらく、以下のようなもの。<br>ウェブアプリケーションでCDNをつかって、サブリソースを参照することは当たり前になっている。<br>しかし参照先のサブリソースが安全であるという保証はない。<br>もし、CDN経由で参照しているサブリソースが攻撃者により改変された場合、XSSの危険性が生じる。</p>
<p>これは、サブリソースの整合性をチェックする仕組みを導入することで、危険を回避できる。<br>Subresource Integrityとは、サブリースをSHA256, SHA512などでハッシュ化して、linkタグやscriptタグにintegrity属性として付与することで、整合性を確認できるようにしたもの。<br>もし、integrity属性がある場合は、ブラウザは読み込み時に整合性をチェックして一致した場合にのみロードされる。</p>
<h2 id="Subresource_Integrity_u3092_u8A66_u3059"><a href="#Subresource_Integrity_u3092_u8A66_u3059" class="headerlink" title="Subresource Integrityを試す"></a>Subresource Integrityを試す</h2><p><a href="https://developer.mozilla.org/ja/docs/Web/Security/Subresource_Integrity" target="_blank" rel="external">MDN Subresource Integrity</a>をみると<br>Chrome v45, Firefox v43 とのことだったので、Chrome Canaryで試した。</p>
<p>まず適当なファイルをsha256でハッシュ化して、integrity属性の値を生成する。</p>
<script src="//gist.github.com/kazu69/40a6d366181e79fbe703.js?file=create.sh"></script>
<p>あとはscriptタグなりlinkタグなりにintegrity属性を付与する</p>
<script src="//gist.github.com/kazu69/40a6d366181e79fbe703.js?file=index.html"></script>
<p>ちなみにscriptタグに付与しているcrossorigin属性は「anonymous」キーワードが指定された場合、<br>リクエストにはcookieやクライアントサイドのSSL証明書、HTTP認証などのユーザ認証情報は利用されなくなるらしい。</p>
<p>もし、コードが改変され整合性が確認できない場合は</p>
<script src="//gist.github.com/kazu69/40a6d366181e79fbe703.js?file=faild.js"></script>
<p>また、そのような場合に備えてfallbackを追加しておく</p>
<script src="//gist.github.com/kazu69/40a6d366181e79fbe703.js?file=fallback.html"></script>
<p>ハッシュ値は<a href="https://www.srihash.org/" target="_blank" rel="external">SRI Hash Generator</a>を使うと便利。<br>Wordpressでは<a href="https://wordpress.org/plugins/wp-sri/" target="_blank" rel="external">Subresource Integrity (SRI) Manager</a>などが使えそう。</p>
<p>参考しにたページ<br><a href="http://githubengineering.com/subresource-integrity/" target="_blank" rel="external">Subresource Integrity</a><br><a href="https://developer.mozilla.org/ja/docs/Web/Security/Subresource_Integrity" target="_blank" rel="external">Subresource Integrity</a><br><a href="https://developer.mozilla.org/ja/docs/Web/HTML/CORS_settings_attributes" target="_blank" rel="external">CORS 設定属性</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://githubengineering.com/subresource-integrity/">Subresource Integrity</a> という記事をみて、<br>ちょっと興味深かったのでSubresource Integrityについて、軽く見てみた。</p>]]>
    
    </summary>
    
      <category term="web" scheme="http://blog.kazu69.net/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScriptでMonadを試した]]></title>
    <link href="http://blog.kazu69.net/2015/09/28/try-monad-in-javascript/"/>
    <id>http://blog.kazu69.net/2015/09/28/try-monad-in-javascript/</id>
    <published>2015-09-28T12:42:01.000Z</published>
    <updated>2015-10-13T15:20:24.000Z</updated>
    <content type="html"><![CDATA[<p>最近、時間のあるときにすこしだけ<a href="https://www.haskell.org/" target="_blank" rel="external">Haskell</a>を触ったりもしていて、<br>Monadなるものに触れた。</p>
<p>そこで、それっぽいものをJavaScriptで試してみた。</p>
<a id="more"></a>
<p>確実に俄か感じではあるので、漠然としている理解であるけど。</p>
<h2 id="Monad_Laws"><a href="#Monad_Laws" class="headerlink" title="Monad Laws"></a>Monad Laws</h2><p>Monadと名乗るにはMonad則を満たさないといけない。<br>Monad則とは</p>
<ol>
<li>return x &gt;&gt;= f == f x</li>
<li>m &gt;&gt;= return == m</li>
<li>(m &gt;&gt;= f) &gt;&gt;= g == m &gt;&gt;= (\x -&gt; f x &gt;&gt;= g)</li>
</ol>
<p>mはMonadを指す。<br>(&gt;&gt;=) でMonadから値を取り出す。<br>return はMonadに値を渡す。</p>
<p>という認識でこの法則を読み取っている。<br>ということで、これを満たすことのできるclassを作成した。</p>
<script src="//gist.github.com/kazu69/96344bf338061ca75552.js?file=monad.class.js"></script>
<p>create(returnと同じ感じ)でMonadをインスタンス化して、<br>bind(&gt;&gt;==と同じ感じ)でMonadに値を渡し、結果を得る。というシンプルなクラス。</p>
<p>Qunitを使ってMonad則をテストする</p>
<script src="//gist.github.com/kazu69/96344bf338061ca75552.js?file=test.js"></script>
<p>認識が正しければ、Monad則を満たしたので、Monadである。</p>
<p>いろいろなMonadを試してみる</p>
<h3 id="Identity_Monad"><a href="#Identity_Monad" class="headerlink" title="Identity Monad"></a>Identity Monad</h3><script src="//gist.github.com/kazu69/96344bf338061ca75552.js?file=identity.js"></script>
<h3 id="Maybe_Monad"><a href="#Maybe_Monad" class="headerlink" title="Maybe Monad"></a>Maybe Monad</h3><script src="//gist.github.com/kazu69/96344bf338061ca75552.js?file=maybe.js"></script>
<h3 id="List_Monad"><a href="#List_Monad" class="headerlink" title="List Monad"></a>List Monad</h3><script src="//gist.github.com/kazu69/96344bf338061ca75552.js?file=list.js"></script>
<p>ということで、JavaScriptでためしてデザインパターンという認識をした。</p>
<p>参考にしたページ<br><a href="https://curiosity-driven.org/monads-in-javascript" target="_blank" rel="external">Monads in JavaScript</a><br><a href="http://qiita.com/7shi/items/547b6137d7a3c482fe68" target="_blank" rel="external">モナド則がちょっと分かった？</a><br><a href="http://labs.timedia.co.jp/2011/03/monad-you-already-know.html" target="_blank" rel="external">モナド: お前はもう知っている</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近、時間のあるときにすこしだけ<a href="https://www.haskell.org/">Haskell</a>を触ったりもしていて、<br>Monadなるものに触れた。</p>
<p>そこで、それっぽいものをJavaScriptで試してみた。</p>]]>
    
    </summary>
    
      <category term="javascript" scheme="http://blog.kazu69.net/categories/javascript/"/>
    
  </entry>
  
</feed>
