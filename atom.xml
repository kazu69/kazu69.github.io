<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[69log]]></title>
  <subtitle><![CDATA[福岡でwebの仕事をしています]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.kazu69.net/"/>
  <updated>2016-01-23T03:11:52.000Z</updated>
  <id>http://blog.kazu69.net/</id>
  
  <author>
    <name><![CDATA[kazu69]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[docker上のmysqlを使うにあたりよくあるパターン]]></title>
    <link href="http://blog.kazu69.net/2016/01/13/put-together-pattern-of-docker-mysql/"/>
    <id>http://blog.kazu69.net/2016/01/13/put-together-pattern-of-docker-mysql/</id>
    <published>2016-01-13T13:43:30.000Z</published>
    <updated>2016-01-23T03:11:52.000Z</updated>
    <content type="html"><![CDATA[<p>しばらく時間が空くと忘れてしまうので備忘録。<br>dockerでmysqlサーバーを立てた時にありがちなパターンをまとめた。</p>
<a id="more"></a>
<p>今回は<a href="https://hub.docker.com/_/mysql/" target="_blank" rel="external">mysqlの公式イメージ</a>を使う前提。</p>
<h2 id="u8D77_u52D5_u6642_u306B_u521D_u671F_u30C7_u30FC_u30BF_u3068_u30E6_u30FC_u30B6_u30FC_u8FFD_u52A0"><a href="#u8D77_u52D5_u6642_u306B_u521D_u671F_u30C7_u30FC_u30BF_u3068_u30E6_u30FC_u30B6_u30FC_u8FFD_u52A0" class="headerlink" title="起動時に初期データとユーザー追加"></a>起動時に初期データとユーザー追加</h2><p>起動時にテーブルを作成したり、データを追加したい時、ユーザーを追加しておきたい時。<br>例えば、以下のようなユーザー追加と初期データ追加用のsqlファイルを任意のディレクトリ(今回はinit.dにしておく)に置いておき、</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span><br><span class="line"></span></span><br><span class="line">CREATE_USER=<span class="string">'mysql'</span></span><br><span class="line">CREATE_PASSWORD=<span class="string">'secret'</span></span><br><span class="line">GRANT=<span class="string">"GRANT ALL ON <span class="variable">$&#123;MYSQL_DATABASE&#125;</span>.* TO <span class="variable">$&#123;CREATE_USER&#125;</span>@'%' IDENTIFIED BY <span class="variable">$&#123;CREATE_PASSWORD&#125;</span>; FLUSH PRIVILEGES"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$GRANT</span> | mysql -u <span class="variable">$&#123;MYSQL_ROOT_USER&#125;</span> -p<span class="variable">$&#123;MYSQL_ROOT_PASSWORD&#125;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`personal`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`personal`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`id`</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">LOCK</span> <span class="keyword">TABLES</span> <span class="string">`personal`</span> WRITE;</span><br><span class="line"><span class="comment">/*!40000 ALTER TABLE `personal` DISABLE KEYS */</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`personal`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>)</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="number">1</span>, <span class="string">'root@local'</span>) <span class="keyword">AS</span> tmp</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="string">`id`</span> <span class="keyword">FROM</span> <span class="string">`personal`</span> <span class="keyword">WHERE</span> <span class="string">`id`</span> = <span class="number">1</span></span><br><span class="line">) <span class="keyword">LIMIT</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>これをイメージの<strong>/docker-entrypoint-initdb.d</strong>に<strong>.sql</strong>や<strong>.sh</strong>ファイルとして配置してやることで<br>コンテナ起動時する前に実行される。(<a href="https://github.com/docker-library/mysql/pull/90" target="_blank" rel="external">Pull Request</a>)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># Dcokerfile</span><br><span class="line"></span><br><span class="line">FROM mysql</span><br><span class="line">EXPORT &apos;3306:3306&apos;</span><br><span class="line">ENV MYSQL_ROOT_USER root</span><br><span class="line">ENV MYSQL_ROOT_PASSWORD root</span><br><span class="line">ENV MYSQL_DATABASE sample_db</span><br><span class="line">ENV MYSQL_USER test</span><br><span class="line">ENV MYSQL_PASSWORD password</span><br><span class="line"></span><br><span class="line"># 初期データをコンテナ起動時に実行</span><br><span class="line">VOLUME ./init.d:/docker-entrypoint-initdb.d</span><br></pre></td></tr></table></figure>
<h2 id="u30C7_u30FC_u30BF_u3092_u6C38_u7D9A_u5316_u3059_u308B"><a href="#u30C7_u30FC_u30BF_u3092_u6C38_u7D9A_u5316_u3059_u308B" class="headerlink" title="データを永続化する"></a>データを永続化する</h2><p>Dockerfile内でVOLUMEコマンドを使いホストのディレクトリをコンテナにマウントしてやることで永続化できる。<br>ポータビリティ(可搬性)を求める場合はデータを格納専用のコンテナを別途用意すると良い。</p>
<p>データ格納専用コンテナのディレクトリをデータベース用のコンテナにマウントすることで実現できる。<br>データ自体は永続化されているので、データベース用のコンテナな使い捨てできる。</p>
<p>データを格納専用のコンテナを作成は必要最小限の機能があればいいので<a href="https://hub.docker.com/_/busybox/" target="_blank" rel="external">busybox</a>とかでいい。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># データを格納専用のコンテナ</span></span><br><span class="line"><span class="comment"># -v でマウントするディレクトリ指定</span></span><br><span class="line">docker run \</span><br><span class="line">    <span class="_">-d</span> \</span><br><span class="line">    --name storage \</span><br><span class="line">    -v /var/lib/mysql \</span><br><span class="line">    busybox</span><br><span class="line"></span><br><span class="line"><span class="comment"># --volumes-from オプションで格納専用のコンテナを参照</span></span><br><span class="line">docker run \</span><br><span class="line">    <span class="_">-d</span> \</span><br><span class="line">    --name database \</span><br><span class="line">    --volumes-from storage \</span><br><span class="line">    <span class="_">-e</span> MYSQL_ROOT_PASSWORD=root \</span><br><span class="line">    mysql</span><br></pre></td></tr></table></figure>
<p>docker-inspectで詳細を見ると</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line">    &#123;</span><br><span class="line">...</span><br><span class="line">    "Mounts": [</span><br><span class="line">        &#123;</span><br><span class="line">            "Name": "1b3136bd545afa6d76427edd27408f47...",</span><br><span class="line">            "Source": "/mnt/sda1/var/lib/docker/volumes/1b3136bd545afa6d76427edd27408f47612ea1cd1f7a1857d810b24ecae2c16d/_data",</span><br><span class="line">            "Destination": "/var/lib/mysql",</span><br><span class="line">            "Driver": "local",</span><br><span class="line">            "Mode": "",</span><br><span class="line">            "RW": true</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">...</span><br><span class="line">      "Image": "mysql",</span><br><span class="line">        "Volumes": &#123;</span><br><span class="line">            "/var/lib/mysql": &#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>実体は /mnt/sda1/var/lib/docker/volumes/ にあるようだ。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">docmer-machine ssh dev</span><br><span class="line">                        <span class="comment">##         .</span></span><br><span class="line">                  <span class="comment">## ## ##        ==</span></span><br><span class="line">               <span class="comment">## ## ## ## ##    ===</span></span><br><span class="line">           /<span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">"\___/ ===</span><br><span class="line">      ~~~ &#123;~~ ~~~~ ~~~ ~~~~ ~~~ ~ /  ===- ~~~</span><br><span class="line">           \______ o           __/</span><br><span class="line">             \    \         __/</span><br><span class="line">              \____\_______/</span><br><span class="line"> _                 _   ____     _            _</span><br><span class="line">| |__   ___   ___ | |_|___ \ __| | ___   ___| | _____ _ __</span><br><span class="line">| '_ \ / _ \ / _ \| __| __) / _` |/ _ \ / __| |/ / _ \ '__|</span><br><span class="line">| |_) | (_) | (_) | |_ / __/ (_| | (_) | (__|   &lt;  __/ |</span><br><span class="line">|_.__/ \___/ \___/ \__|_____\__,_|\___/ \___|_|\_\___|_|</span><br><span class="line">Boot2Docker version 1.9.1, build master : cef800b - Fri Nov 20 19:33:59 UTC 2015</span><br><span class="line"></span><br><span class="line">sudo ls /mnt/sda1/var/lib/docker/volumes/1b3136bd545afa6d76427edd27408f47612ea1cd1f7a1857d810b24ecae2c16d/_data</span><br><span class="line">auto.cnf            ib_buffer_pool      ib_logfile0         ib_logfile1         ibdata1             ibtmp1              mysql               performance_schema  sys</span></span><br></pre></td></tr></table></figure>
<p>あった。</p>
<h2 id="u30C7_u30FC_u30BF_u3092_u30D0_u30C3_u30AF_u30A2_u30C3_u30D7_u3059_u308B"><a href="#u30C7_u30FC_u30BF_u3092_u30D0_u30C3_u30AF_u30A2_u30C3_u30D7_u3059_u308B" class="headerlink" title="データをバックアップする"></a>データをバックアップする</h2><p>上記の方法で永続化したデータも、バックアップする必要があると思う。<br>この場合、データ格納専用コンテナのディレクトリとホストのディレクトリもマウントするコンテナを作成し、<br>データをホストディレクトに渡せばいいだけ。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm --volumes-from database -v $(<span class="built_in">pwd</span>):/backup busybox tar czvf /backup/archive.tar.gz /var/lib/mysql</span><br></pre></td></tr></table></figure>
<p>ということで、開発環境やCI環境のコンテナ化の時にMySQL環境作成時に思い出そう。<br><a href="https://github.com/kazu69/docker-mysql-pattern-sample" target="_blank" rel="external">今回使ったデータのまとめ</a></p>
<h4 id="u53C2_u8003_u306B_u3057_u305F_u30DA_u30FC_u30B8"><a href="#u53C2_u8003_u306B_u3057_u305F_u30DA_u30FC_u30B8" class="headerlink" title="参考にしたページ"></a>参考にしたページ</h4><p><a href="http://qiita.com/lciel/items/e21a4ede3bac7fb3ec5a" target="_blank" rel="external">Docker の Data Volume まわりを整理する</a><br><a href="https://docs.docker.com/engine/userguide/dockervolumes/#mount-a-host-directory-as-a-data-volume" target="_blank" rel="external">Mount a host directory as a data volume</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>しばらく時間が空くと忘れてしまうので備忘録。<br>dockerでmysqlサーバーを立てた時にありがちなパターンをまとめた。</p>]]>
    
    </summary>
    
      <category term="tec" scheme="http://blog.kazu69.net/categories/tec/"/>
    
      <category term="memo" scheme="http://blog.kazu69.net/categories/tec/memo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ビジュアルのRegression Test(回帰テスト)ツールを試してみた]]></title>
    <link href="http://blog.kazu69.net/2016/01/02/looking-css-regression-testing-tool/"/>
    <id>http://blog.kazu69.net/2016/01/02/looking-css-regression-testing-tool/</id>
    <published>2016-01-01T15:18:43.000Z</published>
    <updated>2016-01-11T15:28:35.000Z</updated>
    <content type="html"><![CDATA[<p>運用年数の長いウェブサービスでcssやhtmlのリファクタリングをするにあたって、ビジュアルのRegression test(回帰テスト)が必要となってきたので、導入するにあたりいくつかのツールを眺めてみた。</p>
<a id="more"></a>
<p>今回、ビジュアルのRegression testとしてcsscritic、BackstopJS、Succss、PhantomCSSを軽く触ってみた。</p>
<h2 id="csscritic"><a href="#csscritic" class="headerlink" title="csscritic"></a>csscritic</h2><blockquote>
<p>A lightweight tool for regression testing of Cascading Style Sheets</p>
</blockquote>
<p>とある通り、<a href="https://github.com/cburgmer/csscritic" target="_blank" rel="external">csscritic</a>はシンプルな設定でテストを実施することが可能。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i csscritic http-server --no-optional</span><br></pre></td></tr></table></figure>
<p>テスト対象となるhtml(test.html)を以下のようにする</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Page under test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span><br><span class="line">        .test &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">            vertical-align: top;</span><br><span class="line">            width: 204px;</span><br><span class="line">            height: 50px;</span><br><span class="line">            font-size: 90px;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">        .blue &#123;</span><br><span class="line">            background-color: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test blue"</span>&gt;</span></span><br><span class="line">        Blue</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>テスト用のhtmlファイル(RegressionRunner.html)を作成</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Regression Runner<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/csscritic/dist/csscritic.allinone.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span><br><span class="line">        window.onload = function() &#123;</span><br><span class="line">            csscritic</span><br><span class="line">                /* テストケースをlabel */</span><br><span class="line">                .component('Example test')</span><br><span class="line"></span><br><span class="line">                /* レポーターの設定 */</span><br><span class="line">                .add(&#123;</span><br><span class="line">                    url: 'test.html',</span><br><span class="line">                    desc: 'should look good'</span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line">                /* テストケースを追加 */</span><br><span class="line">                .addReporter(csscritic.NiceReporter())</span><br><span class="line"></span><br><span class="line">                /* テスト実行 */</span><br><span class="line">                .execute();</span><br><span class="line">        &#125;;</span><br><span class="line">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/cburgmer/csscritic/wiki/API" target="_blank" rel="external">APIはドキュメント</a>があるので必要に応じて参照。</p>
<p>RegressionRunner.htmlをブラウザで開くことでまず現在の表示状態を確認できる。<br>Chromeの場合<a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Same_origin_policy_for_JavaScript" target="_blank" rel="external">same-origin</a>の制限で表示できないので、ローカルサーバーを立てて表示する。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node_modules/.bin/http-server</span><br><span class="line">open http://localhost:8080//RegressionRunner.html</span><br></pre></td></tr></table></figure>
<p><img src="/images/2016/01/02/csscritic_first_run.png" alt=""></p>
<p>テスト対象のhtmlを<a href="http://phantomjs.org/" target="_blank" rel="external">PhantomJS</a>でレンダリングし、対象となる箇所を目視確認し、問題ない場合はacceptしていく。(htmlファイルの他に画像ファイルを指定することも可能)</p>
<p>このacceptした結果はローカルのIndexed DBに保持される。<br>再度ページを読込むと、前回レンダリング結果との比較を行う。ここで差分がある場合はfaildとなる。</p>
<p><img src="/images/2016/01/02/csscritic_success.png" alt=""></p>
<p>sama-originの制限や動的生成される場合などで、ローカルのコードベースでテストをできない時は、<br>proxyを使うか、screenshotの画像と比較するなどで対応すると良いらしい。</p>
<p>csscriticは簡単な設定で容易にRegression テストを導入できる。<br>Styleguideなどのドキュメントに導入するなどの活用ができそう。<br>基本的にローカルのstaticなコードに対してテストするので、それ以外の場合はひと手間かかる。</p>
<h2 id="BackstopJS"><a href="#BackstopJS" class="headerlink" title="BackstopJS"></a>BackstopJS</h2><p><a href="https://github.com/garris/BackstopJS" target="_blank" rel="external">BackstopJS</a>は複数のview portに対してRegressionテストを実行できるのが特徴。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># インストール</span></span><br><span class="line">npm i -D backstopjs</span><br><span class="line">npm i -g gulp phantomjs casperjs</span><br><span class="line"></span><br><span class="line"><span class="comment"># backstopjsのGulp Taskを実行する必要があるため</span></span><br><span class="line"><span class="built_in">cd</span> node_modules/backstopjs</span><br><span class="line"></span><br><span class="line"><span class="comment"># configファイル(backstop.json)生成</span></span><br><span class="line">gulp genConfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># bitmaps_reference に比較元になる現在のキャプチャを生成する</span></span><br><span class="line">gulp reference</span><br><span class="line"></span><br><span class="line"><span class="comment"># 変更した内容との比較がbitmaps_test/&lt;timestamp&gt;/に生成される</span></span><br><span class="line">gulp <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># レポーターを開く</span></span><br><span class="line">gulp openReport</span><br></pre></td></tr></table></figure>
<p>backstop.jsonは以下を使った。jsonの他に<a href="https://github.com/garris/BackstopJS/blob/master/test/configExample.js" target="_blank" rel="external">javascript</a>もつかえる様子。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"viewports"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"phone"</span>,</span><br><span class="line">      <span class="string">"width"</span>: <span class="number">320</span>,</span><br><span class="line">      <span class="string">"height"</span>: <span class="number">480</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"scenarios"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"label"</span>: <span class="string">"http://getbootstrap.com"</span>,</span><br><span class="line">      <span class="string">"url"</span>: <span class="string">"http://getbootstrap.com"</span>,</span><br><span class="line">      <span class="string">"hideSelectors"</span>: [],</span><br><span class="line">      <span class="string">"removeSelectors"</span>: [</span><br><span class="line">        <span class="string">"#carbonads-container"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"selectors"</span>: [</span><br><span class="line">        <span class="string">"header"</span>,</span><br><span class="line">        <span class="string">"main"</span>,</span><br><span class="line">        <span class="string">"footer"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"readyEvent"</span>: <span class="string">"backstopjs_ready"</span>,</span><br><span class="line">      <span class="string">"delay"</span>: <span class="number">500</span>,</span><br><span class="line">      <span class="string">"misMatchThreshold"</span> : <span class="number">0.1</span>,</span><br><span class="line">      <span class="string">"onReadyScript"</span>: <span class="string">"onReady.js"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"paths"</span>: &#123;</span><br><span class="line">    <span class="string">"bitmaps_reference"</span>: <span class="string">"../../backstop_data/bitmaps_reference"</span>,</span><br><span class="line">    <span class="string">"bitmaps_test"</span>: <span class="string">"../../backstop_data/bitmaps_test"</span>,</span><br><span class="line">    <span class="string">"compare_data"</span>: <span class="string">"../../backstop_data/bitmaps_test/compare.json"</span>,</span><br><span class="line">    <span class="string">"casper_scripts"</span>: <span class="string">"../../backstop_data/casper_scripts"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"engine"</span>: <span class="string">"phantomjs"</span>,</span><br><span class="line">  <span class="string">"report"</span>: [<span class="string">"CLI"</span>, <span class="string">"browser"</span>],</span><br><span class="line">  <span class="string">"cliExitOnFail"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"casperFlags"</span>: [],</span><br><span class="line">  <span class="string">"debug"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"port"</span>: <span class="number">3001</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>レポーターを開くとテスト結果とそれぞれの要素が表示される。</p>
<p><img src="/images/2016/01/02/backstopjs_reporter_result.png" alt=""></p>
<p><img src="/images/2016/01/02/backstopjs_reporter_element.png" alt=""></p>
<p>viewportsで複数のviewportのプロパティを指定することができる。<br>hideSelectorsは指定要素に visibility:hidden を適用する。これは広告など任意のコンテンツが表示される要素を非表示にする。<br>removeSelectorsは指定要素に display:none を適用する。未実装などの要素をテストしないようにする。<br>出力ファイルのパスの設定はpathsとなる。</p>
<p>BackstopJSはセットアップからテストの実施までインストールしたbackstopjsのgulpを実行する必要があるので、npm scriptsを作っておくとかで対応した。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"backstop-reference"</span>: <span class="string">"cd ./node_modules/backstopjs &amp;&amp; gulp reference"</span>,</span><br><span class="line">  <span class="string">"backstop-test"</span>: <span class="string">"cd ./node_modules/backstopjs &amp;&amp; gulp test"</span>,</span><br><span class="line">  <span class="string">"backstop-report"</span>: <span class="string">"cd ./node_modules/backstopjs &amp;&amp; gulp openReport"</span></span><br><span class="line">&#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>複数のviewportに対してテストをまとめて実行できる点は、レスポンシブサイトではすごく重宝しそう。<br>ツール自体はgulpへの依存度が大きく、すでにワークフローが確立しているプロジェクトなどでは導入の際に検討が必要となりそう。</p>
<h2 id="Succss"><a href="#Succss" class="headerlink" title="Succss"></a>Succss</h2><p><a href="https://github.com/B2F/Succss" target="_blank" rel="external">Succss</a> も導入の簡単なRegression test toolらしく、こちらは2015年にリリースされているので比較的新しい。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm i -g success</span><br><span class="line"></span><br><span class="line"><span class="comment"># 現在の状態のscrennshotを追加する</span></span><br><span class="line">succss add configuration.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 変更を比較する</span></span><br><span class="line">succss check configuration.js</span><br></pre></td></tr></table></figure>
<p>設定ファイル(configuration.js)は以下を使用した。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Succss.pages = &#123;</span><br><span class="line">  <span class="string">'homepage'</span>: &#123;</span><br><span class="line">    url:<span class="string">'succss.ifzenelse.net/'</span>,</span><br><span class="line">    directory:<span class="string">'screenshots/'</span>,</span><br><span class="line">    captures: &#123;</span><br><span class="line">      <span class="string">'header'</span>:</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">'before'</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">this</span>.click(<span class="string">'#logo-image'</span>);</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'... Waiting for color squares reinitialization'</span>);</span><br><span class="line">          <span class="keyword">this</span>.wait(<span class="number">900</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'Done!'</span>);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Succss.viewports = &#123;</span><br><span class="line">  <span class="string">'default'</span>: &#123;</span><br><span class="line">    width: <span class="number">320</span>,</span><br><span class="line">    height: <span class="number">240</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'mobile-landscape'</span>: &#123;</span><br><span class="line">    width: <span class="number">640</span>,</span><br><span class="line">    height: <span class="number">480</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>directoryはscrennshotの保存先ディレクトリ。<br>capturesで比較する要素css selectorsで指定できる。また関数を使うことも可能。</p>
<p><img src="/images/2016/01/02/succss_result.png" alt=""></p>
<p>Succssは設定がシンプルかつ複数のviewportに対してテストを実行でき、オプションも豊富である。<br>画像を比較するdiffツールに<a href="https://github.com/Huddle/Resemble.js" target="_blank" rel="external">Resemble.js</a>のほか<a href="https://github.com/HumbleSoftware/js-imagediff" target="_blank" rel="external">imagediff.js</a>も使うことができる点で他と違っている。</p>
<p>特定のタスクランナーに依存してないので既存のプロジェクトに導入しやすい感じがある。</p>
<h2 id="PhantomCSS"><a href="#PhantomCSS" class="headerlink" title="PhantomCSS"></a>PhantomCSS</h2><p><a href="https://github.com/Huddle/PhantomCSS" target="_blank" rel="external">PhantomCSS</a>は<a href="http://casperjs.org/" target="_blank" rel="external">CasperJS</a>モジュールとして機能するツール。</p>
<p>PhantomCSS自体のinitializeは<a href="https://github.com/Huddle/PhantomCSS/blob/master/demo/testsuite.js" target="_blank" rel="external">demo</a>を参照すると良さそう。</p>
<p>今回はdemoを使って軽く試してみる。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> phantomcss = <span class="built_in">require</span>(<span class="string">'phantomcss'</span>);</span><br><span class="line"></span><br><span class="line">casper.test.begin(<span class="string">'Coffee machine visual tests'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"> test </span>) </span>&#123;</span><br><span class="line">    phantomcss.init(&#123;</span><br><span class="line">        casper: casper,</span><br><span class="line">        screenshotRoot: <span class="string">'screenshots'</span>,</span><br><span class="line">        failedComparisonsRoot: <span class="string">'failures'</span>,</span><br><span class="line">        comparisonResultRoot: <span class="string">'results'</span>,</span><br><span class="line">        libraryRoot: <span class="string">'node_modules/phantomcss'</span>,</span><br><span class="line">        addLabelToFailedImage: <span class="literal">false</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    casper.on( <span class="string">'remote.message'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"> msg </span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.echo( msg );</span><br><span class="line">    &#125; )</span><br><span class="line"></span><br><span class="line">    casper.on( <span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"> err </span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.die( <span class="string">"PhantomJS has errored: "</span> + err );</span><br><span class="line">    &#125; );</span><br><span class="line"></span><br><span class="line">    casper.on( <span class="string">'resource.error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"> err </span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        casper.log( <span class="string">'Resource load error: '</span> + err, <span class="string">'warning'</span> );</span><br><span class="line">    &#125; );</span><br><span class="line"></span><br><span class="line">    casper.start(<span class="string">'coffeemachine.html'</span>);</span><br><span class="line">    casper.viewport( <span class="number">1024</span>, <span class="number">768</span> );</span><br><span class="line"></span><br><span class="line">    casper.then( <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        casper.click( <span class="string">'#coffee-machine-button'</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// wait for modal to fade-in </span></span><br><span class="line">        casper.waitForSelector( <span class="string">'#myModal:not([style*="display: none"])'</span>,</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">success</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                phantomcss.screenshot( <span class="string">'#myModal'</span>, <span class="string">'coffee machine dialog'</span> );</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                casper.test.fail( <span class="string">'Should see coffee machine'</span> );</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125; );</span><br><span class="line"></span><br><span class="line">    casper.then( <span class="function"><span class="keyword">function</span> <span class="title">now_check_the_screenshots</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        phantomcss.compareAll();</span><br><span class="line">    &#125; );</span><br><span class="line"></span><br><span class="line">    casper.run(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">'\nTHE END.'</span> );</span><br><span class="line">        casper.test.done();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 現状のscreenshotを生成</span></span><br><span class="line">casperjs <span class="built_in">test</span> test.js</span><br><span class="line">Test file: test.js</span><br><span class="line"><span class="comment"># Coffee machine visual tests</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">New screenshot at results/coffee machine dialog_0.png</span><br><span class="line"></span><br><span class="line">Must be your first time?</span><br><span class="line">Some screenshots have been generated <span class="keyword">in</span> the directory results</span><br><span class="line">This is your <span class="string">'baseline'</span>, check the images manually. If they<span class="string">'re wrong, delete the images.</span><br><span class="line">The next time you run these tests, new screenshots will be taken.  These screenshots will be compared to the original.</span><br><span class="line">If they are different, PhantomCSS will report a failure.</span><br><span class="line"></span><br><span class="line">THE END.</span><br><span class="line"></span><br><span class="line"># わざと差分を出して比較テストを行う</span><br><span class="line">asperjs test test.js</span><br><span class="line">Test file: test.js</span><br><span class="line"># Coffee machine visual tests</span><br><span class="line">Failure! Saved to failures/coffee machine dialog_0.fail.png</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">FAIL Visual change found for screenshot results/coffee machine dialog_0.png (8.65% mismatch)</span><br><span class="line">#    type: fail</span><br><span class="line">#    file: test.js</span><br><span class="line">#    subject: false</span><br><span class="line"></span><br><span class="line">PhantomCSS found 1 tests, 1 of them failed.</span><br><span class="line"></span><br><span class="line">PhantomCSS has created some images that try to show the difference (in the directory failures). Fuchsia colored pixels indicate a difference betwen the new and old screenshots.</span><br><span class="line"></span><br><span class="line">THE END.</span><br><span class="line">FAIL 1 test executed in 4.162s, 0 passed, 1 failed, 0 dubious, 0 skipped.</span><br><span class="line"></span><br><span class="line">Details for the 1 failed test:</span><br><span class="line"></span><br><span class="line">In test.js</span><br><span class="line">  Coffee machine visual tests</span><br><span class="line">    fail: Visual change found for screenshot results/coffee machine dialog_0.png (8.65% mismatch)</span></span><br></pre></td></tr></table></figure>
<p>差分が出た場合は以下のように差分が視覚的に確認できる。</p>
<p><img src="/images/2016/01/02/phantomcss_failer.png" alt=""></p>
<p>PhantomCSSはドキュメントを見る限りでは、オプションが色々とありCasperJSのテストが書ければなんとかなりそうな雰囲気。<br>既存のプロジェクトに導入しても十分活躍できそう。<br>複数の複雑な条件をテストする際はCasperJSのコードを頑張っていく感じになりそう。</p>
<h2 id="u307E_u3068_u3081"><a href="#u307E_u3068_u3081" class="headerlink" title="まとめ"></a>まとめ</h2><p>どれも基本的に PhantomJS + CasperJS でscreenshotを取得して、resemble.jsで画像を比較するパターンとなっている。<br>(<a href="https://slimerjs.org/" target="_blank" rel="external">slimerjs</a>もオプションで使える)<br>Regressionテストを導入する場合、プロジェクトによってどれを選択するのか判断しないといけなが、個人的には以下のように考えた。</p>
<p>既にstyleguideがある場合はcsscriticをstyleguideに導入するのは簡単なので良さそう。<br>Gulpを使っているプロジェクトで簡単に導入したいならBackstopJSは強力なのでこちらを選択する。<br>タスクランナーに依存しないで、シンプルに導入したいならSuccssで問題ない。<br>CasperJsでテストコード書くことが可能な場合は、複雑な条件でテストできるようにしたいならばPhantomCSSを選んでおくのが良さそう。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>運用年数の長いウェブサービスでcssやhtmlのリファクタリングをするにあたって、ビジュアルのRegression test(回帰テスト)が必要となってきたので、導入するにあたりいくつかのツールを眺めてみた。</p>]]>
    
    </summary>
    
      <category term="web" scheme="http://blog.kazu69.net/tags/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[mysqlのバイナリログのフォーマットを調べた]]></title>
    <link href="http://blog.kazu69.net/2015/12/01/examined-mysql-binlog-format/"/>
    <id>http://blog.kazu69.net/2015/12/01/examined-mysql-binlog-format/</id>
    <published>2015-12-01T10:19:09.000Z</published>
    <updated>2015-12-08T13:45:56.000Z</updated>
    <content type="html"><![CDATA[<p>とあるアプリケーションをレンタルサーバーに設置しようとした際に、<br><a href="https://mariadb.com/" target="_blank" rel="external">MariaDB</a>が以下のようなエラーを吐いていた。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Unsafe statement written to the binary log using statement format</span><br><span class="line">since BINLOG_FORMAT = STATEMENT. Statement is unsafe because it</span><br><span class="line">invokes a trigger or a stored function that inserts into an</span><br><span class="line">AUTO_INCREMENT column. Inserted values cannot be logged correctly.</span><br></pre></td></tr></table></figure>
<p>バイナリログフォーマットがSTATEMENTだと安全でないのでよろしくないらしい。<br>STATEMENTだと安全でないということはどういうことか。少し試してみた。</p>
<a id="more"></a>
<h2 id="u30D0_u30A4_u30CA_u30EA_u30ED_u30B0_u306B_u3064_u3044_u3066"><a href="#u30D0_u30A4_u30CA_u30EA_u30ED_u30B0_u306B_u3064_u3044_u3066" class="headerlink" title="バイナリログについて"></a>バイナリログについて</h2><p>RDBMSでいうところのトランザクションログをMySQLではバイナリログという。</p>
<p>バイナリログにはMySQLにおいてデータベースに対して</p>
<ul>
<li>トランザクションの開始および終了</li>
<li>値の挿入(INSERT)、値の更新(UPDATE)、削除(DELETE)</li>
<li>テーブル、インデックスの作成削除</li>
</ul>
<p>の履歴が保持されている。</p>
<p>トランザクションログはRDBMSによって異なり、以下に大別される。</p>
<table>
<thead>
<tr>
<th>トランザクションログ</th>
<th>概要</th>
</tr>
</thead>
<tbody>
<tr>
<td>論理ロギング</td>
<td>データベースに対する論理動作(SQL文)の変更履歴を管理</td>
</tr>
<tr>
<td>物理ロギング</td>
<td>変更があったデータの変更前のイメージを管理</td>
</tr>
</tbody>
</table>
<p>バイナリログはデフォルトでは生成されないのでmy.cnfに設定を追加する必要がある。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># grep my.cnf</span></span><br><span class="line">mysql --help | grep my.cnf</span><br><span class="line">touch /usr/<span class="built_in">local</span>/etc/my.cnf</span><br><span class="line"></span><br><span class="line">cat /usr/<span class="built_in">local</span>/etc/my.cnf</span><br></pre></td></tr></table></figure>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">log-bin</span>=mysql-bin</span><br></pre></td></tr></table></figure>
<p>設定することにより、/usr/local/var/mysql/mysql-bin.000001 のようにログファイルが生成される。<br>再起動などすると /usr/local/var/mysql/mysql-bin.000002 と新たなログファイルが生成される。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ls /usr/<span class="built_in">local</span>/var/mysql/</span><br><span class="line"></span><br><span class="line">mysql-bin.000001</span><br><span class="line"></span><br><span class="line">mysql.server restart</span><br><span class="line">Shutting down MySQL</span><br><span class="line">. SUCCESS!</span><br><span class="line">Starting MySQL</span><br><span class="line">. SUCCESS!</span><br><span class="line"></span><br><span class="line">ls /usr/<span class="built_in">local</span>/var/mysql/</span><br><span class="line"></span><br><span class="line">mysql-bin.000001</span><br><span class="line">mysql-bin.000002</span><br></pre></td></tr></table></figure>
<p>存在するログファイルは /usr/local/var/mysql/mysql-bin.index にリストアップされている。<br>ということで rm などでログだけ消すと次回起動時にエラーになる。mysql-bin.indexからも削除する必要が有る。</p>
<p>また、ログファイルは溜まっていく一方なので自動削除するためにmy.cnfに設定を追加。<br>expire_log_days でログを保持する期間を追加。(初期値は0で削除しない)<br>7日間保持するなら、以下のような感じ。</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">log-bin</span>=mysql-bin</span><br><span class="line"><span class="attr">expire_log_days</span> = <span class="number">7</span></span><br></pre></td></tr></table></figure>
<h2 id="u30D0_u30A4_u30CA_u30EA_u30ED_u30B0_u306E_u30D5_u30A9_u30FC_u30DE_u30C3_u30C8"><a href="#u30D0_u30A4_u30CA_u30EA_u30ED_u30B0_u306E_u30D5_u30A9_u30FC_u30DE_u30C3_u30C8" class="headerlink" title="バイナリログのフォーマット"></a>バイナリログのフォーマット</h2><p>バイナリログのフォーマットは3種類あり、それぞれ以下のようになっている。</p>
<table>
<thead>
<tr>
<th>フォーマット</th>
<th>特徴</th>
</tr>
</thead>
<tbody>
<tr>
<td>STATEMENT</td>
<td>実行されたSQLに基づいてロギング</td>
</tr>
<tr>
<td>ROW</td>
<td>行ベースに基づきロギング</td>
</tr>
<tr>
<td>MIXED</td>
<td>基本はSTATEMENTだが特定の条件では行ベースでロギングする</td>
</tr>
</tbody>
</table>
<p>おそらくレンタルサーバーとかだと、STATEMENTに設定されていることが多いんじゃないかなと思う。</p>
<p>それぞれの挙動を適当なテーブルを作り試してみる。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create database <span class="built_in">test</span>;</span><br><span class="line">create table personal(id int auto_increment, name varchar(10),index(id));</span><br><span class="line">SHOW FULL COLUMNS FROM personal;</span><br><span class="line">+-------+-------------+-----------------+------+-----+---------+----------------+---------------------------------+---------+</span><br><span class="line">| Field | Type        | Collation       | Null | Key | Default | Extra          | Privileges                      | Comment |</span><br><span class="line">+-------+-------------+-----------------+------+-----+---------+----------------+---------------------------------+---------+</span><br><span class="line">| id    | int(11)     | NULL            | NO   | MUL | NULL    | auto_increment | select,insert,update,references |         |</span><br><span class="line">| name  | varchar(10) | utf8_general_ci | YES  |     | NULL    |                | select,insert,update,references |         |</span><br><span class="line">+-------+-------------+-----------------+------+-----+---------+----------------+---------------------------------+---------+</span><br></pre></td></tr></table></figure>
<h3 id="Statement_base"><a href="#Statement_base" class="headerlink" title="Statement base"></a>Statement base</h3><p>デフォルトのフォーマット(MySQL5.6まで)。データやテーブル変更の実際に実行されたSQL文をログとして記録する。<br>Non-Deterministicということで、Unsafeとなる。<br>つまりレプリケーションのスレーブ側のサーバーでログを元に同じSQLを実行しても<br>同じになるとは限らないため。</p>
<p><a href="https://dev.mysql.com/doc/refman/5.6/ja/replication-sbr-rbr.html" target="_blank" rel="external">https://dev.mysql.com/doc/refman/5.6/ja/replication-sbr-rbr.html</a></p>
<p>実際にtableに値を追加してバイナリログを確認していく。</p>
<p>insertしてみる</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># set statement</span></span><br><span class="line">SET binlog_format = <span class="string">'STATEMENT'</span>;</span><br><span class="line"></span><br><span class="line">SHOW variables LIKE <span class="string">"binlog_format"</span>;</span><br><span class="line">+---------------+-----------+</span><br><span class="line">| Variable_name | Value     |</span><br><span class="line">+---------------+-----------+</span><br><span class="line">| binlog_format | STATEMENT |</span><br><span class="line">+---------------+-----------+</span><br><span class="line"></span><br><span class="line">FLUSH LOGS;</span><br><span class="line">Query OK, 0 rows affected (0.07 sec)</span><br><span class="line"></span><br><span class="line"> SHOW MASTER STATUS;</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| mysql-bin.000001 |      120 |              |                  |                   |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># insert</span></span><br><span class="line">INSERT INTO personal(name) VALUES(<span class="string">'tom'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># show binlog</span></span><br><span class="line">mysqlbinlog /usr/<span class="built_in">local</span>/var/mysql/mysql-bin.000001</span><br><span class="line"></span><br><span class="line">BEGIN</span><br><span class="line">/*!*/;</span><br><span class="line"><span class="comment"># at 199</span></span><br><span class="line"><span class="comment"># at 231</span></span><br><span class="line"><span class="comment">#151205 20:54:19 server id 1  end_log_pos 231 CRC32 0x40b495c3  Intvar</span></span><br><span class="line">SET INSERT_ID=1/*!*/;</span><br><span class="line"><span class="comment">#151205 20:54:19 server id 1  end_log_pos 345 CRC32 0x9668f30b  Query   thread_id=1 exec_time=0 error_code=0</span></span><br><span class="line">use `<span class="built_in">test</span>`/*!*/;</span><br><span class="line">SET TIMESTAMP=1449316459/*!*/;</span><br><span class="line">INSERT INTO personal(name) VALUES(<span class="string">'tom'</span>)</span><br><span class="line">/*!*/;</span><br><span class="line"><span class="comment"># at 345</span></span><br><span class="line"><span class="comment">#151205 20:54:19 server id 1  end_log_pos 376 CRC32 0x2247f106  Xid = 8</span></span><br><span class="line">COMMIT/*!*/;</span><br></pre></td></tr></table></figure>
<p>ログファイルはそれぞれ以下のような項目がある。</p>
<table>
<thead>
<tr>
<th>項目</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>at</td>
<td>バイナリファイル内でのオフセット</td>
</tr>
<tr>
<td>server id</td>
<td>ステートメントが実行されたサーバー</td>
</tr>
<tr>
<td>end_log_pos</td>
<td>次のイベントが開始される位置</td>
</tr>
<tr>
<td>thread_id</td>
<td>実行したスレッド</td>
</tr>
<tr>
<td>exec_time</td>
<td>実行時間</td>
</tr>
<tr>
<td>error_code</td>
<td>イベントの実行結果(0はエラーなし)</td>
</tr>
</tbody>
</table>
<p>続いてupdateしてみる</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># update</span></span><br><span class="line">UPDATE personal SET name=<span class="string">'tommy'</span> WHERE id = 1;</span><br><span class="line"></span><br><span class="line"><span class="comment"># show binlog</span></span><br><span class="line">mysqlbinlog /usr/<span class="built_in">local</span>/var/mysql/mysql-bin.000001</span><br><span class="line"></span><br><span class="line"><span class="comment"># at 376</span></span><br><span class="line"><span class="comment">#151205 20:56:39 server id 1  end_log_pos 455 CRC32 0x852a4061  Query   thread_id=1 exec_time=0 error_code=0</span></span><br><span class="line">SET TIMESTAMP=1449319780/*!*/;</span><br><span class="line">BEGIN</span><br><span class="line">/*!*/;</span><br><span class="line"><span class="comment"># at 455</span></span><br><span class="line"><span class="comment">#151205 20:56:39 server id 1  end_log_pos 574 CRC32 0xc5128701  Query   thread_id=1 exec_time=0 error_code=0</span></span><br><span class="line">SET TIMESTAMP=1449319780/*!*/;</span><br><span class="line">UPDATE personal SET name=<span class="string">'tommy'</span> WHERE id = 1</span><br><span class="line">/*!*/;</span><br><span class="line"><span class="comment"># at 574</span></span><br><span class="line"><span class="comment">#151205 20:56:39 server id 1  end_log_pos 605 CRC32 0x9217061a  Xid = 9</span></span><br><span class="line">COMMIT/*!*/;</span><br></pre></td></tr></table></figure>
<p>変更のないように同じ値でupdateを試してみると</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># update</span></span><br><span class="line">UPDATE personal SET name=<span class="string">'tommy'</span> WHERE id = 1;</span><br><span class="line"></span><br><span class="line"><span class="comment"># at 605</span></span><br><span class="line"><span class="comment">#151205 20:58:12 server id 1  end_log_pos 684 CRC32 0x7bcd8a62  Query   thread_id=1 exec_time=0 error_code=0</span></span><br><span class="line">SET TIMESTAMP=1449319820/*!*/;</span><br><span class="line">BEGIN</span><br><span class="line">/*!*/;</span><br><span class="line"><span class="comment"># at 684</span></span><br><span class="line"><span class="comment">#151205 20:58:12 server id 1  end_log_pos 803 CRC32 0x132e24fc  Query   thread_id=1 exec_time=0 error_code=0</span></span><br><span class="line">SET TIMESTAMP=1449319820/*!*/;</span><br><span class="line">UPDATE personal SET name=<span class="string">'tommy'</span> WHERE id = 1</span><br><span class="line">/*!*/;</span><br><span class="line"><span class="comment"># at 803</span></span><br><span class="line"><span class="comment">#151205 20:58:12 server id 1  end_log_pos 834 CRC32 0xb3d62bb8  Xid = 10</span></span><br><span class="line">COMMIT/*!*/;</span><br></pre></td></tr></table></figure>
<p>STATEMENTは実行されたSQL文をロギングするので、値に変更がなくてもログが出力される。</p>
<h3 id="Row_base"><a href="#Row_base" class="headerlink" title="Row base"></a>Row base</h3><p>つづいてROWフォーマットで同じように試してみる。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SET binlog_format = <span class="string">'ROW'</span>;</span><br><span class="line">SHOW variables LIKE <span class="string">"binlog_format"</span>;</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| binlog_format | ROW   |</span><br><span class="line">+---------------+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>データをinsertする。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># insert</span></span><br><span class="line">INSERT INTO personal(name) VALUES(<span class="string">'tom'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># show binlog</span></span><br><span class="line">mysqlbinlog /usr/<span class="built_in">local</span>/var/mysql/mysql-bin.000001</span><br><span class="line"></span><br><span class="line"><span class="comment"># at 580</span></span><br><span class="line"><span class="comment">#151205 21:08:25 server id 1  end_log_pos 652 CRC32 0x629d7346  Query   thread_id=1 exec_time=0 error_code=0</span></span><br><span class="line">SET TIMESTAMP=1449321070/*!*/;</span><br><span class="line">BEGIN</span><br><span class="line">/*!*/;</span><br><span class="line"><span class="comment"># at 652</span></span><br><span class="line"><span class="comment">#151205 21:08:25 server id 1  end_log_pos 706 CRC32 0xb60de956  Table_map: `test`.`personal` mapped to number 70</span></span><br><span class="line"><span class="comment"># at 706</span></span><br><span class="line"><span class="comment">#151205 21:08:25 server id 1  end_log_pos 750 CRC32 0x5af605af  Write_rows: table id 70 flags: STMT_END_F</span></span><br><span class="line"></span><br><span class="line">BINLOG <span class="string">'</span><br><span class="line">buJiVhMBAAAANgAAAMICAAAAAEYAAAAAAAEABHRlc3QACHBlcnNvbmFsAAIDDwIeAAJW6Q22</span><br><span class="line">buJiVh4BAAAALAAAAO4CAAAAAEYAAAAAAAEAAgAC//wCAAAAA3Rvba8F9lo=</span><br><span class="line">'</span>/*!*/;</span><br><span class="line"><span class="comment"># at 750</span></span><br><span class="line"><span class="comment">#151205 21:08:25 server id 1  end_log_pos 781 CRC32 0x979d473d  Xid = 12</span></span><br><span class="line">COMMIT/*!*/;</span><br></pre></td></tr></table></figure>
<p>出力されるログはbase64エンコードされている。<br>オプションをつけて実行する。</p>
<p><strong>–base64-output</strong>でバイナリログのエントリを base-64 エンコードで出力できる。<br>DECODE-ROWSを指定して、-vオプションもつけることで行イベントをSQLステートメントとしてデコードできる。</p>
<p>詳細は<a href="http://dev.mysql.com/doc/refman/5.6/ja/mysqlbinlog.html#option_mysqlbinlog_base64-output" target="_blank" rel="external">このあたりを参考</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># show binlog</span></span><br><span class="line">mysqlbinlog /usr/<span class="built_in">local</span>/var/mysql/mysql-bin.000001 --base64-output=DECODE-ROWS -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># at 580</span></span><br><span class="line"><span class="comment">#151205 21:08:25 server id 1  end_log_pos 652 CRC32 0x629d7346  Query   thread_id=1 exec_time=0 error_code=0</span></span><br><span class="line">SET TIMESTAMP=1449321070/*!*/;</span><br><span class="line">BEGIN</span><br><span class="line">/*!*/;</span><br><span class="line"><span class="comment"># at 652</span></span><br><span class="line"><span class="comment">#151205 21:08:25 server id 1  end_log_pos 706 CRC32 0xb60de956  Table_map: `test`.`personal` mapped to number 70</span></span><br><span class="line"><span class="comment"># at 706</span></span><br><span class="line"><span class="comment">#151205 21:08:25 server id 1  end_log_pos 750 CRC32 0x5af605af  Write_rows: table id 70 flags: STMT_END_F</span></span><br><span class="line"><span class="comment">### INSERT INTO `test`.`personal`</span></span><br><span class="line"><span class="comment">### SET</span></span><br><span class="line"><span class="comment">###   @1=2</span></span><br><span class="line"><span class="comment">###   @2='tom'</span></span><br><span class="line"><span class="comment"># at 750</span></span><br><span class="line"><span class="comment">#151205 21:08:25 server id 1  end_log_pos 781 CRC32 0x979d473d  Xid = 12</span></span><br><span class="line">COMMIT/*!*/;</span><br></pre></td></tr></table></figure>
<p>updateしてみる</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># update</span></span><br><span class="line">UPDATE personal SET name=<span class="string">'tommy'</span> WHERE id = 1;</span><br><span class="line"></span><br><span class="line"><span class="comment"># show binlog</span></span><br><span class="line">mysqlbinlog /usr/<span class="built_in">local</span>/var/mysql/mysql-bin.000001 --base64-output=DECODE-ROWS -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># at 781</span></span><br><span class="line"><span class="comment">#151206 21:12:11 server id 1  end_log_pos 853 CRC32 0xf1228fc3  Query   thread_id=1 exec_time=0 error_code=0</span></span><br><span class="line">SET TIMESTAMP=1449368345/*!*/;</span><br><span class="line">BEGIN</span><br><span class="line">/*!*/;</span><br><span class="line"><span class="comment"># at 853</span></span><br><span class="line"><span class="comment">#151206 21:12:11 server id 1  end_log_pos 907 CRC32 0xa2ca1af1  Table_map: `test`.`personal` mapped to number 70</span></span><br><span class="line"><span class="comment"># at 907</span></span><br><span class="line"><span class="comment">#151206 21:12:11 server id 1  end_log_pos 963 CRC32 0xdfe4919c  Update_rows: table id 70 flags: STMT_END_F</span></span><br><span class="line"><span class="comment">### UPDATE `test`.`personal`</span></span><br><span class="line"><span class="comment">### WHERE</span></span><br><span class="line"><span class="comment">###   @1=1</span></span><br><span class="line"><span class="comment">###   @2='tom'</span></span><br><span class="line"><span class="comment">### SET</span></span><br><span class="line"><span class="comment">###   @1=1</span></span><br><span class="line"><span class="comment">###   @2='tommy'</span></span><br><span class="line"><span class="comment"># at 963</span></span><br><span class="line"><span class="comment">#151206 21:12:11 server id 1  end_log_pos 994 CRC32 0x81ba30c7  Xid = 16</span></span><br><span class="line">COMMIT/*!*/;</span><br></pre></td></tr></table></figure>
<p>同じ値でupdateする。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># update</span></span><br><span class="line">UPDATE personal SET name=<span class="string">'tommy'</span> WHERE id = 1;</span><br></pre></td></tr></table></figure>
<p>更新が発生してないのでログは出力されてない。</p>
<h3 id="Mixed_base"><a href="#Mixed_base" class="headerlink" title="Mixed base"></a>Mixed base</h3><p>最後にMIXEDを試してみる。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SET binlog_format = <span class="string">'MIXED'</span>;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">SHOW variables LIKE <span class="string">"binlog_format"</span>;</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| binlog_format | MIXED |</span><br><span class="line">+---------------+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>データをinsertする。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># insert</span></span><br><span class="line">INSERT INTO personal(name) VALUES(<span class="string">'tom'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># show binlog</span></span><br><span class="line">mysqlbinlog /usr/<span class="built_in">local</span>/var/mysql/mysql-bin.000001</span><br><span class="line"></span><br><span class="line"><span class="comment"># at 1198</span></span><br><span class="line"><span class="comment">#151206 21:14:35 server id 1  end_log_pos 1277 CRC32 0xe74bdeed     Query   thread_id=1 exec_time=0 error_code=0</span></span><br><span class="line">SET TIMESTAMP=1449374917/*!*/;</span><br><span class="line">BEGIN</span><br><span class="line">/*!*/;</span><br><span class="line"><span class="comment"># at 1277</span></span><br><span class="line"><span class="comment"># at 1309</span></span><br><span class="line"><span class="comment">#151206 21:14:35 server id 1  end_log_pos 1309 CRC32 0xd5a25039     Intvar</span></span><br><span class="line">SET INSERT_ID=3/*!*/;</span><br><span class="line"><span class="comment">#151206 21:14:35 server id 1  end_log_pos 1423 CRC32 0x2a2b7771     Query   thread_id=1 exec_time=0 error_code=0</span></span><br><span class="line">SET TIMESTAMP=1449374917/*!*/;</span><br><span class="line">INSERT INTO personal(name) VALUES(<span class="string">'tom'</span>)</span><br><span class="line">/*!*/;</span><br><span class="line"><span class="comment"># at 1423</span></span><br><span class="line"><span class="comment">#151206 21:14:35 server id 1  end_log_pos 1454 CRC32 0x83cb8b10     Xid = 23</span></span><br><span class="line">COMMIT/*!*/;</span><br></pre></td></tr></table></figure>
<p>STATEMENTと同様で実行したSQLの履歴がログに出力される。<br>updateする。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># update</span></span><br><span class="line">UPDATE personal SET name=<span class="string">'tommy'</span> WHERE id = 1;</span><br><span class="line"></span><br><span class="line"><span class="comment"># show binlog</span></span><br><span class="line">/*!*/;</span><br><span class="line"><span class="comment"># at 1732</span></span><br><span class="line"><span class="comment">#151206 21:16:48 server id 1  end_log_pos 1811 CRC32 0xd0ddade4     Query   thread_id=1 exec_time=0 error_code=0</span></span><br><span class="line">SET TIMESTAMP=1449375744/*!*/;</span><br><span class="line">BEGIN</span><br><span class="line">/*!*/;</span><br><span class="line"><span class="comment"># at 1811</span></span><br><span class="line"><span class="comment">#151206 21:16:48 server id 1  end_log_pos 1930 CRC32 0xb27b4345     Query   thread_id=1 exec_time=0 error_code=0</span></span><br><span class="line">SET TIMESTAMP=1449375744/*!*/;</span><br><span class="line">update personal <span class="built_in">set</span> name=<span class="string">'tommy'</span> <span class="built_in">where</span> id = 1</span><br><span class="line">/*!*/;</span><br><span class="line"><span class="comment"># at 1930</span></span><br><span class="line"><span class="comment">#151206 21:16:48 server id 1  end_log_pos 1961 CRC32 0x51bab152     Xid = 26</span></span><br><span class="line">COMMIT/*!*/;</span><br></pre></td></tr></table></figure>
<p>一部の関数を使った場合はROWフォーマットで出力される。<br>CURRENT_USER() を使って更新してみる。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># update</span></span><br><span class="line">UPDATE personal SET name=CURRENT_USER() WHERE id = 1;</span><br><span class="line"></span><br><span class="line"><span class="comment"># show binlog</span></span><br><span class="line">mysqlbinlog /usr/<span class="built_in">local</span>/var/mysql/mysql-bin.000006</span><br><span class="line"><span class="comment"># at 1961</span></span><br><span class="line"><span class="comment">#151206 21:18:04 server id 1  end_log_pos 2033 CRC32 0x62cb65dd     Query   thread_id=1 exec_time=0 error_code=0</span></span><br><span class="line">SET TIMESTAMP=1449376039/*!*/;</span><br><span class="line">BEGIN</span><br><span class="line">/*!*/;</span><br><span class="line"><span class="comment"># at 2033</span></span><br><span class="line"><span class="comment">#151206 21:18:04 server id 1  end_log_pos 2087 CRC32 0x6e57c961     Table_map: `test`.`personal` mapped to number 70</span></span><br><span class="line"><span class="comment"># at 2087</span></span><br><span class="line"><span class="comment">#151206 21:18:04 server id 1  end_log_pos 2150 CRC32 0x6a1d8b78     Update_rows: table id 70 flags: STMT_END_F</span></span><br><span class="line"></span><br><span class="line">BINLOG</span><br><span class="line">J7ljVhMBAAAANgAAACcIAAAAAEYAAAAAAAEABHRlc3QACHBlcnNvbmFsAAIDDwIeAAJhyVdu</span><br><span class="line">J7ljVh8BAAAAPwAAAGYIAAAAAEYAAAAAAAEAAgAC///8AwAAAAV0b21tefwDAAAACnJvb3RAbG9j</span><br><span class="line">YWx4ix1q</span><br><span class="line"><span class="string">'/*!*/;</span><br><span class="line"># at 2150</span><br><span class="line">#151206 21:18:04 server id 1  end_log_pos 2181 CRC32 0x12bf3230     Xid = 29</span><br><span class="line">COMMIT/*!*/;</span><br><span class="line"></span><br><span class="line"># decode base64 binlog</span><br><span class="line">mysqlbinlog /usr/local/var/mysql/mysql-bin.000001 --base64-output=DECODE-ROWS -v</span><br><span class="line"></span><br><span class="line"># at 1961</span><br><span class="line">#151206 21:18:04 server id 1  end_log_pos 2033 CRC32 0x62cb65dd     Query   thread_id=1 exec_time=0 error_code=0</span><br><span class="line">SET TIMESTAMP=1449376039/*!*/;</span><br><span class="line">BEGIN</span><br><span class="line">/*!*/;</span><br><span class="line"># at 2033</span><br><span class="line">#151206 21:18:04 server id 1  end_log_pos 2087 CRC32 0x6e57c961     Table_map: `test`.`personal` mapped to number 70</span><br><span class="line"># at 2087</span><br><span class="line">#151206 21:18:04 server id 1  end_log_pos 2150 CRC32 0x6a1d8b78     Update_rows: table id 70 flags: STMT_END_F</span><br><span class="line">### UPDATE `test`.`personal`</span><br><span class="line">### WHERE</span><br><span class="line">###   @1=1</span><br><span class="line">###   @2='</span>tommy<span class="string">'</span><br><span class="line">### SET</span><br><span class="line">###   @1=1</span><br><span class="line">###   @2='</span>root@<span class="built_in">local</span><span class="string">'</span><br><span class="line"># at 2150</span><br><span class="line">#151206 21:18:04 server id 1  end_log_pos 2181 CRC32 0x12bf3230     Xid = 29</span><br><span class="line">COMMIT/*!*/;</span></span><br></pre></td></tr></table></figure>
<p>となりROWベースとなっていることがわかる。</p>
<h3 id="u307E_u3068_u3081"><a href="#u307E_u3068_u3081" class="headerlink" title="まとめ"></a>まとめ</h3><p>STATEMENTは実行したSQL文がログに記載され、エンコードされていないためサイズも小さく、ログも読みづらい。<br>反面 Non-Deterministic なので、必ずしも同じクエリを実行しても同じ結果が得られるわけでない。<br>それに対してMIXED、ROWはサイズは大きくなるが、結果が異なってくるということはなく安全である。</p>
<p>デフォルトでMIXEDとかROWとかにした方がいいのじゃないかと思ってたけど、<br><a href="http://dev.mysql.com/doc/refman/5.7/en/replication-options-binary-log.html#sysvar_binlog_format" target="_blank" rel="external">MySQL 5.7.7からはdefaultがROW</a>になったようだった。</p>
<h4 id="u53C2_u8003_u306B_u3057_u305F_u30DA_u30FC_u30B8"><a href="#u53C2_u8003_u306B_u3057_u305F_u30DA_u30FC_u30B8" class="headerlink" title="参考にしたページ"></a>参考にしたページ</h4><p><a href="http://dev.mysql.com/doc/refman/5.6/ja/mysqlbinlog.html" target="_blank" rel="external">4.6.8 mysqlbinlog — バイナリログファイルを処理するためのユーティリティー</a><br><a href="https://mariadb.com/kb/en/mariadb/binary-log-formats/" target="_blank" rel="external">MariaDB Binary Log Formats</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>とあるアプリケーションをレンタルサーバーに設置しようとした際に、<br><a href="https://mariadb.com/">MariaDB</a>が以下のようなエラーを吐いていた。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Unsafe statement written to the binary log using statement format</span><br><span class="line">since BINLOG_FORMAT = STATEMENT. Statement is unsafe because it</span><br><span class="line">invokes a trigger or a stored function that inserts into an</span><br><span class="line">AUTO_INCREMENT column. Inserted values cannot be logged correctly.</span><br></pre></td></tr></table></figure>
<p>バイナリログフォーマットがSTATEMENTだと安全でないのでよろしくないらしい。<br>STATEMENTだと安全でないということはどういうことか。少し試してみた。</p>]]>
    
    </summary>
    
      <category term="memo" scheme="http://blog.kazu69.net/categories/memo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[EFK(Elasticsearch + Fluentd + Kibana)をDocker-Composeで試してみた]]></title>
    <link href="http://blog.kazu69.net/2015/11/13/create-efk-with-docker/"/>
    <id>http://blog.kazu69.net/2015/11/13/create-efk-with-docker/</id>
    <published>2015-11-13T13:44:53.000Z</published>
    <updated>2015-11-24T16:05:57.000Z</updated>
    <content type="html"><![CDATA[<p>なかなか試せなかったログ収集・解析周りのツールを周回遅れで軽く試してみた。<br>Docker 1.8 から<a href="http://docs.docker.com/engine/reference/logging/fluentd/" target="_blank" rel="external">Fluentdもlog driver</a>に追加されているので、これを使って簡単なサンプルを構築した。</p>
<a id="more"></a>
<h2 id="u69CB_u6210"><a href="#u69CB_u6210" class="headerlink" title="構成"></a>構成</h2><p>適当なnodeJSアプリケーションのフロントにnginxを立たせて、<br>収集したログをtd-agentで、Fluentdのログ収集コンテナに24224ポートで転送する。<br>あとはElasticsearch、Kibanaで解析・表示する。</p>
<p>アプリケーションからのログ転送はDockerのlog-driverオプションを使うので、td-agentの導入を省けた。<br><a href="https://github.com/fluent/fluentd-docker-image" target="_blank" rel="external">Fluentd</a>、<a href="https://github.com/dockerfile/elasticsearch" target="_blank" rel="external">Elasticsearch</a>、<a href="https://github.com/eliotk/docker-kibana" target="_blank" rel="external">Kibana</a>はそれぞれオフィシャルのイメージがあるので、そちらを活用した。<br>Elasticsearchは9200ポート、kibanaは5601ポートを使った。</p>
<h2 id="u30ED_u30B0_u53CE_u96C6_u30FB_u89E3_u6790_u57FA_u76E4_u306E_u30BB_u30C3_u30C8_u30A2_u30C3_u30D7"><a href="#u30ED_u30B0_u53CE_u96C6_u30FB_u89E3_u6790_u57FA_u76E4_u306E_u30BB_u30C3_u30C8_u30A2_u30C3_u30D7" class="headerlink" title="ログ収集・解析基盤のセットアップ"></a>ログ収集・解析基盤のセットアップ</h2><h3 id="Fluentd"><a href="#Fluentd" class="headerlink" title="Fluentd"></a>Fluentd</h3>
<script src="https://gist-it.appspot.com/github/kazu69/docker-efk/blob/master/fluentd/Dockerfile"></script>

<p>fluentdの設定はログをElasticsearch(9200ポート)に転送している。<br>forwardで転送されてきたログでdockerというタグのついたものを9200ポートで送信している。<br>logstash_formatの設定は出力形式、これがfalseの場合kibanaで解析する際に@timestampフィールドが作成されないようで時系列で集計できない。</p>

<script src="https://gist-it.appspot.com/github/kazu69/docker-efk/blob/master/fluentd/fluent.conf"></script>

<h3 id="kibana"><a href="#kibana" class="headerlink" title="kibana"></a>kibana</h3><p>5601ポートでアクセスすることで解析画面を表示できる。<br>これはどちらかというと設定より使い方を習得する方が大変そうな。</p>
<h2 id="docker-compose_u306E_u30B3_u30F3_u30C6_u30CA_u306E_u30D8_u30EB_u30B9_u30C1_u30A7_u30C3_u30AF"><a href="#docker-compose_u306E_u30B3_u30F3_u30C6_u30CA_u306E_u30D8_u30EB_u30B9_u30C1_u30A7_u30C3_u30AF" class="headerlink" title="docker-composeのコンテナのヘルスチェック"></a>docker-composeのコンテナのヘルスチェック</h2><p>docker-composeを使った際に、各コンテナとの疎通確認にncコマンドを使っている。そのため、ほとんどのentrypoint.shファイルの内容がほとんど同じになってしまった。</p>

<script src="https://gist-it.appspot.com/github/kazu69/docker-efk/blob/master/fluentd/entrypoint.sh"></script>

<p>コンテナ間の依存を解消する方法がいまいちわかってないのでこのような手法をとったのだが、もっといい方法がありそう。<br><a href="https://github.com/docker/compose/pull/686" target="_blank" rel="external">docker-compose issue#686</a>にあるようなので、今後解決されるかも。</p>
<h2 id="u8D77_u52D5_u3057_u3066_u307F_u308B"><a href="#u8D77_u52D5_u3057_u3066_u307F_u308B" class="headerlink" title="起動してみる"></a>起動してみる</h2><script src="//gist.github.com/kazu69/84e383c0dab2e115352c.js?file=exec.sh"></script>
<p>kibanaにアクセスすると</p>
<p><img src="https://gist.githubusercontent.com/kazu69/84e383c0dab2e115352c/raw/3602e3920c3021754b7a8bda17f8b6505cd49b6d/1.png" alt=""></p>
<p>logstash形式のものをフィルタリング</p>
<p><img src="https://gist.githubusercontent.com/kazu69/84e383c0dab2e115352c/raw/3602e3920c3021754b7a8bda17f8b6505cd49b6d/2.png" alt=""></p>
<p>ということで、とりあえず最小限の環境は構築できた。</p>
<p>今回作成したサンプル <a href="https://github.com/kazu69/docker-efk" target="_blank" rel="external">kazu69/docker-efk</a></p>
<h3 id="u53C2_u8003_u306B_u3057_u305F_u30DA_u30FC_u30B8"><a href="#u53C2_u8003_u306B_u3057_u305F_u30DA_u30FC_u30B8" class="headerlink" title="参考にしたページ"></a>参考にしたページ</h3><p><a href="http://stackoverflow.com/questions/31212547/passing-bash-code-through-the-environment-for-docker-compose/" target="_blank" rel="external">Passing bash code through the environment (for docker-compose)</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>なかなか試せなかったログ収集・解析周りのツールを周回遅れで軽く試してみた。<br>Docker 1.8 から<a href="http://docs.docker.com/engine/reference/logging/fluentd/">Fluentdもlog driver</a>に追加されているので、これを使って簡単なサンプルを構築した。</p>]]>
    
    </summary>
    
      <category term="web" scheme="http://blog.kazu69.net/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[active recordでtinyint(1)がbooleanではない形式を扱う]]></title>
    <link href="http://blog.kazu69.net/2015/10/22/active-record-tinyint/"/>
    <id>http://blog.kazu69.net/2015/10/22/active-record-tinyint/</id>
    <published>2015-10-22T09:17:13.000Z</published>
    <updated>2015-11-25T12:57:53.000Z</updated>
    <content type="html"><![CDATA[<p>ActiveRecordを使っていて、tinyint(1)なレコードの取り扱いにちょっとハマったので備忘録。</p>
<a id="more"></a>
<p>MySQLでtinyint(1)はbooleanと同じなので 0 か 1 しかとらないはずだが、<br>今回はなぜか2なる値があり、常にfalseとなっていた。</p>
<p>これは<a href="http://apidock.com/rails/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter/emulate_booleans/class" target="_blank" rel="external">ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter#emulate_booleans</a>が使われれるため。</p>
<p>あまりないけど、こういう場合は以下の方法で解決出来る。</p>
<p>Railsアプリケーション全体でこの設定を使わない場合</p>
<script src="//gist.github.com/kazu69/da4db6ba0b96673840a5.js?file=application.rb"></script>
<p>または、Model単位ではキャストする</p>
<script src="//gist.github.com/kazu69/da4db6ba0b96673840a5.js?file=example_model.rb"></script>
<p>ちゃんとソースにコメント書いてあるんで比較的常識的なことだったんですね…。</p>
<p>参考にしたページ<br><a href="https://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb#L107-L116" target="_blank" rel="external">rails/activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb</a><br><a href="https://github.com/rails/rails/blob/4-2-stable/activerecord/lib/active_record/attributes.rb#L50-L52" target="_blank" rel="external">rails/activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>ActiveRecordを使っていて、tinyint(1)なレコードの取り扱いにちょっとハマったので備忘録。</p>]]>
    
    </summary>
    
      <category term="ruby" scheme="http://blog.kazu69.net/categories/ruby/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[stackprofを使って、Rspecのテストのパフォーマンス改善]]></title>
    <link href="http://blog.kazu69.net/2015/10/20/use-stackprof-improve-performance-of-rspec/"/>
    <id>http://blog.kazu69.net/2015/10/20/use-stackprof-improve-performance-of-rspec/</id>
    <published>2015-10-20T13:58:38.000Z</published>
    <updated>2015-11-24T15:05:57.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://github.com/tmm1/stackprof" target="_blank" rel="external">stackprof</a> を使えばrspecのプロファイリングが出来る戸言うことを知ったので、<br>早速テストでためしてみた。</p>
<a id="more"></a>
<p>Gemfileに追加して</p>
<script src="//gist.github.com/kazu69/8628e1ed92533fd61881.js?file=Gemfile"></script>
<p>そしてbundle install。</p>
<p>around hookでテストの開始前後での時間を計測します。<br>stackprofの設定は環境変数で渡します。</p>
<p>ということで、いかのようにspec_helper.rbに追加。</p>
<script src="//gist.github.com/kazu69/8628e1ed92533fd61881.js?file=spec_helper.rb"></script>
<p>そして実行</p>
<script src="//gist.github.com/kazu69/8628e1ed92533fd61881.js?file=run.sh"></script>
<p>指定したディレクトリにプロフファイリング結果がdumpされる</p>
<script src="//gist.github.com/kazu69/8628e1ed92533fd61881.js?file=ls.sh"></script>
<p>プロファイル結果を分析</p>
<script src="//gist.github.com/kazu69/8628e1ed92533fd61881.js?file=profile.sh"></script>
<p>この場合 ActiveSupport::Callbacks#run_callbacks が重そう。</p>
<p>こんな感じで重い箇所を洗い出して改善していける。</p>
<p>参考にしたページ<br><a href="http://blog.iempire.ru/2015/10/13/profiling-specs/" target="_blank" rel="external">Profiling RSpec examples with Stackprof</a><br><a href="http://spring-mt.hatenablog.com/entry/2015/01/24/112454" target="_blank" rel="external">railsアプリでstackprofを使ってボトルネックを探す + JSON::Schema(2.2.1)の高速化</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://github.com/tmm1/stackprof">stackprof</a> を使えばrspecのプロファイリングが出来る戸言うことを知ったので、<br>早速テストでためしてみた。</p>]]>
    
    </summary>
    
      <category term="ruby" scheme="http://blog.kazu69.net/categories/ruby/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[nginScriptを試してみた]]></title>
    <link href="http://blog.kazu69.net/2015/10/18/tried-nginscript/"/>
    <id>http://blog.kazu69.net/2015/10/18/tried-nginscript/</id>
    <published>2015-10-18T14:40:20.000Z</published>
    <updated>2015-10-26T16:01:32.000Z</updated>
    <content type="html"><![CDATA[<p>nginx上で動作するJavaScript仮想マシンである、<a href="https://www.nginx.com/blog/launching-nginscript-and-looking-ahead/" target="_blank" rel="external">nginScript</a> なるものがリリースされた。<br>(まだプレビュー版とのことだが)</p>
<p>これはリクエスト処理の実行時に評価され、特定のリクエストに対してnginxの内部処理をを調整することが可能になる。っぽい。</p>
<p><a href="https://www.nginx.com/resources/wiki/modules/lua/" target="_blank" rel="external">Lua</a>や<a href="https://github.com/matsumoto-r/ngx_mruby" target="_blank" rel="external">ngx_mruby</a>と同じような感じで使えるのようだ。</p>
<a id="more"></a>
<p><a href="https://www.nginx.com/resources/wiki/nginScript/" target="_blank" rel="external">nginScriptのwiki</a>を参考にDocker + docker-machineで簡単に試してみた。</p>
<h2 id="install_and_build_nginx"><a href="#install_and_build_nginx" class="headerlink" title="install and build nginx"></a>install and build nginx</h2><p><a href="http://nginx.org/en/download.html" target="_blank" rel="external">nginx: download</a>から最新のバージョンを取得する。<br>またnginScriptはオプションとして提供されているので、<a href="http://hg.nginx.org/" target="_blank" rel="external">nginxのMercurial</a>から取得する必要がある。</p>
<script src="//gist.github.com/kazu69/d531eea15e20201c0742.js?file=Dockerfile"></script>
<p>これを適当な感じでbuild</p>
<script src="//gist.github.com/kazu69/d531eea15e20201c0742.js?file=build.sh"></script>
<h2 id="nginScript"><a href="#nginScript" class="headerlink" title="nginScript"></a>nginScript</h2><p>ちなみにnginx.confは以下のようになっている</p>
<script src="//gist.github.com/kazu69/d531eea15e20201c0742.js?file=nginx.conf"></script>
<h3 id="js_run"><a href="#js_run" class="headerlink" title="js_run"></a>js_run</h3><p>nginScriptはlocationごとに評価され、実行される。<br>locationディレクティブでnginScriptを利用する際はjs_run で実行する必要がある。</p>
<script src="//gist.github.com/kazu69/d531eea15e20201c0742.js?file=js_run.sh"></script>
<h3 id="js_set"><a href="#js_set" class="headerlink" title="js_set"></a>js_set</h3><p>また、JavaScriptを使い内部変数を定義することもできる。<br>その際はhttpディレクティブに設定を書く必要がある。</p>
<script src="//gist.github.com/kazu69/d531eea15e20201c0742.js?file=js_set.sh"></script>
<h3 id="24r_28_u30EA_u30AF_u30A8_u30B9_u30C8_u30AA_u30D6_u30B8_u30A7_u30AF_u30C8_29"><a href="#24r_28_u30EA_u30AF_u30A8_u30B9_u30C8_u30AA_u30D6_u30B8_u30A7_u30AF_u30C8_29" class="headerlink" title="$r(リクエストオブジェクト)"></a>$r(リクエストオブジェクト)</h3><p>その他、リクエストの内部変数として $rがJavaScriptオブジェクトとして利用できる。<br>$rはsendHeader(),send(),finish() というメソッドが現在のところ定義されており、これらを利用してレスポンスを返すことができる。</p>
<h3 id="u30EA_u30AF_u30A8_u30B9_u30C8_u30D1_u30E9_u30E1_u30FC_u30BF"><a href="#u30EA_u30AF_u30A8_u30B9_u30C8_u30D1_u30E9_u30E1_u30FC_u30BF" class="headerlink" title="リクエストパラメータ"></a>リクエストパラメータ</h3><p>$r.args にJavaScriptのオブジェクトとして格納されている。</p>
<p>nginScriptはECMA標準準拠というわけではないようだが、基本的なことはできそう。<br>適当な関数を定義して評価することや、カスタムヘッダーを追加することなどはできた。</p>
<script src="//gist.github.com/kazu69/d531eea15e20201c0742.js?file=function.sh"></script>
<p>ということで、ほとんど<a href="http://hg.nginx.org/njs/file/tip/README" target="_blank" rel="external">Readme</a> をそのまま試したことになるけど、<br>いまのところlocationディレクティブにhookして、リクエスト、レスポンスをJavaScriptで操作できる位という感じだった。</p>
<p>参考にしたページ<br><a href="https://www.nginx.com/resources/wiki/nginScript/" target="_blank" rel="external">nginx Wiki documentation</a><br><a href="http://hg.nginx.org/njs/file/11d4d66851ed/README?_ga=1.105907269.772607199.1445353842" target="_blank" rel="external">README</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>nginx上で動作するJavaScript仮想マシンである、<a href="https://www.nginx.com/blog/launching-nginscript-and-looking-ahead/">nginScript</a> なるものがリリースされた。<br>(まだプレビュー版とのことだが)</p>
<p>これはリクエスト処理の実行時に評価され、特定のリクエストに対してnginxの内部処理をを調整することが可能になる。っぽい。</p>
<p><a href="https://www.nginx.com/resources/wiki/modules/lua/">Lua</a>や<a href="https://github.com/matsumoto-r/ngx_mruby">ngx_mruby</a>と同じような感じで使えるのようだ。</p>]]>
    
    </summary>
    
      <category term="nginx" scheme="http://blog.kazu69.net/categories/nginx/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Subresource Integrityについて調べた]]></title>
    <link href="http://blog.kazu69.net/2015/10/01/check-for-subresource-integrity/"/>
    <id>http://blog.kazu69.net/2015/10/01/check-for-subresource-integrity/</id>
    <published>2015-10-01T13:34:16.000Z</published>
    <updated>2015-10-13T15:24:22.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://githubengineering.com/subresource-integrity/" target="_blank" rel="external">Subresource Integrity</a> という記事をみて、<br>ちょっと興味深かったのでSubresource Integrityについて、軽く見てみた。</p>
<a id="more"></a>
<h2 id="Subresource_Integrity_u306F_u3069_u3046_u3044_u3046_u3082_u306E_u304B"><a href="#Subresource_Integrity_u306F_u3069_u3046_u3044_u3046_u3082_u306E_u304B" class="headerlink" title="Subresource Integrityはどういうものか"></a>Subresource Integrityはどういうものか</h2><p>おそらく、以下のようなもの。<br>ウェブアプリケーションでCDNをつかって、サブリソースを参照することは当たり前になっている。<br>しかし参照先のサブリソースが安全であるという保証はない。<br>もし、CDN経由で参照しているサブリソースが攻撃者により改変された場合、XSSの危険性が生じる。</p>
<p>これは、サブリソースの整合性をチェックする仕組みを導入することで、危険を回避できる。<br>Subresource Integrityとは、サブリースをSHA256, SHA512などでハッシュ化して、linkタグやscriptタグにintegrity属性として付与することで、整合性を確認できるようにしたもの。<br>もし、integrity属性がある場合は、ブラウザは読み込み時に整合性をチェックして一致した場合にのみロードされる。</p>
<h2 id="Subresource_Integrity_u3092_u8A66_u3059"><a href="#Subresource_Integrity_u3092_u8A66_u3059" class="headerlink" title="Subresource Integrityを試す"></a>Subresource Integrityを試す</h2><p><a href="https://developer.mozilla.org/ja/docs/Web/Security/Subresource_Integrity" target="_blank" rel="external">MDN Subresource Integrity</a>をみると<br>Chrome v45, Firefox v43 とのことだったので、Chrome Canaryで試した。</p>
<p>まず適当なファイルをsha256でハッシュ化して、integrity属性の値を生成する。</p>
<script src="//gist.github.com/kazu69/40a6d366181e79fbe703.js?file=create.sh"></script>
<p>あとはscriptタグなりlinkタグなりにintegrity属性を付与する</p>
<script src="//gist.github.com/kazu69/40a6d366181e79fbe703.js?file=index.html"></script>
<p>ちなみにscriptタグに付与しているcrossorigin属性は「anonymous」キーワードが指定された場合、<br>リクエストにはcookieやクライアントサイドのSSL証明書、HTTP認証などのユーザ認証情報は利用されなくなるらしい。</p>
<p>もし、コードが改変され整合性が確認できない場合は</p>
<script src="//gist.github.com/kazu69/40a6d366181e79fbe703.js?file=faild.js"></script>
<p>また、そのような場合に備えてfallbackを追加しておく</p>
<script src="//gist.github.com/kazu69/40a6d366181e79fbe703.js?file=fallback.html"></script>
<p>ハッシュ値は<a href="https://www.srihash.org/" target="_blank" rel="external">SRI Hash Generator</a>を使うと便利。<br>Wordpressでは<a href="https://wordpress.org/plugins/wp-sri/" target="_blank" rel="external">Subresource Integrity (SRI) Manager</a>などが使えそう。</p>
<p>参考しにたページ<br><a href="http://githubengineering.com/subresource-integrity/" target="_blank" rel="external">Subresource Integrity</a><br><a href="https://developer.mozilla.org/ja/docs/Web/Security/Subresource_Integrity" target="_blank" rel="external">Subresource Integrity</a><br><a href="https://developer.mozilla.org/ja/docs/Web/HTML/CORS_settings_attributes" target="_blank" rel="external">CORS 設定属性</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://githubengineering.com/subresource-integrity/">Subresource Integrity</a> という記事をみて、<br>ちょっと興味深かったのでSubresource Integrityについて、軽く見てみた。</p>]]>
    
    </summary>
    
      <category term="web" scheme="http://blog.kazu69.net/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScriptでMonadを試した]]></title>
    <link href="http://blog.kazu69.net/2015/09/28/try-monad-in-javascript/"/>
    <id>http://blog.kazu69.net/2015/09/28/try-monad-in-javascript/</id>
    <published>2015-09-28T12:42:01.000Z</published>
    <updated>2015-10-13T15:20:24.000Z</updated>
    <content type="html"><![CDATA[<p>最近、時間のあるときにすこしだけ<a href="https://www.haskell.org/" target="_blank" rel="external">Haskell</a>を触ったりもしていて、<br>Monadなるものに触れた。</p>
<p>そこで、それっぽいものをJavaScriptで試してみた。</p>
<a id="more"></a>
<p>確実に俄か感じではあるので、漠然としている理解であるけど。</p>
<h2 id="Monad_Laws"><a href="#Monad_Laws" class="headerlink" title="Monad Laws"></a>Monad Laws</h2><p>Monadと名乗るにはMonad則を満たさないといけない。<br>Monad則とは</p>
<ol>
<li>return x &gt;&gt;= f == f x</li>
<li>m &gt;&gt;= return == m</li>
<li>(m &gt;&gt;= f) &gt;&gt;= g == m &gt;&gt;= (\x -&gt; f x &gt;&gt;= g)</li>
</ol>
<p>mはMonadを指す。<br>(&gt;&gt;=) でMonadから値を取り出す。<br>return はMonadに値を渡す。</p>
<p>という認識でこの法則を読み取っている。<br>ということで、これを満たすことのできるclassを作成した。</p>
<script src="//gist.github.com/kazu69/96344bf338061ca75552.js?file=monad.class.js"></script>
<p>create(returnと同じ感じ)でMonadをインスタンス化して、<br>bind(&gt;&gt;==と同じ感じ)でMonadに値を渡し、結果を得る。というシンプルなクラス。</p>
<p>Qunitを使ってMonad則をテストする</p>
<script src="//gist.github.com/kazu69/96344bf338061ca75552.js?file=test.js"></script>
<p>認識が正しければ、Monad則を満たしたので、Monadである。</p>
<p>いろいろなMonadを試してみる</p>
<h3 id="Identity_Monad"><a href="#Identity_Monad" class="headerlink" title="Identity Monad"></a>Identity Monad</h3><script src="//gist.github.com/kazu69/96344bf338061ca75552.js?file=identity.js"></script>
<h3 id="Maybe_Monad"><a href="#Maybe_Monad" class="headerlink" title="Maybe Monad"></a>Maybe Monad</h3><script src="//gist.github.com/kazu69/96344bf338061ca75552.js?file=maybe.js"></script>
<h3 id="List_Monad"><a href="#List_Monad" class="headerlink" title="List Monad"></a>List Monad</h3><script src="//gist.github.com/kazu69/96344bf338061ca75552.js?file=list.js"></script>
<p>ということで、JavaScriptでためしてデザインパターンという認識をした。</p>
<p>参考にしたページ<br><a href="https://curiosity-driven.org/monads-in-javascript" target="_blank" rel="external">Monads in JavaScript</a><br><a href="http://qiita.com/7shi/items/547b6137d7a3c482fe68" target="_blank" rel="external">モナド則がちょっと分かった？</a><br><a href="http://labs.timedia.co.jp/2011/03/monad-you-already-know.html" target="_blank" rel="external">モナド: お前はもう知っている</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近、時間のあるときにすこしだけ<a href="https://www.haskell.org/">Haskell</a>を触ったりもしていて、<br>Monadなるものに触れた。</p>
<p>そこで、それっぽいものをJavaScriptで試してみた。</p>]]>
    
    </summary>
    
      <category term="javascript" scheme="http://blog.kazu69.net/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[gulp v4.0を眺めてみた]]></title>
    <link href="http://blog.kazu69.net/2015/09/03/watched-gulp4/"/>
    <id>http://blog.kazu69.net/2015/09/03/watched-gulp4/</id>
    <published>2015-09-03T11:38:07.000Z</published>
    <updated>2015-09-07T15:04:20.000Z</updated>
    <content type="html"><![CDATA[<p>gulpfileをES6に置き換える必要があり、何気にgulpの情報追っていると、<br>そろそろv4.0がリリースされそうなのでざっくりと眺めてみた。</p>
<a id="more"></a>
<h2 id="gulpfile_u3092ES6_u3067_u66F8_u304F"><a href="#gulpfile_u3092ES6_u3067_u66F8_u304F" class="headerlink" title="gulpfileをES6で書く"></a>gulpfileをES6で書く</h2><p>まず、本来の目的だったこの件、<a href="https://github.com/gulpjs/gulp/issues/830#issuecomment-123601869" target="_blank" rel="external">v3.9</a>ですでに対応されていた。</p>
<p>以下の条件であれば利用可能のようだった。</p>
<ul>
<li>gulp v3.9以上</li>
<li>gulpfile.jsをgulpfile.babel.jsとする</li>
<li><a href="https://www.npmjs.com/package/babel-core" target="_blank" rel="external">babel-core</a> をインストールすること</li>
</ul>
<p>内部的にはbabelで変換しているようだ。</p>
<hr>
<p>続いて、v4.0の<a href="https://github.com/gulpjs/gulp/blob/4.0/docs/API.md" target="_blank" rel="external">CAHNGELOG</a>も眺めてみた。</p>
<h2 id="gulp4-0_u3092_u30A4_u30F3_u30B9_u30C8_u30FC_u30EB"><a href="#gulp4-0_u3092_u30A4_u30F3_u30B9_u30C8_u30FC_u30EB" class="headerlink" title="gulp4.0をインストール"></a>gulp4.0をインストール</h2><script src="//gist.github.com/kazu69/020451222ded7461a7cc.js?file=install.sh"></script>
<h2 id="cli_u306E_u5909_u66F4_u70B9"><a href="#cli_u306E_u5909_u66F4_u70B9" class="headerlink" title="cliの変更点"></a>cliの変更点</h2><p><code>--tasks-json</code> と <code>--verify</code> オプションが追加されてる。</p>
<p>–task-json はタスクをjson形式で出力する。</p>
<script src="//gist.github.com/kazu69/020451222ded7461a7cc.js?file=cli-task-json.sh"></script>
<p>–verify はpluginsがpackage.jsonを参照しているかチェックする。</p>
<script src="//gist.github.com/kazu69/020451222ded7461a7cc.js?file=gulp-verify.sh"></script>
<h2 id="API_u306E_u5909_u66F4_u70B9"><a href="#API_u306E_u5909_u66F4_u70B9" class="headerlink" title="APIの変更点"></a>APIの変更点</h2><p>大きな変更点はタスク処理機構が、<a href="https://www.npmjs.com/package/orchestrator" target="_blank" rel="external">orchestrator</a> から <a href="https://github.com/phated/undertaker" target="_blank" rel="external">undertaker</a> に変更される点だった。</p>
<p>orchestratorではタスクの同期制御サポートされてないが、undertakerで使うことでタスクの同期処理などが簡単に解決できるようになる。</p>
<p>処理機構の変更のため、APIも大きく変更されている。</p>
<p>gulp.taskはこれまで引数に<strong>gulp.task(name[, deps], fn)</strong>となっていたが、<strong>gulp.task([name,] fn)</strong>と依存タスクを指定するdepsがなくなった。</p>
<p><code>src</code>、<code>dest</code>、<code>watch</code>、<code>symlink</code>はgulpのclassを使用しているが、<br>それ以外は<a href="https://github.com/phated/undertaker" target="_blank" rel="external">undertaker</a>のメソッドをcallしている。</p>
<p>追加されたAPIは</p>
<p><code>gulp.parallel</code>、<code>gulp.series</code>、<code>gulp.tree</code>、<code>gulp.registry</code>、<code>gulp.lastRun</code>となる。</p>
<h3 id="gulp-parallel"><a href="#gulp-parallel" class="headerlink" title="gulp.parallel"></a>gulp.parallel</h3><p>これまでは<a href="https://www.npmjs.com/package/run-sequence" target="_blank" rel="external">runSequence</a>などを使っていたTaskの並列化を行うことができる。</p>
<script src="//gist.github.com/kazu69/020451222ded7461a7cc.js?file=gulpfile1.js"></script>
<script src="//gist.github.com/kazu69/020451222ded7461a7cc.js?file=parallel.sh"></script>
<h3 id="gulp-series"><a href="#gulp-series" class="headerlink" title="gulp.series"></a>gulp.series</h3><p>こちらはTaskを直列化できる。</p>
<script src="//gist.github.com/kazu69/020451222ded7461a7cc.js?file=gulpfile2.js"></script>
<script src="//gist.github.com/kazu69/020451222ded7461a7cc.js?file=series.sh"></script>
<h3 id="gulp-tree"><a href="#gulp-tree" class="headerlink" title="gulp.tree"></a>gulp.tree</h3><p>タスクの依存性をtreeで返す。内部的にはを呼んでいる。<a href="https://github.com/phated/undertaker#options" target="_blank" rel="external">optionはundertakerと同じ</a>。</p>
<script src="//gist.github.com/kazu69/020451222ded7461a7cc.js?file=gulpfile3.js"></script>
<script src="//gist.github.com/kazu69/020451222ded7461a7cc.js?file=tree.sh"></script>
<h3 id="gulp-registry"><a href="#gulp-registry" class="headerlink" title="gulp.registry"></a>gulp.registry</h3><p>カスタムタスクを登録する。</p>
<p>例えば、別ファイルに分割してあるタスクをrequireして、registryを使って登録することで、<br>読み込んだタスクを使えるようになる。</p>
<p>これまでファイルを分割した際は、<a href="https://www.npmjs.com/package/require-dir" target="_blank" rel="external">require-dir</a>などでファイルを読込んでいたのが、v4.0からはrequireしてregistryで行うようになり、直感的に扱える感じになる。</p>
<p>例えば以下のようにタスクを別ファイルに作成している場合</p>
<script src="//gist.github.com/kazu69/020451222ded7461a7cc.js?file=custom.js"></script>
<p>reqistryで登録することで使用できる。</p>
<script src="//gist.github.com/kazu69/020451222ded7461a7cc.js?file=gulpfile4.js"></script>
<h3 id="gulp-lastRun"><a href="#gulp-lastRun" class="headerlink" title="gulp.lastRun"></a>gulp.lastRun</h3><p>タスクの完了した時間をUNIX TIMESTAM(millisecond)で返す。</p>
<script src="//gist.github.com/kazu69/020451222ded7461a7cc.js?file=gulpfile5.js"></script>
<hr>
<p>ということで、ざっくり見て行ったがバージョン4.0から非同期処理まわりがpluginなしで行えるようになる。<br>v4.0がいつリリースされるのかちょっとわからないが、必要あであれば先にundertakerを使っておくようにすると良さそう。</p>
<p>参考サイト<br><a href="http://www.ociweb.com/resources/publications/sett/gulp-4/" target="_blank" rel="external">gulp 4</a><br><a href="http://blog.reactandbethankful.com/posts/2015/04/23/building-with-gulp-3-and-4-part-2-gulp-anatomy/" target="_blank" rel="external">Building with Gulp 3 and 4 (Part 2: Gulp’s anatomy)</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>gulpfileをES6に置き換える必要があり、何気にgulpの情報追っていると、<br>そろそろv4.0がリリースされそうなのでざっくりと眺めてみた。</p>]]>
    
    </summary>
    
      <category term="node" scheme="http://blog.kazu69.net/tags/node/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[low-level css framework Basscssが良さそうなきがする]]></title>
    <link href="http://blog.kazu69.net/2015/08/09/low-level-css-basscss-looks-good/"/>
    <id>http://blog.kazu69.net/2015/08/09/low-level-css-basscss-looks-good/</id>
    <published>2015-08-09T03:41:24.000Z</published>
    <updated>2015-08-10T05:51:27.000Z</updated>
    <content type="html"><![CDATA[<p>ここ最近結構cssを弄っていたけど、その時に見つけた<a href="http://www.basscss.com/" target="_blank" rel="external">Basscss</a>というcss Frameworkが良さそうだった。</p>
<a id="more"></a>
<p>BasscssはOOCSSの原理に則り設計されている。<br>特徴としては、依存度の小さいImuutableなutility moduleを備えている。<br>依存性が低いので、副作用が少なくなる。<br>また軽量であり、<a href="https://github.com/postcss/postcss" target="_blank" rel="external">postCSS</a>を使っているおり、必要なmoduleのみをビルドできる。</p>
<h2 id="u30DE_u30EB_u30C1_u30AF_u30E9_u30B9_u3067_u306E_u5B9F_u88C5"><a href="#u30DE_u30EB_u30C1_u30AF_u30E9_u30B9_u3067_u306E_u5B9F_u88C5" class="headerlink" title="マルチクラスでの実装"></a>マルチクラスでの実装</h2><p><a href="http://www.basscss.com/docs/guides/" target="_blank" rel="external">Document</a>にある通りなのだが、マルチクラスで実装している。</p>
<p>以下のような感じ(<a href="http://www.basscss.com/docs/guides/layout/" target="_blank" rel="external">Page Layoutより</a>)</p>
<script src="//gist.github.com/kazu69/8e71f5307a7a93c9f236.js?file=navigation.html"></script>
<script src="//gist.github.com/kazu69/8e71f5307a7a93c9f236.js?file=3colums.html"></script>
<p>基本的な機能をImuutableなmoduleで実装していくことで、変更に対しても柔軟に対応できる。<br>また、Imuutableなmoduleはシンプルな設計なのでコードの可読性が確保できる。<br>HTML側が複雑になるという懸念もあるが、シングルクラス設計に比べHTML側である程度スタイルが予想できる点では、メリットになるのではないかなと思う。</p>
<h2 id="u4F9D_u5B58_u5EA6_u304C_u4F4E_u3044"><a href="#u4F9D_u5B58_u5EA6_u304C_u4F4E_u3044" class="headerlink" title="依存度が低い"></a>依存度が低い</h2><p><a href="http://www.basscss.com/stats/" target="_blank" rel="external">stats</a> にあるように、依存度が低いことがこのFrameworkの特徴。</p>
<p>CSSはシングルクラスで設計する場合、どうしても依存性が高くなり、副作用が発生してくる。<br>マルチクラス設計にしてしまうことで、この問題を回避している。<br>サービス運用していくうちに、ネーミングルールと継承のあたりで、CSSは破綻の方に向かっていきがちなので、<br>依存度の低いFrameworkを使用して、基本設計を行うことで解決できるではないかと思う。</p>
<p><a href="http://www.basscss.com/docs/reference/principles/" target="_blank" rel="external">principles</a>にあるように、Basscssでは、短くシンプルな命名規則を用い、コンテンツに由来するコンポーネントの再利用を避けること。基本的なコンポーネントの構造はテーマから分離することなど、設計の原則もはっきりしている。</p>
<p>自分でもCSSの設計は色々な手法を試してみたが、マルチクラスでImuutableなmoduleを使うことに落ち着いた。<br>Basscssは自分が実務で取り入れた考え方なり、実装方法と似た感じだった。</p>
<p>Basscssのような依存度の低いImuutableなmoduleをうまく使ってマルチクラスで実装し、運用していく手法を選択するか、<br>厳密なネーミングルールのもとシングルクラスで実装し、運用フェーズでCSSが破綻する前にコンポーネントそのものを作り直していく手法のどちらかが今の所いいのかなと思っている。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>ここ最近結構cssを弄っていたけど、その時に見つけた<a href="http://www.basscss.com/">Basscss</a>というcss Frameworkが良さそうだった。</p>]]>
    
    </summary>
    
      <category term="css" scheme="http://blog.kazu69.net/tags/css/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HTTP/2サーバーh2oでサーバプッシュを試してみた]]></title>
    <link href="http://blog.kazu69.net/2015/08/05/try-http2-with-h2o-and-mruby/"/>
    <id>http://blog.kazu69.net/2015/08/05/try-http2-with-h2o-and-mruby/</id>
    <published>2015-08-05T07:56:14.000Z</published>
    <updated>2015-08-06T11:25:34.000Z</updated>
    <content type="html"><![CDATA[<p>HTTP/2 serverである<a href="https://github.com/h2o/h2o" target="_blank" rel="external">h2o</a>で初めてのサーバプッシュを試してみた。</p>
<a id="more"></a>
<p>今回は<a href="https://github.com/matsumoto-r/h2o_mruby" target="_blank" rel="external">h2o_mruby</a>も触ってみたかったということで、h2oをmrubyとともにビルドして少し触ってみた。</p>
<p><a href="http://blog.kazu69.net/2015/07/20/tried-to-touch-nginx-mruby/">前回</a>試してみた<a href="https://github.com/matsumoto-r/ngx_mruby" target="_blank" rel="external">nginx_mruby</a>と同じくh2o_mrunyもサーバーをrubyで動的に制御することができる。</p>
<h2 id="u30B5_u30FC_u30D0_u30D7_u30C3_u30B7_u30E5_u3068_u306F"><a href="#u30B5_u30FC_u30D0_u30D7_u30C3_u30B7_u30E5_u3068_u306F" class="headerlink" title="サーバプッシュとは"></a>サーバプッシュとは</h2><p>HTTP/1の場合、サーバーはクライアントからのリクエストに応じて、レスポンスを返すものでした。<br>しかし、HTTP/2の場合はクライアントからのリクエストがなくても、サーバーからレスポンスを返すことができる。</p>
<p>今回は<a href="https://w3c.github.io/resource-hints/" target="_blank" rel="external">resouce hints</a>にあるように、リクエストヘッダーに<code>link:&lt;style.css&gt;; rel=preload; as=stylesheet</code> のようなLinkヘッダーを追加してレスポンスを返すようにした。</p>
<p>こうすることで、h2oサーバーは予めクライアントが次に何をリクエストするのか把握できる。<br>そして、クライアントがリクエストする前に、このファイルを返してくれる。</p>
<p>これにより、クライアントは次のリクエストからそのレスポンスまでの待ち時間(レイテンシ)を短縮できる。<br>そのため、これまでよりもブラウザは早く描画を行うことができるということになるっぽい。</p>
<h2 id="u69CB_u6210"><a href="#u69CB_u6210" class="headerlink" title="構成"></a>構成</h2><p>今回は、フロントにh2oを立たせて、リクエストをnginxにproxyする。<br>そして、nginx側でheaderにLinkヘッダーを追加してレスポンスを返す。</p>
<p>こうすることで、h2oはヘッダーを解釈して、サーバプッシュを行ってくれる。</p>
<script src="//gist.github.com/kazu69/fb321bd71b19878bd99d.js?file=structure.txt"></script>
<p>手元の開発環境は以下の感じ<br>今回はサーバー側からプッシュする静的ファイルとして適当なcssをnginx側に追加しておいた。</p>
<script src="//gist.github.com/kazu69/fb321bd71b19878bd99d.js?file=tree.sh"></script>
<h2 id="h2o_with_mruby__u306E_u69CB_u7BC9"><a href="#h2o_with_mruby__u306E_u69CB_u7BC9" class="headerlink" title="h2o with mruby の構築"></a>h2o with mruby の構築</h2><p>今回もubuntuで、以下のようにDcokerでコンテナをビルドした。</p>
<script src="//gist.github.com/kazu69/fb321bd71b19878bd99d.js?file=Dockerfile"></script>
<script src="//gist.github.com/kazu69/fb321bd71b19878bd99d.js?file=h2o.conf"></script>
<script src="//gist.github.com/kazu69/fb321bd71b19878bd99d.js?file=build_config.rb"></script>
<h2 id="nginx__u306E_u69CB_u7BC9"><a href="#nginx__u306E_u69CB_u7BC9" class="headerlink" title="nginx の構築"></a>nginx の構築</h2><p>nginxは<a href="http://blog.kazu69.net/2015/07/20/tried-to-touch-nginx-mruby/">前回</a>と同じ感じで作成した。</p>
<script src="//gist.github.com/kazu69/1a1922409dd3514f6f6c.js?file=Dockerfile"></script>
<p>nginx.confは以下のようにして</p>
<script src="//gist.github.com/kazu69/1a1922409dd3514f6f6c.js?file=nginx.conf"></script>
<p>modify_header.rb でレスポンスヘッダーにLinkヘッダーを追加する。</p>
<script src="//gist.github.com/kazu69/fb321bd71b19878bd99d.js?file=modify_header.rb"></script>
<h2 id="u30D6_u30E9_u30A6_u30B6_u3067_u30A2_u30AF_u30BB_u30B9_u3067_u304D_u308B_u3088_u3046_u306BPortFoward"><a href="#u30D6_u30E9_u30A6_u30B6_u3067_u30A2_u30AF_u30BB_u30B9_u3067_u304D_u308B_u3088_u3046_u306BPortFoward" class="headerlink" title="ブラウザでアクセスできるようにPortFoward"></a>ブラウザでアクセスできるようにPortFoward</h2><p><a href="http://boot2docker.io/" target="_blank" rel="external">boot2docker</a>をつかっているので、ブラウザでDcokerコンテナにアクセスできるようにPortFowardしておく。</p>
<script src="//gist.github.com/kazu69/fb321bd71b19878bd99d.js?file=portfoward.sh"></script>
<h2 id="Docker_run"><a href="#Docker_run" class="headerlink" title="Docker run"></a>Docker run</h2><p>準備できたのでnginx、 h2oのコンテナを立ち上げていく。</p>
<script src="//gist.github.com/kazu69/fb321bd71b19878bd99d.js?file=docker_run.sh"></script>
<p>nginxのipを泥臭く取ってきてから、h2oをビルドしてしまったが、<br>本当は <a href="http://blog.matsumoto-r.jp/?p=4326" target="_blank" rel="external">Dockerとmrubyで迅速かつ容易にnginxとapacheの柔軟なリバースプロキシ構成を構築する</a> にあるようにmrubyで動的変更できるように、環境変数を使って対応する予定でした。<br>しかし、h2o_mrubyを把握できてないのでうまくいかずに、今回は一旦保留とした。</p>
<p>とりあえず、これでブラウでアクセスしてみると分かりそう。</p>
<h2 id="u30D6_u30E9_u30A6_u30B6_28Chrome_29_u3067_u30A2_u30AF_u30BB_u30B9"><a href="#u30D6_u30E9_u30A6_u30B6_28Chrome_29_u3067_u30A2_u30AF_u30BB_u30B9" class="headerlink" title="ブラウザ(Chrome)でアクセス"></a>ブラウザ(Chrome)でアクセス</h2><p>あらかじめ <strong>chrome://net-internals/#events</strong> を開いておき、ブラウザでh2oサーバーにアクセス。</p>
<p>すると、htmlへのリクエストはh2oでproxyされて、nginxのhtmlが帰ってくる。</p>
<p>このリクエストのhttpヘッダーを見ると</p>
<script src="//gist.github.com/kazu69/fb321bd71b19878bd99d.js?file=http-header.txt"></script>
<p>正しくLinkヘッダーが追加されている。</p>
<p>chrome://net-internals/#events で <code>HTTP2_SESSION</code> を確認すると</p>
<script src="//gist.github.com/kazu69/fb321bd71b19878bd99d.js?file=chrome_header.txt"></script>
<p>確かに、<code>HTTP2_SESSION_RECV_PUSH_PROMISE</code> とあり、サーバー側でpushしているのが確認できました。</p>
<p>今回はh2o_mrubyまで詳しく把握できなくて、ipを動的に変更できなかったが、おそらく切り替ることはできるだと思う。</p>
<p>また折を見て、h2o+mrubyを個人サービスのフロントに立たせてみることにチャレンジしてみようかな。</p>
<p>参考にしたページ<br><a href="http://techblog.yahoo.co.jp/infrastructure/http2/introduction_to_http2/" target="_blank" rel="external">HTTP/2 入門</a><br><a href="http://labs.gree.jp/blog/2014/12/11987/" target="_blank" rel="external">初めてのHTTP/2サーバプッシュ</a><br><a href="http://jxck.hatenablog.com/entry/http2-server-side-architecture" target="_blank" rel="external">HTTP2 時代のサーバサイドアーキテクチャ考察</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>HTTP/2 serverである<a href="https://github.com/h2o/h2o">h2o</a>で初めてのサーバプッシュを試してみた。</p>]]>
    
    </summary>
    
      <category term="mruby" scheme="http://blog.kazu69.net/tags/mruby/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[nginx_mrubyを試してみた]]></title>
    <link href="http://blog.kazu69.net/2015/07/20/tried-to-touch-nginx-mruby/"/>
    <id>http://blog.kazu69.net/2015/07/20/tried-to-touch-nginx-mruby/</id>
    <published>2015-07-20T04:32:23.000Z</published>
    <updated>2015-08-17T04:38:12.000Z</updated>
    <content type="html"><![CDATA[<p>nginxの設定をrubyでダイナミックに設定できる<a href="https://github.com/matsumoto-r/ngx_mruby" target="_blank" rel="external">nginx_mruby</a>を試してみた。</p>
<a id="more"></a>
<p>個人的にnginx_mrubyを使うことのメリットは、サーバーの設定をダウンタイムなしに変更できるという点と、<br>rubyを使ってアプリケーションコードを書くように、サーバーの設定扱うことができる(rack middlewareのように)という点と感じた。</p>
<h2 id="nginx_mruby_u306E_u30D3_u30EB_u30C9"><a href="#nginx_mruby_u306E_u30D3_u30EB_u30C9" class="headerlink" title="nginx_mrubyのビルド"></a>nginx_mrubyのビルド</h2><p>今回はOSをDocker + ubuntuで試してみた。</p>
<p><a href="https://github.com/matsumoto-r/ngx_mruby/wiki/Install" target="_blank" rel="external">wikiのinstall</a>を参考にした感じなのだが、以下のようになった。</p>
<script src="//gist.github.com/kazu69/1a1922409dd3514f6f6c.js?file=Dockerfile"></script>
<p>mrubyはビルドの設定をbuild_config.rbというファイルで行う。今回はbasic認証を行ってみようと思うので<br>mrubyのgemであるmgemに<a href="https://github.com/mattn/mruby-base64" target="_blank" rel="external">mruby-base64</a>を追加した。</p>
<p>ちなみに、同じようにapacheのconfをmrubyで制御できる<a href="https://github.com/matsumoto-r/mod_mruby/" target="_blank" rel="external">mod_mruby</a>にはbasic認証のために<a href="https://github.com/matsumoto-r/mod_mruby/wiki/Directives#basic-auth" target="_blank" rel="external">mrubyAuthnCheckPasswordというDirectiveが存在していた</a>。</p>
<p>ということで、今回は以下のようにした。</p>
<script src="//gist.github.com/kazu69/1a1922409dd3514f6f6c.js?file=build_config.rb"></script>
<p><a href="https://github.com/matsumoto-r/ngx_mruby/wiki/Directives" target="_blank" rel="external">ngx_mrubyのwiki</a>にあるように、サーバーの各イベントでrubyファイルをhookできるdirectiveがかある。</p>
<p>これをconfファイルで設定していく。<br>ファイルパスを渡すものとインラインでrubyのコードを書けるものが存在している。</p>
<script src="//gist.github.com/kazu69/1a1922409dd3514f6f6c.js?file=nginx.conf"></script>
<p>実際に処理を行うのはrubyでかけるので、</p>
<script src="//gist.github.com/kazu69/1a1922409dd3514f6f6c.js?file=authn_basic.rb"></script>
<p>これで dockerのコンテナにアクセス、basic_auth ディレクトリにアクセスでbasic認証ができている。</p>
<h2 id="basic_u8A8D_u8A3C_u3057_u3066_u307F_u308B"><a href="#basic_u8A8D_u8A3C_u3057_u3066_u307F_u308B" class="headerlink" title="basic認証してみる"></a>basic認証してみる</h2><script src="//gist.github.com/kazu69/1a1922409dd3514f6f6c.js?file=basic_auth.sh"></script>
<h2 id="u30D6_u30E9_u30A6_u30B6_u3067_u30A2_u30AF_u30BB_u30B9_u3057_u3066_u307F_u308B"><a href="#u30D6_u30E9_u30A6_u30B6_u3067_u30A2_u30AF_u30BB_u30B9_u3057_u3066_u307F_u308B" class="headerlink" title="ブラウザでアクセスしてみる"></a>ブラウザでアクセスしてみる</h2><p>今回はboot2dockerをつかったのでブラウザアクセスするために、<br>virtualboxとホストマシン間でのポートフォワーディングの設定が必要。</p>
<script src="//gist.github.com/kazu69/1a1922409dd3514f6f6c.js?file=boot2docker-virtualbox-portformarding.sh"></script>
<p>ブラウザで localhost:8080 でアクセスできるようになる。</p>
<p>basic認証だとあまり良い例にはならなかったけど、例えば、特定のディレクトリへのアクセスなどを制御したい時に、<br>nginxのconfに正規表現などでいろいろと書くより、rubyでかける方が個人的には敷居が低く感じる。</p>
<p>実際にインフラ周りの知識はあまりないけど、rubyでサーバーを柔軟に制御できるのは便利だと思った。</p>
<p>あと、mrubyのデバッグについて良い方法が知りたい。</p>
<p><a href="https://github.com/kazu69/ngx_mruby_playground" target="_blank" rel="external">今回作ったもの</a></p>
<p>参考にしたページ<br><a href="https://github.com/matsumoto-r/ngx_mruby" target="_blank" rel="external">nginx_mruby</a><br><a href="http://qiita.com/takeswim/items/bf88ea7bb76e11fdc71e" target="_blank" rel="external">ngx_mrubyを使って簡易ファイル共有システムを作る</a><br><a href="http://qiita.com/matsumotory/items/7121d6cce728125e5ce2" target="_blank" rel="external">mod_mrubyインストール後入門</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>nginxの設定をrubyでダイナミックに設定できる<a href="https://github.com/matsumoto-r/ngx_mruby">nginx_mruby</a>を試してみた。</p>]]>
    
    </summary>
    
      <category term="mruby" scheme="http://blog.kazu69.net/tags/mruby/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[cssnextを使って最新のcss syntaxで開発するのが良さそう]]></title>
    <link href="http://blog.kazu69.net/2015/06/15/develop-latest-css-syntax-using-cssnext/"/>
    <id>http://blog.kazu69.net/2015/06/15/develop-latest-css-syntax-using-cssnext/</id>
    <published>2015-06-14T15:00:32.000Z</published>
    <updated>2015-07-13T11:16:24.000Z</updated>
    <content type="html"><![CDATA[<p>ここ最近CSSを扱うことが多かったので、その際にPostprocessorを検討時にcssnextについてまとめた備忘録。</p>
<a id="more"></a>
<h2 id="JavaScript_u306E_u6700_u8FD1_u306E_u4E8B_u60C5"><a href="#JavaScript_u306E_u6700_u8FD1_u306E_u4E8B_u60C5" class="headerlink" title="JavaScriptの最近の事情"></a>JavaScriptの最近の事情</h2><p>javascriptではES6でコードを書き、BabelでTransplieするという流れが定着しつつある。<br>これは、これまで必要だったライブラリが不要になり、コードが依存するライブラリを減らすことができ、altJSに頼らないで開発できるという利点からである。</p>
<p>同じことがCSSでも起きている。まずこれまでCSSを牽引してきた<a href="http://sass-lang.com/" target="_blank" rel="external">Sass</a>について。</p>
<h2 id="Sass_u306E_u554F_u984C_u70B9"><a href="#Sass_u306E_u554F_u984C_u70B9" class="headerlink" title="Sassの問題点"></a>Sassの問題点</h2><p>最近のCSSの開発にはaltCSSとしてSass,Less,StylusなどのPreprocessorが使用されている。<br>特にSassはJavaScriptで言う所のjQueryに近い存在になり、APIもやや複雑になっている感じがある。</p>
<p>Sassを使っていても実際はそのほんの一部の機能だけで開発していることが多い。<br>実際、Sassを使うにあたり必要な機能はほんの一握りなのでその機能だけ切り取り使えると、もっと軽く使える気もする。</p>
<p>また、仮に他のaltCSSへの乗り換えの際にはSassの資産をそのまま使えるとは限らない。<br>などという懸念点を回避する手法として、CSSの先行実装を取り入れるという考え方でcssnextが選択肢に上がる。</p>
<h2 id="cssnext_u3068_u306F"><a href="#cssnext_u3068_u306F" class="headerlink" title="cssnextとは"></a>cssnextとは</h2><p><a href="http://cssnext.io/" target="_blank" rel="external">cssnext</a>はcssの先行実装をサポートしていないブラウザも使えるようにするPostprocessorである。<br>あくまでcssのsyntaxのみで構成されているので、利用している機能を将来的にブラウザがサポートさえしてくれれば<br>cssnextでTransplileする必要すらなくなる。</p>
<p>cssnext自体はpostcssを使っているので、必要なpluginを選択的に使える。これにより変換に時間がかかるという問題も解消できそう。</p>
<p>メジャーなcss frameworkの<a href="https://twitter.com/mdo/status/591364406816079873" target="_blank" rel="external">Bootstrapはver5からpostcss</a>に、<a href="https://github.com/zurb/foundation/issues/6533" target="_blank" rel="external">Foundationもcssnext</a>を検討している。</p>
<p>ということで、実際にどのようなことができるのか機能を一通り触ってみた。</p>
<h2 id="cssnext_features"><a href="#cssnext_features" class="headerlink" title="cssnext features"></a>cssnext features</h2><h3 id="u8A2D_u5B9A_28config_29"><a href="#u8A2D_u5B9A_28config_29" class="headerlink" title="設定(config)"></a>設定(config)</h3><p>configオプションまたは設定ファイルで、使う機能を選択できる。</p>
<p>基本的にbrowsersオプションを指定しておけば、autoprefixerが<a href="http://caniuse.com/" target="_blank" rel="external">caniuse</a>のdatabaseを参照して、個別にfeaturesをenabled、disabledを判断します。(@MoOxのアドバイスをもとに追記)</p>
<p>もし、個別に機能を制御するならば、各種の変換はpostcssのpluginなので、そのオプションも設定できる。<br>ちなみに、設定ファイルを使う場合は<a href="https://github.com/cssnext/cssnext/issues/73" target="_blank" rel="external">.cssnextrcという名前でjsonかyaml形式になりそう</a>。</p>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=.cssnextrc"></script>
<h3 id="Custom_Properties"><a href="#Custom_Properties" class="headerlink" title="Custom Properties"></a>Custom Properties</h3><p>カスタムプロパティ。cssnextでは現状はrootで定義しないといけない</p>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=custom_properties.src.css"></script>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=custom_properties.dest.css"></script>
<h3 id="Calc_Function"><a href="#Calc_Function" class="headerlink" title="Calc Function"></a>Calc Function</h3><p>calc function。様々な単位で複雑な計算ができて便利。</p>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=calc.src.css"></script>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=calc.dest.css"></script>
<h3 id="Custom_Media_Queries"><a href="#Custom_Media_Queries" class="headerlink" title="Custom Media Queries"></a>Custom Media Queries</h3><p>media queryにタイプにユーザー定義のプロパティを使えるようになる。<br>これまでは同じ設定を必要に応じていくつも書くことがあったが、とりあえず、プロパティで一元管理できるようになる。</p>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=custom_media_query.src.css"></script>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=custom_media_query.dest.css"></script>
<h3 id="Custom_Selectors"><a href="#Custom_Selectors" class="headerlink" title="Custom Selectors"></a>Custom Selectors</h3><p>@custome-selectorルールが使えるようになり、冗長な記述をしなくて済むようになる。</p>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=custom_selectors.src.css"></script>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=custom_selectors.dest.css"></script>
<h3 id="Color_Function"><a href="#Color_Function" class="headerlink" title="Color Function"></a>Color Function</h3><p>SassなどのColor Functionのように色を関数で扱うことができるようになる。</p>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=color.src.css"></script>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=color.dest.css"></script>
<h3 id="hwd_28Hue-Whiteness-Blackness_29_Function"><a href="#hwd_28Hue-Whiteness-Blackness_29_Function" class="headerlink" title="hwd(Hue-Whiteness-Blackness) Function"></a>hwd(Hue-Whiteness-Blackness) Function</h3><p>色相の関数で扱う。色合いと白色度、黒色度から色相を変換できる。</p>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=hwb.src.css"></script>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=hwb.dest.css"></script>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=hwb.src.css"></script>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=hwb.dest.css"></script>
<h3 id="Gray_Function"><a href="#Gray_Function" class="headerlink" title="Gray Function"></a>Gray Function</h3><p>グレースケールな色をのみを生成する関数。</p>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=gray.src.css"></script>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=gray.dest.css"></script>
<h3 id="Hex_Color"><a href="#Hex_Color" class="headerlink" title="Hex Color"></a>Hex Color</h3><p>アルファチャンネンルを追加した、RRGGBBAA形式でのhex colorが使える。</p>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=rrggbbaa.src.css"></script>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=rrggbbaa.dest.css"></script>
<h3 id="Rebeccapurple"><a href="#Rebeccapurple" class="headerlink" title="Rebeccapurple"></a>Rebeccapurple</h3><p><a href="http://lists.w3.org/Archives/Public/www-style/2014Jun/0312.html" target="_blank" rel="external">6歳にして亡くなった、Eric Meyer氏の娘の名前</a>らしい。</p>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=rebeccapurple.src.css"></script>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=rebeccapurple.dest.css"></script>
<h3 id="font-variant__u30D7_u30ED_u30D1_u30C6_u30A3"><a href="#font-variant__u30D7_u30ED_u30D1_u30C6_u30A3" class="headerlink" title="font-variant プロパティ"></a>font-variant プロパティ</h3><p>フォントをsmall capsにする際に使う。</p>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=font_variant.src.css"></script>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=font_variant.dest.css"></script>
<h3 id="filter__u30D7_u30ED_u30D1_u30C6_u30A3"><a href="#filter__u30D7_u30ED_u30D1_u30C6_u30A3" class="headerlink" title="filter プロパティ"></a>filter プロパティ</h3><p>svgのフィルタエフェクトを適用する。これは結構嬉しい。</p>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=filter.src.css"></script>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=filter.dest.css"></script>
<h3 id="Rem_unit"><a href="#Rem_unit" class="headerlink" title="Rem unit"></a>Rem unit</h3><p>rem(root em)をサポートする。</p>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=rem.src.css"></script>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=rem.dest.css"></script>
<h3 id="Pseudo_Elements"><a href="#Pseudo_Elements" class="headerlink" title="Pseudo Elements"></a>Pseudo Elements</h3><p>擬似要素のサポート。</p>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=pseudo_elements.src.css"></script>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=pseudo_elements.dest.css"></script>
<h3 id="Matches"><a href="#Matches" class="headerlink" title="Matches"></a>Matches</h3><p>matches 擬似クラス。冗長になりがちなセレクターを簡潔に表現できるようになる。</p>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=matches.src.css"></script>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=matches.dest.css"></script>
<h3 id="Not"><a href="#Not" class="headerlink" title="Not"></a>Not</h3><p>否定擬似クラス。Matchesと同じく、セレクターを簡潔にできるようになる。</p>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=not.src.css"></script>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=not.dest.css"></script>
<h3 id="@import"><a href="#@import" class="headerlink" title="@import"></a>@import</h3><p>Sassなどと同じように特定のstylesheetをimportする。<br>相対パス、node_modules, web_modulesから読み込みをこなう。</p>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=import.src.css"></script>
<h3 id="with_Gulp"><a href="#with_Gulp" class="headerlink" title="with Gulp"></a>with Gulp</h3><p>gulpでは<a href="https://www.npmjs.com/package/gulp-cssnext" target="_blank" rel="external">gulp-cssnext</a>や<a href="https://www.npmjs.com/package/gulp-postcss" target="_blank" rel="external">gulp-postcss</a>を使う感じになる。</p>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=gulpfile.js"></script>
<h2 id="u307E_u3068_u3081"><a href="#u307E_u3068_u3081" class="headerlink" title="まとめ"></a>まとめ</h2><p>ということで、今回挙げたようなcssの新しいモジュールはaltCSSで提供されているAPIに影響を受けた感じであるので、記法はともかく機能は大体予想がつく。そのため、学習コストはあまり高くない気がする。</p>
<p>postcssということでautoprefixerなどがdefaultで機能するので、fallbackなどもあまり意識しないで済みそう。</p>
<p>CSS標準のマークアップで開発をすることでいいということが大きな利点と思う。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>ここ最近CSSを扱うことが多かったので、その際にPostprocessorを検討時にcssnextについてまとめた備忘録。</p>]]>
    
    </summary>
    
      <category term="css" scheme="http://blog.kazu69.net/categories/css/"/>
    
      <category term="tec" scheme="http://blog.kazu69.net/categories/css/tec/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[itamaeでVagrantとDockerにNodeJS環境を作ってみた]]></title>
    <link href="http://blog.kazu69.net/2015/06/13/make-nodejs-development-environment-vagrant-and-docker-with-itamae/"/>
    <id>http://blog.kazu69.net/2015/06/13/make-nodejs-development-environment-vagrant-and-docker-with-itamae/</id>
    <published>2015-06-13T02:41:14.000Z</published>
    <updated>2015-06-18T09:46:34.000Z</updated>
    <content type="html"><![CDATA[<p>軽量Chef的なプロビジョニングツールitamaeを使って、<br>VagrantとDcokerにNodeJS環境を作ってみたときの備忘録。</p>
<a id="more"></a>
<p>Centosにndenvを使い、nodejs(ver0.12.0)とio.js(ver1.2.0)をインストールする。</p>
<h2 id="u4E8B_u524D_u6E96_u5099"><a href="#u4E8B_u524D_u6E96_u5099" class="headerlink" title="事前準備"></a>事前準備</h2><p>ディレクトリ構造は<a href="https://github.com/itamae-kitchen/itamae/wiki/Best-Practice" target="_blank" rel="external">Best Practice</a>を元に、以下のようにした。</p>
<script src="//gist.github.com/kazu69/8b824595016ba612ff53.js?file=tree.sh"></script>
<p>レシピは以下のとおり、普通にndenvを設定しているだけ。</p>
<script src="//gist.github.com/kazu69/8b824595016ba612ff53.js?file=ruby_build.rb"></script>
<h2 id="Vagrant_+_ssh"><a href="#Vagrant_+_ssh" class="headerlink" title="Vagrant + ssh"></a>Vagrant + ssh</h2><p>Vagrantにsshでレシピを実行する、その際に–vagrantオプションを付ける。</p>
<script src="//gist.github.com/kazu69/8b824595016ba612ff53.js?file=vagrant_ssh.sh"></script>
<h2 id="Vagrant_+_vagrant-itamae"><a href="#Vagrant_+_vagrant-itamae" class="headerlink" title="Vagrant + vagrant-itamae"></a>Vagrant + vagrant-itamae</h2><p>vagrantプラグインの<a href="https://github.com/chiastolite/vagrant-itamae" target="_blank" rel="external">vagrant-itamae</a>を使うとsshより簡単にできそう。<br>これでvagrant provisionerにiamaeを指定するだけで済む。</p>
<script src="//gist.github.com/kazu69/8b824595016ba612ff53.js?file=Vagrantfile"></script>
<h2 id="Docker_+_ssh"><a href="#Docker_+_ssh" class="headerlink" title="Docker + ssh"></a>Docker + ssh</h2><p>Dockerの場合も。sshでrecipeを実行する。<br>–no-tls-verify-peerはsslのエラー(Excon::Errors::SocketError)でこけたので、オプションをつけた。</p>
<script src="//gist.github.com/kazu69/8b824595016ba612ff53.js?file=docker_ssh.sh"></script>
<p>ちょっとした開発環境構築にchefだと学習コストも全体のファイルサイズの規模感も大きくなりがちなに対して、itamaeだと、手元の環境構築はシンプルで、簡潔なサイズでちょうどでいい感じだった。</p>
<h2 id="u4ECA_u56DE_u4F5C_u3063_u305F_u30EC_u30B7_u30D4"><a href="#u4ECA_u56DE_u4F5C_u3063_u305F_u30EC_u30B7_u30D4" class="headerlink" title="今回作ったレシピ"></a>今回作ったレシピ</h2><p><a href="https://github.com/kazu69/nodejs-develop-environment-with-itamae" target="_blank" rel="external">nodejs-develop-environment-with-itamae</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>軽量Chef的なプロビジョニングツールitamaeを使って、<br>VagrantとDcokerにNodeJS環境を作ってみたときの備忘録。</p>]]>
    
    </summary>
    
      <category term="tec" scheme="http://blog.kazu69.net/categories/tec/"/>
    
      <category term="docker" scheme="http://blog.kazu69.net/categories/tec/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[FluxアーキテクチャのTodoMVCとImmutableJSを試してみた]]></title>
    <link href="http://blog.kazu69.net/2015/05/30/flux-architecture-todomvc-with-immutablejs/"/>
    <id>http://blog.kazu69.net/2015/05/30/flux-architecture-todomvc-with-immutablejs/</id>
    <published>2015-05-30T01:54:41.000Z</published>
    <updated>2015-07-14T13:44:10.000Z</updated>
    <content type="html"><![CDATA[<p>Fluxアーキテクチャにふれてみようということで、TodoMVCを試してみた。</p>
<a id="more"></a>
<h2 id="Flux_u30A2_u30FC_u30AD_u30C6_u30AF_u30C1_u30E3_u3068_u7279_u5FB4"><a href="#Flux_u30A2_u30FC_u30AD_u30C6_u30AF_u30C1_u30E3_u3068_u7279_u5FB4" class="headerlink" title="Fluxアーキテクチャと特徴"></a>Fluxアーキテクチャと特徴</h2><p>Fluxのページにあるので最近よくみる図だけど、Fluxのアーキテクチャは以下のとおり</p>
<img src="https://raw.githubusercontent.com/facebook/flux/master/docs/img/flux-diagram-white-background.png" width="600">
<p>4つに大きく分かれていて、それぞれの特徴は</p>
<ol>
<li><p>ActionCreators</p>
<ul>
<li>viewからのアクションを受けてDispatcherにPublish</li>
<li>外部のAPIとの連携を受け持ちを行う</li>
</ul>
</li>
<li><p>Dispatcher</p>
<ul>
<li>Viewからのアクションを受けてStoreに対してPublish</li>
<li>処理の実行順序制御を行い、依存性を解決する役割もある</li>
</ul>
</li>
<li><p>Store</p>
<ul>
<li>ビジネスロジックを受け持つ。</li>
<li>Dispatcherの通知をSubscribeして、アクションを実行する</li>
<li>データに変更があると、メッセージをPublishする</li>
<li>シングルトンオブジェクト</li>
</ul>
</li>
<li><p>Rect(View)</p>
<ul>
<li>UIコンポーネント</li>
<li>ユーザーからの入力(イベント)を受け取り、Actionを呼び出す</li>
<li>Storeの発行する通知をSubscribeして、画面の再描画を行う</li>
<li>描画は変更のある箇所のみ(VirtualDOM)</li>
</ul>
</li>
</ol>
<p>整理すると、</p>
<ul>
<li>StoreはActionのイベントを監視</li>
<li>ComponentはStoreのイベントを監視</li>
<li>Componentはイベントを通じてActionのイベントをPublish</li>
</ul>
<p>というサイクルの一連の処理の流れが単一方向で行われるオブザーバーパターン。<br>単一方向ということで複雑さが軽減でき、おおよその処理系統を推測できる。<br>アプリケーションが大きい場合は、運用にとってメリットとなりそう。</p>
<h2 id="TodoMVC"><a href="#TodoMVC" class="headerlink" title="TodoMVC"></a>TodoMVC</h2><p>TodoMVCのディレクトリ構成は以下の感じでした。</p>
<script src="//gist.github.com/kazu69/4f29d802a38ee478007b.js?file=dir.sh"></script>
<p>それぞれ役割ごとにディレクトリができている。<br>constantsはActionがPublishするメッセージが定義されているだけ。</p>
<p>イベントをPublish・Subscribeの箇所であるComponentとStore間はEventEmitterで、<br>ActionとStore間はFlux::Dispatcherを使っている。</p>
<p>EventEmitterとFlux::Dispatcherについては簡単には以下のようなもの。</p>
<script src="//gist.github.com/kazu69/4f29d802a38ee478007b.js?file=eventEmitter.js"></script>
<script src="//gist.github.com/kazu69/4f29d802a38ee478007b.js?file=flux.Dispatcher.js"></script>
<p>写経した<a href="https://github.com/kazu69/todomvc-with-flux-immutable" target="_blank" rel="external">TodoMVC</a>のコードをもとに見ていくと</p>
<script src="//gist.github.com/kazu69/4f29d802a38ee478007b.js?file=TodoItem.react.js"></script>
<p>チェックボックスをチェックすることでonChangeイベントでTodoActions.toggleCompleteが実行される。<br>Component上での変更はActionの該当するアクションにデータを渡す。</p>
<script src="//gist.github.com/kazu69/4f29d802a38ee478007b.js?file=TodoActions.js"></script>
<p>ActionはDispatcherにActionTypeをPublishする。</p>
<script src="//gist.github.com/kazu69/4f29d802a38ee478007b.js?file=TodoStore.js"></script>
<p>StoreではSubscribeしたActionTypeごとに適切な処理を行い、ChangeEventをPublishする。</p>
<script src="//gist.github.com/kazu69/4f29d802a38ee478007b.js?file=TodoItem.react.js"></script>
<p>Cpmponentはイベントを受け取りviewの再描画を行う。</p>
<h2 id="ImmutableJS_u3092_u4F7F_u3063_u305F"><a href="#ImmutableJS_u3092_u4F7F_u3063_u305F" class="headerlink" title="ImmutableJSを使った"></a>ImmutableJSを使った</h2><p>TodoMVCのStoreでデータはJavaScriptの単純なObjectだったが、今回は<a href="http://facebook.github.io/immutable-js/" target="_blank" rel="external">ImmutableJS</a>を使ってみた。</p>
<p>ImmutableJSを使用することにより、深い構造のObjectデータ操作が容易にできるほか、<br>パフォーマンス向上の為の<a href="https://facebook.github.io/react/docs/pure-render-mixin.html" target="_blank" rel="external">PureRenderMixin</a>などを使っている場合に起こる予期せぬ状態を避けることができるようだ。</p>
<p>ReactのコンポーネントライフサイクルではStoreからのイベントを受けて、差分があるコンポーネントを再描画する。<br>その際に呼ばれる<a href="http://facebook.github.io/react/docs/component-specs.html#updating-shouldcomponentupdate" target="_blank" rel="external">shouldComponentUpdate</a>の値がtrueとならない限りそれ以降が実行されない為、再描画されない(renderが実行されない)。</p>
<p>簡単な例としてカウントアップをする場合、</p>
<iframe width="100%" height="300" src="http://jsfiddle.net/kazu69/0rmf6tcn/embedded/js,resources,html,css,result/light" frameborder="0" allowfullscreen></iframe>
<p>shouldComponentUpdateがfalseを返すようにするとカウントアップされない。</p>
<iframe width="100%" height="300" src="http://jsfiddle.net/kazu69/puvwov20/embedded/js,resources,html,css,result/light" frameborder="0" allowfullscreen></iframe>
<p>PureRenderMixinはshouldcomponentupdateを利用して、変更前後のオブジェクトの値と参照をチェックし、変更がない場合はfalseを返す。<br>これにより変更がないとされ、無駄な再描画されないためパフォーマンスが向上する。</p>
<p>しかし、PureRenderMixinにも説明がにあるように、深い構造を持つObjectだと予期しないことになる。</p>
<iframe width="100%" height="300" src="http://jsfiddle.net/kazu69/zp9L4oxo/embedded/js,resources,html,css,result/light" frameborder="0" allowfullscreen></iframe>
<p>また、自前でshouldComponentUpdateに差分チェック機能を実装することもできるが、深い構造のオブジェクトのチェックが頻繁に呼び出されるshouldComponentUpdateで行うのはパフォーマンス的にもよろしくない。</p>
<p>ImmutableJSを使うと、以下のように単純な比較でも予期した通りの結果を得られる</p>
<script src="//gist.github.com/kazu69/4f29d802a38ee478007b.js?file=Immutable.js"></script>
<p>よってをPureRenderMixinでの予期せぬ結果を回避できるということのようだ。</p>
<iframe width="100%" height="300" src="http://jsfiddle.net/kazu69/1z2d98z4/embedded/js,resources,html,css,result/light" frameborder="0" allowfullscreen></iframe>
<p>ということで、<br>Fluxのアーキテクチャは単一方向性のオブザーバーパターンなので、これに従って、<br>BackboneやAngulerなどのフレームワークを組み合わせることである程度の規模でも煩雑さの少ない<br>アプリケーションができそう。</p>
<p>今回作成したTodoMVC <a href="https://github.com/kazu69/todomvc-with-flux-immutable" target="_blank" rel="external">kazu69/todomvc-with-flux-immutable</a></p>
<h3 id="u53C2_u8003_u306B_u3057_u305F_u30DA_u30FC_u30B8"><a href="#u53C2_u8003_u306B_u3057_u305F_u30DA_u30FC_u30B8" class="headerlink" title="参考にしたページ"></a>参考にしたページ</h3><p><a href="https://facebook.github.io/react/docs/advanced-performance.html" target="_blank" rel="external">Advanced Performance</a><br><a href="http://blog.risingstack.com/the-react-js-way-flux-architecture-with-immutable-js/" target="_blank" rel="external">The React.js Way: Flux Architecture with Immutable.js</a><br><a href="http://kenev.net/2015/03/08/react-purerendermixin%E3%81%AE%E6%A4%9C%E8%A8%BC/" target="_blank" rel="external">React – PureRenderMixinの検証</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Fluxアーキテクチャにふれてみようということで、TodoMVCを試してみた。</p>]]>
    
    </summary>
    
      <category term="javascript" scheme="http://blog.kazu69.net/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WordpressからHexoに移行してGitHub Pageで公開した]]></title>
    <link href="http://blog.kazu69.net/2015/05/16/moved-hexo/"/>
    <id>http://blog.kazu69.net/2015/05/16/moved-hexo/</id>
    <published>2015-05-16T00:36:08.000Z</published>
    <updated>2015-08-17T04:52:25.000Z</updated>
    <content type="html"><![CDATA[<p>ブログを長年使ってきたwordpressから重い腰を上げてHexoに移行した。<br>移行にあたり、やったことをメモにしておく。</p>
<a id="more"></a>
<p><a href="https://www.staticgen.com/" target="_blank" rel="external">staticgen.com</a> を見ながら<a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>か<a href="http://gohugo.io/" target="_blank" rel="external">Hugo</a>か悩んだが、比較的にwordpressから移行した情報が多いのでHexoにした。</p>
<p>特にnodeかGoかという理由ではなく、一度Static Generatorに移行できれば、あとは大きく変わらずに渡り歩けるだろうという軽い気持ち。</p>
<p>Hexoに移行するにあたり行った手順は大きく分けて</p>
<ol>
<li>wordpress記事のslugを英語化</li>
<li>wordpressのデータexport</li>
<li>Hexoデータをmigrate</li>
<li>wordpressの投稿からredirectできるようにalias作成</li>
<li>画像パスの変換</li>
<li>ブログのリダイレクト</li>
<li>Hexo運用でやったこと</li>
</ol>
<p>となった。</p>
<h2 id="wordpress_u306E_u8A18_u4E8B_u306Eslug_u3092_u82F1_u8A9E_u5316"><a href="#wordpress_u306E_u8A18_u4E8B_u306Eslug_u3092_u82F1_u8A9E_u5316" class="headerlink" title="wordpressの記事のslugを英語化"></a>wordpressの記事のslugを英語化</h2><p>Hexoに移行するにあたり、wordpressからexportした記事をmigrationするツールを使うが、<br>このツールだとwordpressでexportしたxmlの各投稿情報の <strong>wp:post_name</strong> の値をHexoのmarkdownファイルのファイル名として使ってしまう。</p>
<p>したがって、日本語などの場合URLエンコードされてしまい、どうやらうまくいかない。<br>ということでまずこの値を英語に翻訳する必要があった。</p>
<p><strong>wp:post_name</strong>はwordpressのslugということなので、全投稿のslugを自動翻訳する <a href="https://wordpress.org/plugins/wp-slug-translate/" target="_blank" rel="external">wp-slug-translate</a> を使った。</p>
<p><strong>wp-slug-translate</strong>は内部でMicrosoft Translator APIを使っているらしく、<a href="http://azure.microsoft.com/ja-jp/marketplace/" target="_blank" rel="external">Microsoft Azure Marketplace</a> にアカウント作成が必要だ。</p>
<p>詳しい手順は <a href="http://shumaiblog.com/wordpress-plugin-wp-slug-translate/" target="_blank" rel="external">WordPressのスラッグを日本語から英訳してくれるプラグイン「WP Slug Translate」</a> を参考にすすめた。</p>
<p>プラグインを有効化したのちに、管理画面から記事を数十件ごとに更新することで翻訳される。<br>この状態で、wordpressのデータをexportする準備が整った。</p>
<h2 id="wordpress_u306E_u30C7_u30FC_u30BF_u3092export"><a href="#wordpress_u306E_u30C7_u30FC_u30BF_u3092export" class="headerlink" title="wordpressのデータをexport"></a>wordpressのデータをexport</h2><p>WordPress管理画面 ＞ ツール ＞ エクスポート から全てのコンテンツをexportする。<br>これだけ。</p>
<h2 id="Hexo_u30C7_u30FC_u30BF_u3078_u306E_u30B3_u30F3_u30D0_u30FC_u30C8"><a href="#Hexo_u30C7_u30FC_u30BF_u3078_u306E_u30B3_u30F3_u30D0_u30FC_u30C8" class="headerlink" title="Hexoデータへのコンバート"></a>Hexoデータへのコンバート</h2><p><a href="http://hexo.io/docs/migration.html#WordPress" target="_blank" rel="external">hexoのドキュメント</a> にあるように、<a href="https://github.com/hexojs/hexo-migrator-wordpress" target="_blank" rel="external">hexo-migrator-wordpress</a> を使ってmigrationを行う。<br>これで投稿記事がhexoの記事形式のmarkdownファイルにmigrateできる。</p>
<h2 id="wordpress_u306E_u6295_u7A3F_u304B_u3089redirect_u3067_u304D_u308B_u3088_u3046_u306Balias_u4F5C_u6210"><a href="#wordpress_u306E_u6295_u7A3F_u304B_u3089redirect_u3067_u304D_u308B_u3088_u3046_u306Balias_u4F5C_u6210" class="headerlink" title="wordpressの投稿からredirectできるようにalias作成"></a>wordpressの投稿からredirectできるようにalias作成</h2><p>wordpressの記事のURL形式にもよるが、これまでwordpressの記事を <strong>category/記事ID/</strong> という形式で運用していたが、Hexoでは <strong>YYYY/MM/dd/ファイル名/</strong> で運用することになるので、リダイレクトする必要がある。</p>
<p>Static Generatorを使っている場合、リダイレクトするには移行前のURL直下にindex.htmlを置き、metaタグで refresしてリダイレクトすることで可能っぽい。</p>
<p><a href="https://github.com/hexojs/hexo-generator-alias" target="_blank" rel="external">hexo-generator-alias</a> を使うことでHexoのgenarate時にalias用のindex.htmlを作ることが可能。<br>あとは、各記事にalias用の設定を追加する。</p>
<p>wordpressの投稿URLはexportしたxmlに<strong>link</strong>タグの値となるので、簡単なスクリプトで<strong>hexo-generator-alias</strong>の設定を追加した。</p>
<p>xmlのパーサーには<a href="https://github.com/YorickPeterse/oga" target="_blank" rel="external">oga</a>を使ってみた。</p>
<script src="//gist.github.com/kazu69/6cea4d5e55992b7b2247.js?file=alias.rb"></script>
<p>これで <strong>/blog/CATEGORY/POST_ID/</strong> アクセスで該当の記事にリダイレクトされるようになった。<br>今回は運用をサブドメインにもいこうしたので、URIにblogが重複しているのは気にしない。</p>
<p>ここまでで、ほぼ完了した感じ。</p>
<h2 id="u753B_u50CF_u30D1_u30B9_u306E_u5909_u63DB"><a href="#u753B_u50CF_u30D1_u30B9_u306E_u5909_u63DB" class="headerlink" title="画像パスの変換"></a>画像パスの変換</h2><p>残りは画像のパスを修正する。画像ファイルを全てダウンロードし、<code>public/images/</code>へそのまま放り込んだ。<br>あとはパスを以下のスクリプトで変換した。</p>
<script src="//gist.github.com/kazu69/6cea4d5e55992b7b2247.js?file=image_replace.rb"></script>
<p><strong>/wp-contentt/uploads/</strong> を <strong>/images/</strong> に変換しているだけ。</p>
<h2 id="u30D6_u30ED_u30B0_u306E_u30EA_u30C0_u30A4_u30EC_u30AF_u30C8"><a href="#u30D6_u30ED_u30B0_u306E_u30EA_u30C0_u30A4_u30EC_u30AF_u30C8" class="headerlink" title="ブログのリダイレクト"></a>ブログのリダイレクト</h2><p>今回はドメインもサブドメインでの運用にかえるので、.htaccessで記事を301リダイレクトする。</p>
<p>結果としてこのやり方で移行できていないものは、</p>
<ul>
<li>ソーシャルなどのURLは引き継げない</li>
<li>RSSなどフィード情報はリダイレクトにいたっていない</li>
<li><a href="http://disqus.com" target="_blank" rel="external">Disqus</a> 使うことにしたのでworpressのコメントを引き継げない</li>
</ul>
<p>ということに至った。</p>
<p>ちなみにHexoではRSS feedを使うために別途 <a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="external">hexo-generator-feed</a> をインストール必要があった。</p>
<p>あと、テーマはとりあえず最低限必要なものを自作した。</p>
<p>package.jsonは以下のようになった。npm scriptsでHexoコマンドを叩いている。</p>
<script src="//gist.github.com/kazu69/6cea4d5e55992b7b2247.js?file=package.json"></script>
<h2 id="Hexo_u3067_u904B_u7528_u3059_u308B_u305F_u3081_u306B_u3084_u3063_u305F_u3053_u3068"><a href="#Hexo_u3067_u904B_u7528_u3059_u308B_u305F_u3081_u306B_u3084_u3063_u305F_u3053_u3068" class="headerlink" title="Hexoで運用するためにやったこと"></a>Hexoで運用するためにやったこと</h2><p>wordpressから移行して、Hexoで運用するにあたり<a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages</a>を利用することにした。</p>
<p>使っていたドメインプロバイダーではGitHub Pagesでの独自ドメインを使えなかった。そこで、CloudFlareだと無料プランでも <a href="https://blog.cloudflare.com/introducing-universal-ssl/" target="_blank" rel="external">Universal SSL</a> でも使えるということを見つけたので、ネームサーバーを <a href="https://www.cloudflare.com/" target="_blank" rel="external">CloudFlare</a> に移行した。</p>
<p>CloudFlareに申し込むと、ネームサーバーを指定されるので、ドメインプロバイダーの管理ページでDNSサーバーをCloudFlareに向ける。<br>あとは、ホスト名を書いたCNAMEファイルをドキュメントルートに配置するだけで、独自ドメインでの運用がすんなりとできた。</p>
<p>当初はBitbucketでも同じことができるので、そちらを使うか迷っていたが <a href="https://confluence.atlassian.com/display/BITBUCKET/Associate+an+existing+domain+with+an+account" target="_blank" rel="external">Associate an existing domain with an account</a> を見る限り、CNAMEでの運用はできなくなったぽい。</p>
<p>Hexo使ってわかったことは作者が台湾の方ということもあり、英語記事と同じくらい中国語の記事も出てくる。</p>
<h3 id="u53C2_u8003_u306B_u3057_u305F_u30DA_u30FC_u30B8"><a href="#u53C2_u8003_u306B_u3057_u305F_u30DA_u30FC_u30B8" class="headerlink" title="参考にしたページ"></a>参考にしたページ</h3><ul>
<li><a href="http://hexo.io/docs/migration.html#WordPress" target="_blank" rel="external">Migration | Hexo</a></li>
<li><a href="http://shumaiblog.com/wordpress-plugin-wp-slug-translate/" target="_blank" rel="external">WordPressのスラッグを日本語から英訳してくれるプラグイン「WP Slug Translate」</a></li>
<li><a href="http://pagent.github.io/2015/02/17/github-pages-redirect/" target="_blank" rel="external">GitHub Pagesのブログでリダイレクト「hexo-generator-alias」</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>ブログを長年使ってきたwordpressから重い腰を上げてHexoに移行した。<br>移行にあたり、やったことをメモにしておく。</p>]]>
    
    </summary>
    
      <category term="web" scheme="http://blog.kazu69.net/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ビルドツールとしてnpmを使う]]></title>
    <link href="http://blog.kazu69.net/2015/04/19/use-the-npm-as-the-build-tool/"/>
    <id>http://blog.kazu69.net/2015/04/19/use-the-npm-as-the-build-tool/</id>
    <published>2015-04-19T04:10:28.000Z</published>
    <updated>2015-05-10T16:21:06.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://gruntjs.com/" target="_blank" rel="external">Grunt</a>、 <a href="http://gulpjs.com/" target="_blank" rel="external">gulp</a>などを使うのではなく、npmをビルドタスクを使うためにちょっとおさらいした。</p>
<a id="more"></a>
<h2 id="npm_u306Epath"><a href="#npm_u306Epath" class="headerlink" title="npmのpath"></a>npmのpath</h2><p>npmでインストールすると、<br>モジュールは ./node_modules/にインストールされ、<br>node_modules/.bin配下に各パッケージのbinへのシンボリックリンクが作成される。</p>
<p>これは実際にnpm binを実行するとパスがわかる。</p>
<p>たとえば、node_modules/jshint/bin/jshint は$(npm bin)/jshintで実行できる。<br>実際にはnpm経由で実行すると、$(npm bin)はPATHは追加されている。</p>
<p>package.jsonに以下を追加して</p>
<script src="https://gist.github.com/kazu69/b62cb4e6d54ab63b1b1e.js?file=path.json"></script>

<script src="https://gist.github.com/kazu69/b62cb4e6d54ab63b1b1e.js?file=path.sh"></script>

<p>でパスが通っていることが確認できる。</p>
<p>つまり、npm run TASKではモジュールのパスに$(npm bin)は必要無い。</p>
<h2 id="pre_u3001post_u30D5_u30C3_u30AF"><a href="#pre_u3001post_u30D5_u30C3_u30AF" class="headerlink" title="pre、postフック"></a>pre、postフック</h2><p>npmコマンドにpre、postというprefixをつけることでそのコマンドの前後にフックできる。<br>たとえば、npm testにpre postそれぞれのフックを追加すると、</p>
<p>npm test を実行すると、 npm run pretest、 npm test, npm run posttest の順番に実行される。</p>
<h2 id="u30AB_u30B9_u30BF_u30E0_u5F15_u6570"><a href="#u30AB_u30B9_u30BF_u30E0_u5F15_u6570" class="headerlink" title="カスタム引数"></a>カスタム引数</h2><p>npm@2.0.0 以上では<a href="https://github.com/npm/npm/pull/5518" target="_blank" rel="external">実行スクリプトにカスタム引数を渡すことができるようになっている。</a></p>
<p>「–」で 好きな引数を渡すことができる。<br>たとえば以下のうように</p>
<script src="https://gist.github.com/kazu69/b62cb4e6d54ab63b1b1e.js?file=option.json"></script>

<p>例があまり良くないけど、開発環境やstaging環境などの実行環境でオプションの有無がある場合などに便利。</p>
<h2 id="npm-config"><a href="#npm-config" class="headerlink" title="npm-config"></a>npm-config</h2><p>package.jsonにあるconfigはスクリプトからnpm_package_config_NAMEとして参照できる</p>
<script src="https://gist.github.com/kazu69/b62cb4e6d54ab63b1b1e.js?file=package_config.json"></script>

<p>とある場合、</p>
<script src="https://gist.github.com/kazu69/b62cb4e6d54ab63b1b1e.js?file=config_scriots.json"></script>

<p>とすることで参照できる。</p>
<p>各モジュールの設定はpackage.jsonにまとめておくことができる。<br>.configのようにconfig系のファイルがプロジェクトルートにたくさん作りたくないので、便利。</p>
<p>また、設定したconfigの値はユーザーの$HOMEにある.npmrcの値によて実行時に上書きされる。</p>
<script src="https://gist.github.com/kazu69/b62cb4e6d54ab63b1b1e.js?file=npmrc.sh"></script>

<p>これで</p>
<script src="https://gist.github.com/kazu69/b62cb4e6d54ab63b1b1e.js?file=npmrc_echo.sh"></script>

<p>となる。各自の環境に合わせた状態などはここで上書きするなどができる感じ。</p>
<h2 id="u30DE_u30EB_u30C1_u30BF_u30B9_u30AF"><a href="#u30DE_u30EB_u30C1_u30BF_u30B9_u30AF" class="headerlink" title="マルチタスク"></a>マルチタスク</h2><p>マルチタスクはpre、postフックでタスクを実行するほかに&amp;&amp;演算子でつなげていけば可能。</p>
<script src="https://gist.github.com/kazu69/b62cb4e6d54ab63b1b1e.js?file=mutitask.json"></script>

<p>また、標準出力、標準入力、リダレクトをつかって<a href="http://gulpjs.com/" target="_blank" rel="external">gulp</a>のようにシームレスに処理できる。</p>
<script src="https://gist.github.com/kazu69/b62cb4e6d54ab63b1b1e.js?file=stream.json"></script>

<h2 id="u30D5_u30A1_u30A4_u30EB_u76E3_u8996"><a href="#u30D5_u30A1_u30A4_u30EB_u76E3_u8996" class="headerlink" title="ファイル監視"></a>ファイル監視</h2><p>ファイル監視は<a href="https://www.npmjs.com/package/watch" target="_blank" rel="external">watch</a>や<a href="http://blog.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/" target="_blank" rel="external">nodemon</a>などを使う。</p>
<script src="https://gist.github.com/kazu69/b62cb4e6d54ab63b1b1e.js?file=watch.json"></script>

<p>フロントエンドのビルドツールは<a href="http://gruntjs.com/" target="_blank" rel="external">Grunt</a>や<a href="http://gulpjs.com/" target="_blank" rel="external">gulp</a>、<a href="http://webpack.github.io/" target="_blank" rel="external">webpack</a>を使う規模でなければnpmだけでもいけそう。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://gruntjs.com/">Grunt</a>、 <a href="http://gulpjs.com/">gulp</a>などを使うのではなく、npmをビルドタスクを使うためにちょっとおさらいした。</p>]]>
    
    </summary>
    
      <category term="tec" scheme="http://blog.kazu69.net/categories/tec/"/>
    
      <category term="web" scheme="http://blog.kazu69.net/categories/tec/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[browserifyでjQuery(CDN)とjQueryプラグインを使う]]></title>
    <link href="http://blog.kazu69.net/2015/04/18/browserify-uses-jquery-plugin-with-jquery-cdn/"/>
    <id>http://blog.kazu69.net/2015/04/18/browserify-uses-jquery-plugin-with-jquery-cdn/</id>
    <published>2015-04-18T03:39:36.000Z</published>
    <updated>2015-05-10T16:21:06.000Z</updated>
    <content type="html"><![CDATA[<p>jQueryをCDNから取得し、jQuery pluginが活躍している場合のbrowserify導入の備忘録</p>
<a id="more"></a>
<h2 id="CDN_u306EjQuery_u3092require_u3059_u308B"><a href="#CDN_u306EjQuery_u3092require_u3059_u308B" class="headerlink" title="CDNのjQueryをrequireする"></a>CDNのjQueryをrequireする</h2><p>CDNを使うことで、browserifyでbundleするファイルサイズは小さくなり、ファイル生成までの時間も短くなるという恩恵がある。</p>
<p>まず、CDNのjQueryを利用するのに<a href="https://github.com/thlorenz/browserify-shim" target="_blank" rel="external">browserify-shim</a>を使う。<br>globalのjQueryを「jquery」というモジュール名でrequireできるようにする。</p>
<script src="https://gist.github.com/kazu69/6c41e1d411911d15a886.js?file=browserify-shim.json"></script>

<p>requireでincludeするjqueryはglobal(window)空間に存在しているので、<br>実際にはrequireなどせずとも使えるといえば使える。</p>
<p>require をするには以下の理由があるらしい。</p>
<ul>
<li>require(‘jquery’)に統一することでwindow.jQueryというグローバルな名前空間へのアクセスを避け、依存解決方法を統一できる</li>
<li>将来的にnpmパッケージとして運用する場合に、コードに変更がいらない</li>
<li>require することでディレクトリ構造などが変わる変更が生じても、その影響を受けにくくなる。</li>
</ul>
<p>browserifyを実行すると</p>
<script src="https://gist.github.com/kazu69/6c41e1d411911d15a886.js?file=global-bundle.js"></script>

<p>となり、globalのjQueryをrequireしているのがわかる。</p>
<p>だが、node_modules配下にjQueryをrequireしているパッケージがある場合は、以下のようになる。</p>
<script src="https://gist.github.com/kazu69/6c41e1d411911d15a886.js?file=browserify.sh"></script>

<p>解決するにはいずれか、</p>
<ol>
<li>素直にjQueryをnpm installしてdependenciesに追加する</li>
<li>shim を作成して、jQueryをexportsする</li>
</ol>
<p>1 の場合は、結局CDNから取得するjQueryを使うわけではなく、npmでinstallしたjQueryを使うことになるため今回の目的に沿わない。</p>
<p>2 で対応する。jquery_shim.jsを作りmodule.exportsにglobalのjQueryを渡すようにする。</p>
<script src="https://gist.github.com/kazu69/6c41e1d411911d15a886.js?file=jquery_shim.js"></script>

<p>そして、 browserフィールド追加してにaliaseを作成</p>
<script src="https://gist.github.com/kazu69/6c41e1d411911d15a886.js?file=browserify-browser.json"></script>

<p>これにより、以下のようなスクリプトを作成できるのでCDNの恩恵を受けることができる。<br>requireの引数にjqueryが追加されglobalのjQueryをexportしているのがわかる。</p>
<script src="https://gist.github.com/kazu69/6c41e1d411911d15a886.js?file=cdn-jquery.js"></script>

<p>とこれでまずはjQueryはCDNの恩恵を受けることができる。</p>
<h2 id="jQuery_plugin_u306E_u5BFE_u5FDC"><a href="#jQuery_plugin_u306E_u5BFE_u5FDC" class="headerlink" title="jQuery pluginの対応"></a>jQuery pluginの対応</h2><p>jquery pluginもnpmから取得できるので、bowerを使用することなくnpm経由で直接installからexportsできる。<br>(<a href="http://blog.npmjs.org/post/111385956875/welcome-jquery-developers" target="_blank" rel="external">Welcome, jQuery developers!</a>)</p>
<p>任意のjquery.pluginと自作モジュールのmy_module.jsを利用するとした場合、</p>
<script src="https://gist.github.com/kazu69/6c41e1d411911d15a886.js?file=browserify-browser-modules.json"></script>

<p>ここではjquery.pluginをjqueryPluginでexport、<br>my_module.jsをmyModuleとしてexportしている。</p>
<p>それぞれ、require(‘jquery_plugin’)、require(‘myModule’)とすることで利用出来る。</p>
<p>module 形式でない package の場合でも、<code>browserify -r jquery_plugin</code> で require オプションを使うことで requireできるようになるのでとりあえずなんとかなる。</p>
<script src="https://gist.github.com/kazu69/6c41e1d411911d15a886.js?file=browserify-require.js"></script>

<p><a href="http://qiita.com/hitsujiwool/items/b013577d361bfdef18a6" target="_blank" rel="external">browserify (browser-pack) はどんなコードを出力するのか？</a>あたりが詳しい。</p>
<script src="https://gist.github.com/kazu69/6c41e1d411911d15a886.js?file==my_module.js"></script>

<p>サイトの規模によってはbrowserifyを利用して全てのファイルをまとめてしまうと、ファイルサイズが気になる。</p>
<p>たとえば、サイト全体で使う共通のモジュールやユーティリティ的なものをbrowserifyでrequireできるようにしておく。</p>
<p>各ページごとに必要な処理の多くはDOMをゴニョゴニョするものなどが多いと思うが、<br>こういったものは複数人で開発・運用などしているといろんな人が変更を行うので、<br>コアになる部分以外はあまりややこしなく扱えるようにしておきたい。</p>
<p>意図しないグローバルを汚染をしない程度にとどめておく程度にしておくとかでもいいのではないだろうかと。</p>
<script src="https://gist.github.com/kazu69/6c41e1d411911d15a886.js?file=page-content.js"></script>

<p>お手軽に <a href="https://github.com/jfhbrook/browserify-cdn" target="_blank" rel="external">browserify-cdn</a> もある。</p>
<p>参考にしたページ</p>
<ul>
<li><a href="https://github.com/umdjs/umd" target="_blank" rel="external">https://github.com/umdjs/umd</a></li>
<li><a href="http://blog.npmjs.org/post/112064849860/using-jquery-plugins-with-npm" target="_blank" rel="external">http://blog.npmjs.org/post/112064849860/using-jquery-plugins-with-npm</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>jQueryをCDNから取得し、jQuery pluginが活躍している場合のbrowserify導入の備忘録</p>]]>
    
    </summary>
    
      <category term="tec" scheme="http://blog.kazu69.net/categories/tec/"/>
    
      <category term="web" scheme="http://blog.kazu69.net/categories/tec/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[phpのREPL psysh が便利そうだった]]></title>
    <link href="http://blog.kazu69.net/2015/02/28/php-repl-psysh-was-so-convenient/"/>
    <id>http://blog.kazu69.net/2015/02/28/php-repl-psysh-was-so-convenient/</id>
    <published>2015-02-28T04:56:01.000Z</published>
    <updated>2015-05-10T16:21:06.000Z</updated>
    <content type="html"><![CDATA[<p>phpのインタラクティブコンソール<a href="http://psysh.org/" target="_blank" rel="external">psysh</a>というものが便利そうだった。<br>phpの開発している人なら既に知ってるのかもしれないけど、<br>デバッグが非常に楽になりそうだった。</p>
<a id="more"></a>
<p>phpのREPLにはFacebookの<a href="https://github.com/facebookarchive/phpsh" target="_blank" rel="external">phpsh</a>、<a href="https://github.com/ieure/php_repl" target="_blank" rel="external">php_repl</a>、<a href="https://github.com/d11wtq/boris" target="_blank" rel="external">boris</a> などもあるそうだが、psyshはRubyの<a href="https://github.com/pry/pry" target="_blank" rel="external">pry</a>のような感覚で使えそうな感じだった。</p>
<h2 id="u30A4_u30F3_u30B9_u30C8_u30FC_u30EB_u3057_u3066_u8A66_u3057_u3066_u307F_u305F"><a href="#u30A4_u30F3_u30B9_u30C8_u30FC_u30EB_u3057_u3066_u8A66_u3057_u3066_u307F_u305F" class="headerlink" title="インストールして試してみた"></a>インストールして試してみた</h2><script src="https://gist.github.com/kazu69/194061218893d4934dbf.js?file=install.sh"></script>

<p>Readmeにしたがいcomposer経由でインストールした。</p>
<script src="https://gist.github.com/kazu69/194061218893d4934dbf.js?file=use-psysh.sh"></script>

<p>ls, dump, trace, history などのほかに直近の例外を表示できるwtfとかコードを読めるshowなど、重宝しそう。</p>
<h2 id="u30D6_u30EC_u30A4_u30AF_u30DD_u30A4_u30F3_u30C8_u3092_u8A2D_u7F6E_u3059_u308B"><a href="#u30D6_u30EC_u30A4_u30AF_u30DD_u30A4_u30F3_u30C8_u3092_u8A2D_u7F6E_u3059_u308B" class="headerlink" title="ブレイクポイントを設置する"></a>ブレイクポイントを設置する</h2><p>Rubyでのbinding.pry感覚でブレイクポイントを設置できる。</p>
<script src="https://gist.github.com/kazu69/194061218893d4934dbf.js?file=debugger.php"></script>

<p>psyshをrequireして、デバッグしたい箇所でeval(\Psy\sh());を実行するだけで、<br>該当箇所でプログラムが中断しpsyshが起動してデバッグできます。</p>
<script src="https://gist.github.com/kazu69/194061218893d4934dbf.js?file=debugger.sh"></script>

<h2 id="php_u306E_u65E5_u672C_u8A9E_u30C9_u30AD_u30E5_u30E1_u30F3_u30C8_u3092_u8AAD_u3081_u308B_u3088_u3046_u306B_u3059_u308B"><a href="#php_u306E_u65E5_u672C_u8A9E_u30C9_u30AD_u30E5_u30E1_u30F3_u30C8_u3092_u8AAD_u3081_u308B_u3088_u3046_u306B_u3059_u308B" class="headerlink" title="phpの日本語ドキュメントを読めるようにする"></a>phpの日本語ドキュメントを読めるようにする</h2><p>日本語ドキュメントを取得することで、docで日本語のphpドキュメントも読める</p>
<script src="https://gist.github.com/kazu69/194061218893d4934dbf.js?file=show_php_doc.sh"></script>

<h2 id="psysh_u306E_u8A2D_u5B9A"><a href="#psysh_u306E_u8A2D_u5B9A" class="headerlink" title="psyshの設定"></a>psyshの設定</h2><p>ここもpryのように、設定ファイルを追加してカスタマイズできる</p>
<script src="https://gist.github.com/kazu69/194061218893d4934dbf.js?file=add_psysh_config.sh"></script>

<p>ということで、これはデバッグがはかどりそう。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>phpのインタラクティブコンソール<a href="http://psysh.org/">psysh</a>というものが便利そうだった。<br>phpの開発している人なら既に知ってるのかもしれないけど、<br>デバッグが非常に楽になりそうだった。</p>]]>
    
    </summary>
    
      <category term="php" scheme="http://blog.kazu69.net/categories/php/"/>
    
  </entry>
  
</feed>
