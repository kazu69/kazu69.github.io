<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>69log</title>
  <subtitle>福岡でwebの仕事をしています</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.kazu69.net/"/>
  <updated>2017-02-27T13:51:57.000Z</updated>
  <id>http://blog.kazu69.net/</id>
  
  <author>
    <name>kazu69</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Consulを再度学んだ</title>
    <link href="http://blog.kazu69.net/2017/02/19/learned_consul_again/"/>
    <id>http://blog.kazu69.net/2017/02/19/learned_consul_again/</id>
    <published>2017-02-19T14:34:45.000Z</published>
    <updated>2017-02-27T13:51:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>consulを少し触ったままだったので、ちゃんと学んでみた。<br>と言っても一通り触ったくらいであるが。</p>
<p>あらためて試すにあたり、<a href="https://hub.docker.com/_/consul/" target="_blank" rel="external">Official Consul Docker Image</a>を使用してクラスタを構成した。</p>
<a id="more"></a>
<h2 id="counsulのおさらい"><a href="#counsulのおさらい" class="headerlink" title="counsulのおさらい"></a>counsulのおさらい</h2><p>consulをざっくりとおさらい。<br>複数のサーバーをクラスタ化して、オーケストレーションするツール。<br>クラスタ内のサーバー同士をDNSインターフェイスを通してIPベース相互検出し(Discovery)、健全性を確認し(Health Check)、特定のサーバーへのトラフィックを回避する(Load Balancing)を行う。</p>
<p>RESTベースの外部API(HTTP API)を提供しており、サーバー情報はキーバリュースストアで保持されている。</p>
<h2 id="dockerでクラスタ構成を作る"><a href="#dockerでクラスタ構成を作る" class="headerlink" title="dockerでクラスタ構成を作る"></a>dockerでクラスタ構成を作る</h2><p>consulはサーバとクライアントという2つのコンポーネントで構成され、いずれかの状態で起動する必要がある。<br>クライアントモードでは各サーバーと通信をする。<br>サーバーモードでは奇数台で構成されることを期待されていて、それぞれがGossip Protocolで通信し、Raftアルゴリズムに基づいてリーダーを選出する。</p>
<p>今回はdockerを使って以下のような構成を使っておさらいする</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># server</div><div class="line">consul --</div><div class="line">         `- consul1 (leader) 172.16.238.10</div><div class="line">         `- consul2          172.16.238.11</div><div class="line">         `- consul3          172.16.238.12</div><div class="line"># agent</div><div class="line">nginx  --</div><div class="line">         `- nginx1           172.16.238.13</div><div class="line">         `- nginx2           172.16.238.14</div><div class="line">         `- nginx3           172.16.238.15</div></pre></td></tr></table></figure>
<p>ということでserver 3コンテナを起動してみる。</p>
<p>ちなみにconsulでは次のポートをデフォルトで使用する。</p>
<table>
<thead>
<tr>
<th>機能</th>
<th>protocol</th>
<th>port</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>Server RPC</td>
<td>TCP</td>
<td>8300</td>
<td>他のAgentからのリクエストを受付る</td>
</tr>
<tr>
<td>Serf LAN</td>
<td>TCP and UDP</td>
<td>8301</td>
<td>LAN上のゴシッププロトコル。すべてのAgentが使用する。</td>
</tr>
<tr>
<td>Serf WAN</td>
<td>TCP and UDP</td>
<td>8302</td>
<td>WAN上のゴシッププロトコル。他のサーバーとの通信に使用。</td>
</tr>
<tr>
<td>CLI RPC</td>
<td>TCP</td>
<td>8400</td>
<td>CLIからの入力を処理する。すべてのAgentが使用する。</td>
</tr>
<tr>
<td>HTTP API</td>
<td>TCP</td>
<td>8500</td>
<td>クライアントがHTTP API を受付る</td>
</tr>
<tr>
<td>DNS Interface</td>
<td>TCP and UDP</td>
<td>8600</td>
<td>DNSクエリを解決する</td>
</tr>
</tbody>
</table>
<p>今回は外からも利用するので一つだけ書くポートをフォワードしておく。</p>
<h2 id="リーダー選出"><a href="#リーダー選出" class="headerlink" title="リーダー選出"></a>リーダー選出</h2><p>指定数以上のサーバーが起動したことで、リーダーが選出されていることを確認する。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># リーダーのnodeの情報取得</span></div><div class="line">curl <span class="_">-s</span> http://localhost:8500/v1/status/leader | jq .</div><div class="line"><span class="string">"172.16.238.10:8300"</span></div><div class="line"></div><div class="line"><span class="comment"># agentのnode情報取得</span></div><div class="line">curl <span class="_">-s</span> http://localhost:8500/v1/status/peers | jq .</div><div class="line">[</div><div class="line">  <span class="string">"172.16.238.10:8300"</span>,</div><div class="line">  <span class="string">"172.16.238.12:8300"</span>,</div><div class="line">  <span class="string">"172.16.238.11:8300"</span></div><div class="line">]</div></pre></td></tr></table></figure>
<h3 id="agentの追加"><a href="#agentの追加" class="headerlink" title="agentの追加"></a>agentの追加</h3><p>3台起動してるnginxコンテナをagentモードでクラスタに追加する。<br>(追加時に合わせて幾つか死活監視を試せるようにしている)</p>
<p>起動しているコンテナは以下の状態</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">CONTAINER ID        IMAGE                COMMAND                  CREATED             STATUS              PORTS                                                                                                                                       NAMES</div><div class="line">c48eb5e1c99a        learnconsul_nginx2   <span class="string">"nginx -g 'daemon ..."</span>   24 hours ago        Up 24 hours         443/tcp, 0.0.0.0:8000-&gt;80/tcp                                                                                                               nginx2</div><div class="line">1bd432bd0b98        consul:latest        <span class="string">"docker-entrypoint..."</span>   24 hours ago        Up 24 hours         8300-8302/tcp, 8400/tcp, 8500/tcp, 8301-8302/udp, 8600/tcp, 8600/udp                                                                        consul2</div><div class="line">7917ff526a10        learnconsul_nginx1   <span class="string">"nginx -g 'daemon ..."</span>   24 hours ago        Up 24 hours         443/tcp, 0.0.0.0:8080-&gt;80/tcp                                                                                                               nginx1</div><div class="line">f72330ed0182        consul:latest        <span class="string">"docker-entrypoint..."</span>   24 hours ago        Up 24 hours         8300-8302/tcp, 8400/tcp, 8500/tcp, 8301-8302/udp, 8600/tcp, 8600/udp                                                                        consul3</div><div class="line">5c40e078481e        learnconsul_nginx3   <span class="string">"nginx -g 'daemon ..."</span>   24 hours ago        Up 24 hours         443/tcp, 0.0.0.0:8888-&gt;80/tcp                                                                                                               nginx3</div><div class="line">f7270595eda4        consul:latest        <span class="string">"docker-entrypoint..."</span>   24 hours ago        Up 24 hours         0.0.0.0:8300-8302-&gt;8300-8302/tcp, 0.0.0.0:8400-&gt;8400/tcp, 8301-8302/udp, 0.0.0.0:8500-&gt;8500/tcp, 8600/udp, 8600/tcp, 0.0.0.0:8600-&gt;53/udp   consul1</div></pre></td></tr></table></figure>
<p>nodeを追加していく</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># configファイルをコンテナにコピー</span></div><div class="line">docker cp config/nginx1 nginx1:/etc/consul.d</div><div class="line"><span class="comment"># clusterにjoinする</span></div><div class="line">docker <span class="built_in">exec</span> <span class="_">-d</span> -t nginx1 consul agent -config-file=/etc/consul.d/nginx1</div><div class="line"><span class="comment"># ttl health check用のスクリプトを起動</span></div><div class="line">docker <span class="built_in">exec</span> <span class="_">-d</span> -t nginx1 bash -c <span class="string">'./http_request nginx1'</span></div><div class="line"> </div><div class="line">consul1    |     2017/01/25 07:50:51 [INFO] serf: EventMemberJoin: nginx1 172.16.238.13</div><div class="line">consul1    |     2017/01/25 07:50:51 [INFO] consul: member <span class="string">'nginx1'</span> joined, marking health alive</div><div class="line">consul2    |     2017/01/25 07:50:51 [INFO] serf: EventMemberJoin: nginx1 172.16.238.13</div><div class="line">consul3    |     2017/01/25 07:50:51 [INFO] serf: EventMemberJoin: nginx1 172.16.238.13</div><div class="line"> </div><div class="line"><span class="comment"># 以下nginx1と同じ処理を行う</span></div><div class="line"> </div><div class="line"><span class="comment"># nginx2</span></div><div class="line">docker cp config/nginx2 nginx2:/etc/consul.d</div><div class="line">docker <span class="built_in">exec</span> <span class="_">-d</span> -t nginx2 consul agent -config-file=/etc/consul.d/nginx2</div><div class="line">docker <span class="built_in">exec</span> <span class="_">-d</span> -t nginx2 bash -c <span class="string">'./http_request nginx2'</span></div><div class="line"> </div><div class="line">consul1    |     2017/01/25 07:51:31 [INFO] serf: EventMemberJoin: nginx2 172.16.238.14</div><div class="line">consul1    |     2017/01/25 07:51:31 [INFO] consul: member <span class="string">'nginx2'</span> joined, marking health alive</div><div class="line">consul2    |     2017/01/25 07:51:31 [INFO] serf: EventMemberJoin: nginx2 172.16.238.14</div><div class="line">consul3    |     2017/01/25 07:51:31 [INFO] serf: EventMemberJoin: nginx2 172.16.238.14</div><div class="line"> </div><div class="line"><span class="comment"># nginx3</span></div><div class="line">docker cp config/nginx3 nginx3:/etc/consul.d</div><div class="line">docker <span class="built_in">exec</span> <span class="_">-d</span> -t nginx3 consul agent -config-file=/etc/consul.d/nginx3</div><div class="line">docker <span class="built_in">exec</span> <span class="_">-d</span> -t nginx3 bash -c <span class="string">'./http_request nginx3'</span></div><div class="line"> </div><div class="line">consul1    |     2017/01/25 07:52:06 [INFO] serf: EventMemberJoin: nginx3 172.16.238.15</div><div class="line">consul1    |     2017/01/25 07:52:06 [INFO] consul: member <span class="string">'nginx3'</span> joined, marking health alive</div><div class="line">consul2    |     2017/01/25 07:52:06 [INFO] serf: EventMemberJoin: nginx3 172.16.238.15</div><div class="line">consul3    |     2017/01/25 07:52:06 [INFO] serf: EventMemberJoin: nginx3 172.16.238.15</div></pre></td></tr></table></figure>
<p>追加されていることをapiを通じて確認する。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ローカルエージェント(consul1)で既知のノードを返します</span></div><div class="line">curl <span class="_">-s</span> http://localhost:8500/v1/catalog/nodes | jq .</div><div class="line">[</div><div class="line">  &#123;</div><div class="line">    <span class="string">"ID"</span>: <span class="string">"e8ded508-98bb-4f9b-b0a2-ea872a0361d6"</span>,</div><div class="line">    <span class="string">"Node"</span>: <span class="string">"consul1"</span>,</div><div class="line">    <span class="string">"Address"</span>: <span class="string">"172.16.238.10"</span>,</div><div class="line">    <span class="string">"TaggedAddresses"</span>: &#123;</div><div class="line">      <span class="string">"lan"</span>: <span class="string">"172.16.238.10"</span>,</div><div class="line">      <span class="string">"wan"</span>: <span class="string">"172.16.238.10"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"Meta"</span>: &#123;&#125;,</div><div class="line">    <span class="string">"CreateIndex"</span>: 5,</div><div class="line">    <span class="string">"ModifyIndex"</span>: 9</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="string">"ID"</span>: <span class="string">"e8ded508-98bb-4f9b-b0a2-ea872a0361d6"</span>,</div><div class="line">    <span class="string">"Node"</span>: <span class="string">"consul2"</span>,</div><div class="line">    <span class="string">"Address"</span>: <span class="string">"172.16.238.11"</span>,</div><div class="line">    <span class="string">"TaggedAddresses"</span>: &#123;</div><div class="line">      <span class="string">"lan"</span>: <span class="string">"172.16.238.11"</span>,</div><div class="line">      <span class="string">"wan"</span>: <span class="string">"172.16.238.11"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"Meta"</span>: &#123;&#125;,</div><div class="line">    <span class="string">"CreateIndex"</span>: 4,</div><div class="line">    <span class="string">"ModifyIndex"</span>: 20</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="string">"ID"</span>: <span class="string">"e8ded508-98bb-4f9b-b0a2-ea872a0361d6"</span>,</div><div class="line">    <span class="string">"Node"</span>: <span class="string">"consul3"</span>,</div><div class="line">    <span class="string">"Address"</span>: <span class="string">"172.16.238.12"</span>,</div><div class="line">    <span class="string">"TaggedAddresses"</span>: &#123;</div><div class="line">      <span class="string">"lan"</span>: <span class="string">"172.16.238.12"</span>,</div><div class="line">      <span class="string">"wan"</span>: <span class="string">"172.16.238.12"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"Meta"</span>: &#123;&#125;,</div><div class="line">    <span class="string">"CreateIndex"</span>: 6,</div><div class="line">    <span class="string">"ModifyIndex"</span>: 8</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="string">"ID"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"Node"</span>: <span class="string">"nginx1"</span>,</div><div class="line">    <span class="string">"Address"</span>: <span class="string">"172.16.238.13"</span>,</div><div class="line">    <span class="string">"TaggedAddresses"</span>: &#123;</div><div class="line">      <span class="string">"lan"</span>: <span class="string">"172.16.238.13"</span>,</div><div class="line">      <span class="string">"wan"</span>: <span class="string">"172.16.238.13"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"Meta"</span>: null,</div><div class="line">    <span class="string">"CreateIndex"</span>: 28,</div><div class="line">    <span class="string">"ModifyIndex"</span>: 29</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="string">"ID"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"Node"</span>: <span class="string">"nginx2"</span>,</div><div class="line">    <span class="string">"Address"</span>: <span class="string">"172.16.238.14"</span>,</div><div class="line">    <span class="string">"TaggedAddresses"</span>: &#123;</div><div class="line">      <span class="string">"lan"</span>: <span class="string">"172.16.238.14"</span>,</div><div class="line">      <span class="string">"wan"</span>: <span class="string">"172.16.238.14"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"Meta"</span>: null,</div><div class="line">    <span class="string">"CreateIndex"</span>: 119,</div><div class="line">    <span class="string">"ModifyIndex"</span>: 120</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="string">"ID"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"Node"</span>: <span class="string">"nginx3"</span>,</div><div class="line">    <span class="string">"Address"</span>: <span class="string">"172.16.238.15"</span>,</div><div class="line">    <span class="string">"TaggedAddresses"</span>: &#123;</div><div class="line">      <span class="string">"lan"</span>: <span class="string">"172.16.238.15"</span>,</div><div class="line">      <span class="string">"wan"</span>: <span class="string">"172.16.238.15"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"Meta"</span>: null,</div><div class="line">    <span class="string">"CreateIndex"</span>: 132,</div><div class="line">    <span class="string">"ModifyIndex"</span>: 134</div><div class="line">  &#125;</div><div class="line">]</div><div class="line"> </div><div class="line"><span class="comment"># ローカルエージェント(consul1)で登録された全ての service を返す</span></div><div class="line">curl <span class="_">-s</span> http://localhost:8500/v1/agent/services | jq .</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="string">"consul"</span>: &#123;</div><div class="line">    <span class="string">"ID"</span>: <span class="string">"consul"</span>,</div><div class="line">    <span class="string">"Service"</span>: <span class="string">"consul"</span>,</div><div class="line">    <span class="string">"Tags"</span>: [],</div><div class="line">    <span class="string">"Address"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"Port"</span>: 8300,</div><div class="line">    <span class="string">"EnableTagOverride"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="string">"CreateIndex"</span>: 0,</div><div class="line">    <span class="string">"ModifyIndex"</span>: 0</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment"># ローカルエージェント(consul1) のserf エージェントが見えているメンバを返す</span></div><div class="line">curl <span class="_">-s</span> http://localhost:8500/v1/agent/members | jq .</div><div class="line">[</div><div class="line">  &#123;</div><div class="line">    <span class="string">"Name"</span>: <span class="string">"nginx1"</span>,</div><div class="line">    <span class="string">"Addr"</span>: <span class="string">"172.16.238.13"</span>,</div><div class="line">    <span class="string">"Port"</span>: 8301,</div><div class="line">    <span class="string">"Tags"</span>: &#123;</div><div class="line">      <span class="string">"build"</span>: <span class="string">"0.7.2:'a9afa0c"</span>,</div><div class="line">      <span class="string">"dc"</span>: <span class="string">"dc1"</span>,</div><div class="line">      <span class="string">"role"</span>: <span class="string">"node"</span>,</div><div class="line">      <span class="string">"vsn"</span>: <span class="string">"2"</span>,</div><div class="line">      <span class="string">"vsn_max"</span>: <span class="string">"3"</span>,</div><div class="line">      <span class="string">"vsn_min"</span>: <span class="string">"2"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"Status"</span>: 1,</div><div class="line">    <span class="string">"ProtocolMin"</span>: 1,</div><div class="line">    <span class="string">"ProtocolMax"</span>: 5,</div><div class="line">    <span class="string">"ProtocolCur"</span>: 2,</div><div class="line">    <span class="string">"DelegateMin"</span>: 2,</div><div class="line">    <span class="string">"DelegateMax"</span>: 4,</div><div class="line">    <span class="string">"DelegateCur"</span>: 4</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="string">"Name"</span>: <span class="string">"nginx2"</span>,</div><div class="line">    <span class="string">"Addr"</span>: <span class="string">"172.16.238.14"</span>,</div><div class="line">    <span class="string">"Port"</span>: 8301,</div><div class="line">    <span class="string">"Tags"</span>: &#123;</div><div class="line">      <span class="string">"build"</span>: <span class="string">"0.7.2:'a9afa0c"</span>,</div><div class="line">      <span class="string">"dc"</span>: <span class="string">"dc1"</span>,</div><div class="line">      <span class="string">"role"</span>: <span class="string">"node"</span>,</div><div class="line">      <span class="string">"vsn"</span>: <span class="string">"2"</span>,</div><div class="line">      <span class="string">"vsn_max"</span>: <span class="string">"3"</span>,</div><div class="line">      <span class="string">"vsn_min"</span>: <span class="string">"2"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"Status"</span>: 1,</div><div class="line">    <span class="string">"ProtocolMin"</span>: 1,</div><div class="line">    <span class="string">"ProtocolMax"</span>: 5,</div><div class="line">    <span class="string">"ProtocolCur"</span>: 2,</div><div class="line">    <span class="string">"DelegateMin"</span>: 2,</div><div class="line">    <span class="string">"DelegateMax"</span>: 4,</div><div class="line">    <span class="string">"DelegateCur"</span>: 4</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="string">"Name"</span>: <span class="string">"nginx3"</span>,</div><div class="line">    <span class="string">"Addr"</span>: <span class="string">"172.16.238.15"</span>,</div><div class="line">    <span class="string">"Port"</span>: 8301,</div><div class="line">    <span class="string">"Tags"</span>: &#123;</div><div class="line">      <span class="string">"build"</span>: <span class="string">"0.7.2:'a9afa0c"</span>,</div><div class="line">      <span class="string">"dc"</span>: <span class="string">"dc1"</span>,</div><div class="line">      <span class="string">"role"</span>: <span class="string">"node"</span>,</div><div class="line">      <span class="string">"vsn"</span>: <span class="string">"2"</span>,</div><div class="line">      <span class="string">"vsn_max"</span>: <span class="string">"3"</span>,</div><div class="line">      <span class="string">"vsn_min"</span>: <span class="string">"2"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"Status"</span>: 1,</div><div class="line">    <span class="string">"ProtocolMin"</span>: 1,</div><div class="line">    <span class="string">"ProtocolMax"</span>: 5,</div><div class="line">    <span class="string">"ProtocolCur"</span>: 2,</div><div class="line">    <span class="string">"DelegateMin"</span>: 2,</div><div class="line">    <span class="string">"DelegateMax"</span>: 4,</div><div class="line">    <span class="string">"DelegateCur"</span>: 4</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="string">"Name"</span>: <span class="string">"consul1"</span>,</div><div class="line">    <span class="string">"Addr"</span>: <span class="string">"172.16.238.10"</span>,</div><div class="line">    <span class="string">"Port"</span>: 8301,</div><div class="line">    <span class="string">"Tags"</span>: &#123;</div><div class="line">      <span class="string">"build"</span>: <span class="string">"0.7.5:'21f2d5a"</span>,</div><div class="line">      <span class="string">"dc"</span>: <span class="string">"dc1"</span>,</div><div class="line">      <span class="string">"expect"</span>: <span class="string">"3"</span>,</div><div class="line">      <span class="string">"id"</span>: <span class="string">"e8ded508-98bb-4f9b-b0a2-ea872a0361d6"</span>,</div><div class="line">      <span class="string">"port"</span>: <span class="string">"8300"</span>,</div><div class="line">      <span class="string">"role"</span>: <span class="string">"consul"</span>,</div><div class="line">      <span class="string">"vsn"</span>: <span class="string">"2"</span>,</div><div class="line">      <span class="string">"vsn_max"</span>: <span class="string">"3"</span>,</div><div class="line">      <span class="string">"vsn_min"</span>: <span class="string">"2"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"Status"</span>: 1,</div><div class="line">    <span class="string">"ProtocolMin"</span>: 1,</div><div class="line">    <span class="string">"ProtocolMax"</span>: 5,</div><div class="line">    <span class="string">"ProtocolCur"</span>: 2,</div><div class="line">    <span class="string">"DelegateMin"</span>: 2,</div><div class="line">    <span class="string">"DelegateMax"</span>: 5,</div><div class="line">    <span class="string">"DelegateCur"</span>: 4</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="string">"Name"</span>: <span class="string">"consul3"</span>,</div><div class="line">    <span class="string">"Addr"</span>: <span class="string">"172.16.238.12"</span>,</div><div class="line">    <span class="string">"Port"</span>: 8301,</div><div class="line">    <span class="string">"Tags"</span>: &#123;</div><div class="line">      <span class="string">"build"</span>: <span class="string">"0.7.5:'21f2d5a"</span>,</div><div class="line">      <span class="string">"dc"</span>: <span class="string">"dc1"</span>,</div><div class="line">      <span class="string">"id"</span>: <span class="string">"e8ded508-98bb-4f9b-b0a2-ea872a0361d6"</span>,</div><div class="line">      <span class="string">"port"</span>: <span class="string">"8300"</span>,</div><div class="line">      <span class="string">"role"</span>: <span class="string">"consul"</span>,</div><div class="line">      <span class="string">"vsn"</span>: <span class="string">"2"</span>,</div><div class="line">      <span class="string">"vsn_max"</span>: <span class="string">"3"</span>,</div><div class="line">      <span class="string">"vsn_min"</span>: <span class="string">"2"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"Status"</span>: 1,</div><div class="line">    <span class="string">"ProtocolMin"</span>: 1,</div><div class="line">    <span class="string">"ProtocolMax"</span>: 5,</div><div class="line">    <span class="string">"ProtocolCur"</span>: 2,</div><div class="line">    <span class="string">"DelegateMin"</span>: 2,</div><div class="line">    <span class="string">"DelegateMax"</span>: 5,</div><div class="line">    <span class="string">"DelegateCur"</span>: 4</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="string">"Name"</span>: <span class="string">"consul2"</span>,</div><div class="line">    <span class="string">"Addr"</span>: <span class="string">"172.16.238.11"</span>,</div><div class="line">    <span class="string">"Port"</span>: 8301,</div><div class="line">    <span class="string">"Tags"</span>: &#123;</div><div class="line">      <span class="string">"build"</span>: <span class="string">"0.7.5:'21f2d5a"</span>,</div><div class="line">      <span class="string">"dc"</span>: <span class="string">"dc1"</span>,</div><div class="line">      <span class="string">"id"</span>: <span class="string">"e8ded508-98bb-4f9b-b0a2-ea872a0361d6"</span>,</div><div class="line">      <span class="string">"port"</span>: <span class="string">"8300"</span>,</div><div class="line">      <span class="string">"role"</span>: <span class="string">"consul"</span>,</div><div class="line">      <span class="string">"vsn"</span>: <span class="string">"2"</span>,</div><div class="line">      <span class="string">"vsn_max"</span>: <span class="string">"3"</span>,</div><div class="line">      <span class="string">"vsn_min"</span>: <span class="string">"2"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"Status"</span>: 1,</div><div class="line">    <span class="string">"ProtocolMin"</span>: 1,</div><div class="line">    <span class="string">"ProtocolMax"</span>: 5,</div><div class="line">    <span class="string">"ProtocolCur"</span>: 2,</div><div class="line">    <span class="string">"DelegateMin"</span>: 2,</div><div class="line">    <span class="string">"DelegateMax"</span>: 5,</div><div class="line">    <span class="string">"DelegateCur"</span>: 4</div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># service consulのhealth check</span></div><div class="line">curl <span class="_">-s</span> http://localhost:8500/v1/health/service/consul | jq .</div><div class="line">[</div><div class="line">  &#123;</div><div class="line">    <span class="string">"Node"</span>: &#123;</div><div class="line">      <span class="string">"ID"</span>: <span class="string">"e8ded508-98bb-4f9b-b0a2-ea872a0361d6"</span>,</div><div class="line">      <span class="string">"Node"</span>: <span class="string">"consul1"</span>,</div><div class="line">      <span class="string">"Address"</span>: <span class="string">"172.16.238.10"</span>,</div><div class="line">      <span class="string">"TaggedAddresses"</span>: &#123;</div><div class="line">        <span class="string">"lan"</span>: <span class="string">"172.16.238.10"</span>,</div><div class="line">        <span class="string">"wan"</span>: <span class="string">"172.16.238.10"</span></div><div class="line">      &#125;,</div><div class="line">      <span class="string">"Meta"</span>: &#123;&#125;,</div><div class="line">      <span class="string">"CreateIndex"</span>: 5,</div><div class="line">      <span class="string">"ModifyIndex"</span>: 9</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"Service"</span>: &#123;</div><div class="line">      <span class="string">"ID"</span>: <span class="string">"consul"</span>,</div><div class="line">      <span class="string">"Service"</span>: <span class="string">"consul"</span>,</div><div class="line">      <span class="string">"Tags"</span>: [],</div><div class="line">      <span class="string">"Address"</span>: <span class="string">""</span>,</div><div class="line">      <span class="string">"Port"</span>: 8300,</div><div class="line">      <span class="string">"EnableTagOverride"</span>: <span class="literal">false</span>,</div><div class="line">      <span class="string">"CreateIndex"</span>: 5,</div><div class="line">      <span class="string">"ModifyIndex"</span>: 9</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"Checks"</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="string">"Node"</span>: <span class="string">"consul1"</span>,</div><div class="line">        <span class="string">"CheckID"</span>: <span class="string">"serfHealth"</span>,</div><div class="line">        <span class="string">"Name"</span>: <span class="string">"Serf Health Status"</span>,</div><div class="line">        <span class="string">"Status"</span>: <span class="string">"passing"</span>,</div><div class="line">        <span class="string">"Notes"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"Output"</span>: <span class="string">"Agent alive and reachable"</span>,</div><div class="line">        <span class="string">"ServiceID"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"ServiceName"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"CreateIndex"</span>: 5,</div><div class="line">        <span class="string">"ModifyIndex"</span>: 5</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="string">"Node"</span>: &#123;</div><div class="line">      <span class="string">"ID"</span>: <span class="string">"e8ded508-98bb-4f9b-b0a2-ea872a0361d6"</span>,</div><div class="line">      <span class="string">"Node"</span>: <span class="string">"consul2"</span>,</div><div class="line">      <span class="string">"Address"</span>: <span class="string">"172.16.238.11"</span>,</div><div class="line">      <span class="string">"TaggedAddresses"</span>: &#123;</div><div class="line">        <span class="string">"lan"</span>: <span class="string">"172.16.238.11"</span>,</div><div class="line">        <span class="string">"wan"</span>: <span class="string">"172.16.238.11"</span></div><div class="line">      &#125;,</div><div class="line">      <span class="string">"Meta"</span>: &#123;&#125;,</div><div class="line">      <span class="string">"CreateIndex"</span>: 4,</div><div class="line">      <span class="string">"ModifyIndex"</span>: 35</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"Service"</span>: &#123;</div><div class="line">      <span class="string">"ID"</span>: <span class="string">"consul"</span>,</div><div class="line">      <span class="string">"Service"</span>: <span class="string">"consul"</span>,</div><div class="line">      <span class="string">"Tags"</span>: [],</div><div class="line">      <span class="string">"Address"</span>: <span class="string">""</span>,</div><div class="line">      <span class="string">"Port"</span>: 8300,</div><div class="line">      <span class="string">"EnableTagOverride"</span>: <span class="literal">false</span>,</div><div class="line">      <span class="string">"CreateIndex"</span>: 4,</div><div class="line">      <span class="string">"ModifyIndex"</span>: 35</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"Checks"</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="string">"Node"</span>: <span class="string">"consul2"</span>,</div><div class="line">        <span class="string">"CheckID"</span>: <span class="string">"serfHealth"</span>,</div><div class="line">        <span class="string">"Name"</span>: <span class="string">"Serf Health Status"</span>,</div><div class="line">        <span class="string">"Status"</span>: <span class="string">"passing"</span>,</div><div class="line">        <span class="string">"Notes"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"Output"</span>: <span class="string">"Agent alive and reachable"</span>,</div><div class="line">        <span class="string">"ServiceID"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"ServiceName"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"CreateIndex"</span>: 8,</div><div class="line">        <span class="string">"ModifyIndex"</span>: 8</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="string">"Node"</span>: &#123;</div><div class="line">      <span class="string">"ID"</span>: <span class="string">"e8ded508-98bb-4f9b-b0a2-ea872a0361d6"</span>,</div><div class="line">      <span class="string">"Node"</span>: <span class="string">"consul3"</span>,</div><div class="line">      <span class="string">"Address"</span>: <span class="string">"172.16.238.12"</span>,</div><div class="line">      <span class="string">"TaggedAddresses"</span>: &#123;</div><div class="line">        <span class="string">"lan"</span>: <span class="string">"172.16.238.12"</span>,</div><div class="line">        <span class="string">"wan"</span>: <span class="string">"172.16.238.12"</span></div><div class="line">      &#125;,</div><div class="line">      <span class="string">"Meta"</span>: &#123;&#125;,</div><div class="line">      <span class="string">"CreateIndex"</span>: 6,</div><div class="line">      <span class="string">"ModifyIndex"</span>: 32</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"Service"</span>: &#123;</div><div class="line">      <span class="string">"ID"</span>: <span class="string">"consul"</span>,</div><div class="line">      <span class="string">"Service"</span>: <span class="string">"consul"</span>,</div><div class="line">      <span class="string">"Tags"</span>: [],</div><div class="line">      <span class="string">"Address"</span>: <span class="string">""</span>,</div><div class="line">      <span class="string">"Port"</span>: 8300,</div><div class="line">      <span class="string">"EnableTagOverride"</span>: <span class="literal">false</span>,</div><div class="line">      <span class="string">"CreateIndex"</span>: 6,</div><div class="line">      <span class="string">"ModifyIndex"</span>: 32</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"Checks"</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="string">"Node"</span>: <span class="string">"consul3"</span>,</div><div class="line">        <span class="string">"CheckID"</span>: <span class="string">"serfHealth"</span>,</div><div class="line">        <span class="string">"Name"</span>: <span class="string">"Serf Health Status"</span>,</div><div class="line">        <span class="string">"Status"</span>: <span class="string">"passing"</span>,</div><div class="line">        <span class="string">"Notes"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"Output"</span>: <span class="string">"Agent alive and reachable"</span>,</div><div class="line">        <span class="string">"ServiceID"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"ServiceName"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"CreateIndex"</span>: 7,</div><div class="line">        <span class="string">"ModifyIndex"</span>: 7</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<h3 id="health-check-死活監視-について"><a href="#health-check-死活監視-について" class="headerlink" title="health check(死活監視)について"></a>health check(死活監視)について</h3><p>consulのhealth checkには次の種類のものがある。</p>
<table>
<thead>
<tr>
<th>check</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>Script + Interval</td>
<td>Exit code 0でpassing、Exit code 1でWarning、それ以外でcriticalとなるスクリプトを実行する</td>
</tr>
<tr>
<td>HTTP + Interval</td>
<td>curlなどでのHTTPリクエスト。2xxステータスでpassing。429 Too Many Requestsでwarning。それ以外はcritical。</td>
</tr>
<tr>
<td>TCP + Interval</td>
<td>指定ホストにTCPで接続を試みる。接続成功でpassing、それ以外はciritcalとなる。</td>
</tr>
<tr>
<td>Time to Live (TTL)</td>
<td>アプリケーションが自身の状態をチェックして通知する。通知状態はTTLの間保持される。</td>
</tr>
<tr>
<td>Docker + Interval</td>
<td>DockerコンテナにHTTPまたはSocket通信し、適切な終了コードかをチェックする</td>
</tr>
</tbody>
</table>
<p>今回は以下の機能を試す。</p>
<ul>
<li>HTTP + Interval</li>
<li>TCP + Interval</li>
<li>Time to Live (TTL)</li>
</ul>
<p>ちなみにTime to Liveはちょっとわかりにくいが、自身のconsul http apiを実行する。<br>例えばpass状態を送る場合は <a href="http://localhost:8500/v1/agent/check/pass/{CHECK_ID}" target="_blank" rel="external">http://localhost:8500/v1/agent/check/pass/{CHECK_ID}</a> にリクエストする。</p>
<p>今回のhealth checkの設定は以下のようにしている。<br>(すでにclusterにjoinするときに設定は行っている)</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// nginx1の場合</span></div><div class="line"></div><div class="line">&#123;</div><div class="line"><span class="string">"checks"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="string">"name"</span>: <span class="string">"HTTP Nginx on port 80"</span>,</div><div class="line">      <span class="string">"http"</span>: <span class="string">"http://localhost:80"</span>,</div><div class="line">      <span class="string">"interval"</span>: <span class="string">"10s"</span>,</div><div class="line">      <span class="string">"timeout"</span>: <span class="string">"1s"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="string">"id"</span>: <span class="string">"nginx1"</span>,</div><div class="line">      <span class="string">"name"</span>: <span class="string">"Nginx Status"</span>,</div><div class="line">      <span class="string">"ttl"</span>: <span class="string">"30s"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="string">"name"</span>: <span class="string">"SSH TCP on port 80"</span>,</div><div class="line">      <span class="string">"tcp"</span>: <span class="string">"172.16.238.13:80"</span>,</div><div class="line">      <span class="string">"interval"</span>: <span class="string">"10s"</span>,</div><div class="line">      <span class="string">"timeout"</span>: <span class="string">"1s"</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>service(nginx1、nginx2、nginx3)ごとのstatusを取得してみる。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># service nginxのhealth check</span></div><div class="line">curl <span class="_">-s</span> http://localhost:8500/v1/health/service/proxy | jq .</div><div class="line">[</div><div class="line">  &#123;</div><div class="line">    <span class="string">"Node"</span>: &#123;</div><div class="line">      <span class="string">"ID"</span>: <span class="string">""</span>,</div><div class="line">      <span class="string">"Node"</span>: <span class="string">"nginx1"</span>,</div><div class="line">      <span class="string">"Address"</span>: <span class="string">"172.16.238.13"</span>,</div><div class="line">      <span class="string">"TaggedAddresses"</span>: &#123;</div><div class="line">        <span class="string">"lan"</span>: <span class="string">"172.16.238.13"</span>,</div><div class="line">        <span class="string">"wan"</span>: <span class="string">"172.16.238.13"</span></div><div class="line">      &#125;,</div><div class="line">      <span class="string">"Meta"</span>: null,</div><div class="line">      <span class="string">"CreateIndex"</span>: 12,</div><div class="line">      <span class="string">"ModifyIndex"</span>: 13</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"Service"</span>: &#123;</div><div class="line">      <span class="string">"ID"</span>: <span class="string">"proxy"</span>,</div><div class="line">      <span class="string">"Service"</span>: <span class="string">"proxy"</span>,</div><div class="line">      <span class="string">"Tags"</span>: [</div><div class="line">        <span class="string">"nginx"</span></div><div class="line">      ],</div><div class="line">      <span class="string">"Address"</span>: <span class="string">"172.16.238.13"</span>,</div><div class="line">      <span class="string">"Port"</span>: 80,</div><div class="line">      <span class="string">"EnableTagOverride"</span>: <span class="literal">false</span>,</div><div class="line">      <span class="string">"CreateIndex"</span>: 13,</div><div class="line">      <span class="string">"ModifyIndex"</span>: 13</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"Checks"</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="string">"Node"</span>: <span class="string">"nginx1"</span>,</div><div class="line">        <span class="string">"CheckID"</span>: <span class="string">"HTTP Nginx on port 80"</span>,</div><div class="line">        <span class="string">"Name"</span>: <span class="string">"HTTP Nginx on port 80"</span>,</div><div class="line">        <span class="string">"Status"</span>: <span class="string">"passing"</span>,</div><div class="line">        <span class="string">"Notes"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"Output"</span>: <span class="string">"HTTP GET http://172.16.238.13: 200 OK Output: &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Welcome to nginx!&lt;/title&gt;\n&lt;style&gt;\n    body &#123;\n        width: 35em;\n        margin: 0 auto;\n        font-family: Tahoma, Verdana, Arial, sans-serif;\n    &#125;\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;\n&lt;p&gt;If you see this page, the nginx web server is successfully installed and\nworking. Further configuration is required.&lt;/p&gt;\n\n&lt;p&gt;For online documentation and support please refer to\n&lt;a href=\"http://nginx.org/\"&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;\nCommercial support is available at\n&lt;a href=\"http://nginx.com/\"&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n"</span>,</div><div class="line">        <span class="string">"ServiceID"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"ServiceName"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"CreateIndex"</span>: 14,</div><div class="line">        <span class="string">"ModifyIndex"</span>: 17</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="string">"Node"</span>: <span class="string">"nginx1"</span>,</div><div class="line">        <span class="string">"CheckID"</span>: <span class="string">"nginx1"</span>,</div><div class="line">        <span class="string">"Name"</span>: <span class="string">"Nginx Status"</span>,</div><div class="line">        <span class="string">"Status"</span>: <span class="string">"passing"</span>,</div><div class="line">        <span class="string">"Notes"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"Output"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"ServiceID"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"ServiceName"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"CreateIndex"</span>: 15,</div><div class="line">        <span class="string">"ModifyIndex"</span>: 227</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="string">"Node"</span>: <span class="string">"nginx1"</span>,</div><div class="line">        <span class="string">"CheckID"</span>: <span class="string">"serfHealth"</span>,</div><div class="line">        <span class="string">"Name"</span>: <span class="string">"Serf Health Status"</span>,</div><div class="line">        <span class="string">"Status"</span>: <span class="string">"passing"</span>,</div><div class="line">        <span class="string">"Notes"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"Output"</span>: <span class="string">"Agent alive and reachable"</span>,</div><div class="line">        <span class="string">"ServiceID"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"ServiceName"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"CreateIndex"</span>: 12,</div><div class="line">        <span class="string">"ModifyIndex"</span>: 12</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="string">"Node"</span>: <span class="string">"nginx1"</span>,</div><div class="line">        <span class="string">"CheckID"</span>: <span class="string">"SSH TCP on port 80"</span>,</div><div class="line">        <span class="string">"Name"</span>: <span class="string">"SSH TCP on port 80"</span>,</div><div class="line">        <span class="string">"Status"</span>: <span class="string">"passing"</span>,</div><div class="line">        <span class="string">"Notes"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"Output"</span>: <span class="string">"TCP connect 172.16.238.13:80: Success"</span>,</div><div class="line">        <span class="string">"ServiceID"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"ServiceName"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"CreateIndex"</span>: 16,</div><div class="line">        <span class="string">"ModifyIndex"</span>: 18</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="string">"Node"</span>: &#123;</div><div class="line">      <span class="string">"ID"</span>: <span class="string">""</span>,</div><div class="line">      <span class="string">"Node"</span>: <span class="string">"nginx2"</span>,</div><div class="line">      <span class="string">"Address"</span>: <span class="string">"172.16.238.14"</span>,</div><div class="line">      <span class="string">"TaggedAddresses"</span>: &#123;</div><div class="line">        <span class="string">"lan"</span>: <span class="string">"172.16.238.14"</span>,</div><div class="line">        <span class="string">"wan"</span>: <span class="string">"172.16.238.14"</span></div><div class="line">      &#125;,</div><div class="line">      <span class="string">"Meta"</span>: null,</div><div class="line">      <span class="string">"CreateIndex"</span>: 22,</div><div class="line">      <span class="string">"ModifyIndex"</span>: 25</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"Service"</span>: &#123;</div><div class="line">      <span class="string">"ID"</span>: <span class="string">"proxy"</span>,</div><div class="line">      <span class="string">"Service"</span>: <span class="string">"proxy"</span>,</div><div class="line">      <span class="string">"Tags"</span>: [</div><div class="line">        <span class="string">"nginx"</span></div><div class="line">      ],</div><div class="line">      <span class="string">"Address"</span>: <span class="string">"172.16.238.14"</span>,</div><div class="line">      <span class="string">"Port"</span>: 80,</div><div class="line">      <span class="string">"EnableTagOverride"</span>: <span class="literal">false</span>,</div><div class="line">      <span class="string">"CreateIndex"</span>: 25,</div><div class="line">      <span class="string">"ModifyIndex"</span>: 25</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"Checks"</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="string">"Node"</span>: <span class="string">"nginx2"</span>,</div><div class="line">        <span class="string">"CheckID"</span>: <span class="string">"HTTP Nginx on port 80"</span>,</div><div class="line">        <span class="string">"Name"</span>: <span class="string">"HTTP Nginx on port 80"</span>,</div><div class="line">        <span class="string">"Status"</span>: <span class="string">"passing"</span>,</div><div class="line">        <span class="string">"Notes"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"Output"</span>: <span class="string">"HTTP GET http://172.16.238.14: 200 OK Output: &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Welcome to nginx!&lt;/title&gt;\n&lt;style&gt;\n    body &#123;\n        width: 35em;\n        margin: 0 auto;\n        font-family: Tahoma, Verdana, Arial, sans-serif;\n    &#125;\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;\n&lt;p&gt;If you see this page, the nginx web server is successfully installed and\nworking. Further configuration is required.&lt;/p&gt;\n\n&lt;p&gt;For online documentation and support please refer to\n&lt;a href=\"http://nginx.org/\"&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;\nCommercial support is available at\n&lt;a href=\"http://nginx.com/\"&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n"</span>,</div><div class="line">        <span class="string">"ServiceID"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"ServiceName"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"CreateIndex"</span>: 26,</div><div class="line">        <span class="string">"ModifyIndex"</span>: 30</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="string">"Node"</span>: <span class="string">"nginx2"</span>,</div><div class="line">        <span class="string">"CheckID"</span>: <span class="string">"nginx2"</span>,</div><div class="line">        <span class="string">"Name"</span>: <span class="string">"Nginx Status"</span>,</div><div class="line">        <span class="string">"Status"</span>: <span class="string">"passing"</span>,</div><div class="line">        <span class="string">"Notes"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"Output"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"ServiceID"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"ServiceName"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"CreateIndex"</span>: 27,</div><div class="line">        <span class="string">"ModifyIndex"</span>: 223</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="string">"Node"</span>: <span class="string">"nginx2"</span>,</div><div class="line">        <span class="string">"CheckID"</span>: <span class="string">"serfHealth"</span>,</div><div class="line">        <span class="string">"Name"</span>: <span class="string">"Serf Health Status"</span>,</div><div class="line">        <span class="string">"Status"</span>: <span class="string">"passing"</span>,</div><div class="line">        <span class="string">"Notes"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"Output"</span>: <span class="string">"Agent alive and reachable"</span>,</div><div class="line">        <span class="string">"ServiceID"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"ServiceName"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"CreateIndex"</span>: 22,</div><div class="line">        <span class="string">"ModifyIndex"</span>: 22</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="string">"Node"</span>: <span class="string">"nginx2"</span>,</div><div class="line">        <span class="string">"CheckID"</span>: <span class="string">"SSH TCP on port 80"</span>,</div><div class="line">        <span class="string">"Name"</span>: <span class="string">"SSH TCP on port 80"</span>,</div><div class="line">        <span class="string">"Status"</span>: <span class="string">"passing"</span>,</div><div class="line">        <span class="string">"Notes"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"Output"</span>: <span class="string">"TCP connect 172.16.238.14:80: Success"</span>,</div><div class="line">        <span class="string">"ServiceID"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"ServiceName"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"CreateIndex"</span>: 28,</div><div class="line">        <span class="string">"ModifyIndex"</span>: 29</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="string">"Node"</span>: &#123;</div><div class="line">      <span class="string">"ID"</span>: <span class="string">""</span>,</div><div class="line">      <span class="string">"Node"</span>: <span class="string">"nginx3"</span>,</div><div class="line">      <span class="string">"Address"</span>: <span class="string">"172.16.238.15"</span>,</div><div class="line">      <span class="string">"TaggedAddresses"</span>: &#123;</div><div class="line">        <span class="string">"lan"</span>: <span class="string">"172.16.238.15"</span>,</div><div class="line">        <span class="string">"wan"</span>: <span class="string">"172.16.238.15"</span></div><div class="line">      &#125;,</div><div class="line">      <span class="string">"Meta"</span>: null,</div><div class="line">      <span class="string">"CreateIndex"</span>: 37,</div><div class="line">      <span class="string">"ModifyIndex"</span>: 38</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"Service"</span>: &#123;</div><div class="line">      <span class="string">"ID"</span>: <span class="string">"proxy"</span>,</div><div class="line">      <span class="string">"Service"</span>: <span class="string">"proxy"</span>,</div><div class="line">      <span class="string">"Tags"</span>: [</div><div class="line">        <span class="string">"nginx"</span></div><div class="line">      ],</div><div class="line">      <span class="string">"Address"</span>: <span class="string">"172.16.238.15"</span>,</div><div class="line">      <span class="string">"Port"</span>: 80,</div><div class="line">      <span class="string">"EnableTagOverride"</span>: <span class="literal">false</span>,</div><div class="line">      <span class="string">"CreateIndex"</span>: 38,</div><div class="line">      <span class="string">"ModifyIndex"</span>: 38</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"Checks"</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="string">"Node"</span>: <span class="string">"nginx3"</span>,</div><div class="line">        <span class="string">"CheckID"</span>: <span class="string">"HTTP Nginx on port 80"</span>,</div><div class="line">        <span class="string">"Name"</span>: <span class="string">"HTTP Nginx on port 80"</span>,</div><div class="line">        <span class="string">"Status"</span>: <span class="string">"passing"</span>,</div><div class="line">        <span class="string">"Notes"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"Output"</span>: <span class="string">"HTTP GET http://172.16.238.15: 200 OK Output: &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Welcome to nginx!&lt;/title&gt;\n&lt;style&gt;\n    body &#123;\n        width: 35em;\n        margin: 0 auto;\n        font-family: Tahoma, Verdana, Arial, sans-serif;\n    &#125;\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;\n&lt;p&gt;If you see this page, the nginx web server is successfully installed and\nworking. Further configuration is required.&lt;/p&gt;\n\n&lt;p&gt;For online documentation and support please refer to\n&lt;a href=\"http://nginx.org/\"&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;\nCommercial support is available at\n&lt;a href=\"http://nginx.com/\"&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n"</span>,</div><div class="line">        <span class="string">"ServiceID"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"ServiceName"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"CreateIndex"</span>: 41,</div><div class="line">        <span class="string">"ModifyIndex"</span>: 42</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="string">"Node"</span>: <span class="string">"nginx3"</span>,</div><div class="line">        <span class="string">"CheckID"</span>: <span class="string">"nginx3"</span>,</div><div class="line">        <span class="string">"Name"</span>: <span class="string">"Nginx Status"</span>,</div><div class="line">        <span class="string">"Status"</span>: <span class="string">"passing"</span>,</div><div class="line">        <span class="string">"Notes"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"Output"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"ServiceID"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"ServiceName"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"CreateIndex"</span>: 39,</div><div class="line">        <span class="string">"ModifyIndex"</span>: 228</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="string">"Node"</span>: <span class="string">"nginx3"</span>,</div><div class="line">        <span class="string">"CheckID"</span>: <span class="string">"serfHealth"</span>,</div><div class="line">        <span class="string">"Name"</span>: <span class="string">"Serf Health Status"</span>,</div><div class="line">        <span class="string">"Status"</span>: <span class="string">"passing"</span>,</div><div class="line">        <span class="string">"Notes"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"Output"</span>: <span class="string">"Agent alive and reachable"</span>,</div><div class="line">        <span class="string">"ServiceID"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"ServiceName"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"CreateIndex"</span>: 37,</div><div class="line">        <span class="string">"ModifyIndex"</span>: 37</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="string">"Node"</span>: <span class="string">"nginx3"</span>,</div><div class="line">        <span class="string">"CheckID"</span>: <span class="string">"SSH TCP on port 80"</span>,</div><div class="line">        <span class="string">"Name"</span>: <span class="string">"SSH TCP on port 80"</span>,</div><div class="line">        <span class="string">"Status"</span>: <span class="string">"passing"</span>,</div><div class="line">        <span class="string">"Notes"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"Output"</span>: <span class="string">"TCP connect 172.16.238.14:80: Success"</span>,</div><div class="line">        <span class="string">"ServiceID"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"ServiceName"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"CreateIndex"</span>: 40,</div><div class="line">        <span class="string">"ModifyIndex"</span>: 44</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<p>consul serverのnodeを一つダウンしてみる。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker stop consul3</div><div class="line">consul3</div></pre></td></tr></table></figure>
<p>consul3の状態を確認する</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">curl <span class="_">-s</span> http://localhost:8500/v1/health/node/consul3 | jq .</div><div class="line">[</div><div class="line">  &#123;</div><div class="line">    <span class="string">"Node"</span>: <span class="string">"consul3"</span>,</div><div class="line">    <span class="string">"CheckID"</span>: <span class="string">"serfHealth"</span>,</div><div class="line">    <span class="string">"Name"</span>: <span class="string">"Serf Health Status"</span>,</div><div class="line">    <span class="string">"Status"</span>: <span class="string">"critical"</span>,</div><div class="line">    <span class="string">"Notes"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"Output"</span>: <span class="string">"Agent not live or unreachable"</span>,</div><div class="line">    <span class="string">"ServiceID"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"ServiceName"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"CreateIndex"</span>: 7,</div><div class="line">    <span class="string">"ModifyIndex"</span>: 748</div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<p>consul3 を復帰させる</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker start consul3</div><div class="line">consul3</div></pre></td></tr></table></figure>
<p>再び状態を確認してみる。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">curl <span class="_">-s</span> http://localhost:8500/v1/health/node/consul3 | jq .</div><div class="line">[</div><div class="line">  &#123;</div><div class="line">    <span class="string">"Node"</span>: <span class="string">"consul3"</span>,</div><div class="line">    <span class="string">"CheckID"</span>: <span class="string">"serfHealth"</span>,</div><div class="line">    <span class="string">"Name"</span>: <span class="string">"Serf Health Status"</span>,</div><div class="line">    <span class="string">"Status"</span>: <span class="string">"passing"</span>,</div><div class="line">    <span class="string">"Notes"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"Output"</span>: <span class="string">"Agent alive and reachable"</span>,</div><div class="line">    <span class="string">"ServiceID"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"ServiceName"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"CreateIndex"</span>: 7,</div><div class="line">    <span class="string">"ModifyIndex"</span>: 800</div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<p>nginx1のnodeのhttpチェックをcriticalな状態にしてみる。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">docker <span class="built_in">exec</span> nginx1 mv /usr/share/nginx/html/index.html /usr/share/nginx/html/index.txt</div><div class="line">curl <span class="_">-s</span> http://localhost:8500/v1/health/node/nginx1 | jq .</div><div class="line">[</div><div class="line">  &#123;</div><div class="line">    <span class="string">"Node"</span>: <span class="string">"nginx1"</span>,</div><div class="line">    <span class="string">"CheckID"</span>: <span class="string">"HTTP Nginx on port 80"</span>,</div><div class="line">    <span class="string">"Name"</span>: <span class="string">"HTTP Nginx on port 80"</span>,</div><div class="line">    <span class="string">"Status"</span>: <span class="string">"critical"</span>,</div><div class="line">    <span class="string">"Notes"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"Output"</span>: <span class="string">"HTTP GET http://localhost:80: 403 Forbidden Output: &lt;html&gt;\r\n&lt;head&gt;&lt;title&gt;403 Forbidden&lt;/title&gt;&lt;/head&gt;\r\n&lt;body bgcolor=\"white\"&gt;\r\n&lt;center&gt;&lt;h1&gt;403 Forbidden&lt;/h1&gt;&lt;/center&gt;\r\n&lt;hr&gt;&lt;center&gt;nginx/1.11.10&lt;/center&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n"</span>,</div><div class="line">    <span class="string">"ServiceID"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"ServiceName"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"CreateIndex"</span>: 614,</div><div class="line">    <span class="string">"ModifyIndex"</span>: 803</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="string">"Node"</span>: <span class="string">"nginx1"</span>,</div><div class="line">    <span class="string">"CheckID"</span>: <span class="string">"nginx1"</span>,</div><div class="line">    <span class="string">"Name"</span>: <span class="string">"Nginx Status"</span>,</div><div class="line">    <span class="string">"Status"</span>: <span class="string">"passing"</span>,</div><div class="line">    <span class="string">"Notes"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"Output"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"ServiceID"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"ServiceName"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"CreateIndex"</span>: 612,</div><div class="line">    <span class="string">"ModifyIndex"</span>: 806</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="string">"Node"</span>: <span class="string">"nginx1"</span>,</div><div class="line">    <span class="string">"CheckID"</span>: <span class="string">"serfHealth"</span>,</div><div class="line">    <span class="string">"Name"</span>: <span class="string">"Serf Health Status"</span>,</div><div class="line">    <span class="string">"Status"</span>: <span class="string">"passing"</span>,</div><div class="line">    <span class="string">"Notes"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"Output"</span>: <span class="string">"Agent alive and reachable"</span>,</div><div class="line">    <span class="string">"ServiceID"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"ServiceName"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"CreateIndex"</span>: 610,</div><div class="line">    <span class="string">"ModifyIndex"</span>: 610</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="string">"Node"</span>: <span class="string">"nginx1"</span>,</div><div class="line">    <span class="string">"CheckID"</span>: <span class="string">"SSH TCP on port 80"</span>,</div><div class="line">    <span class="string">"Name"</span>: <span class="string">"SSH TCP on port 80"</span>,</div><div class="line">    <span class="string">"Status"</span>: <span class="string">"passing"</span>,</div><div class="line">    <span class="string">"Notes"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"Output"</span>: <span class="string">"TCP connect 172.16.238.13:80: Success"</span>,</div><div class="line">    <span class="string">"ServiceID"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"ServiceName"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"CreateIndex"</span>: 613,</div><div class="line">    <span class="string">"ModifyIndex"</span>: 613</div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<p>apiからciriticalなものだけ取得してみる。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">curl <span class="_">-s</span> http://localhost:8500/v1/health/state/critical | jq .</div><div class="line">[</div><div class="line">  &#123;</div><div class="line">    <span class="string">"Node"</span>: <span class="string">"nginx1"</span>,</div><div class="line">    <span class="string">"CheckID"</span>: <span class="string">"HTTP Nginx on port 80"</span>,</div><div class="line">    <span class="string">"Name"</span>: <span class="string">"HTTP Nginx on port 80"</span>,</div><div class="line">    <span class="string">"Status"</span>: <span class="string">"critical"</span>,</div><div class="line">    <span class="string">"Notes"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"Output"</span>: <span class="string">"HTTP GET http://localhost:80: 403 Forbidden Output: &lt;html&gt;\r\n&lt;head&gt;&lt;title&gt;403 Forbidden&lt;/title&gt;&lt;/head&gt;\r\n&lt;body bgcolor=\"white\"&gt;\r\n&lt;center&gt;&lt;h1&gt;403 Forbidden&lt;/h1&gt;&lt;/center&gt;\r\n&lt;hr&gt;&lt;center&gt;nginx/1.11.10&lt;/center&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n"</span>,</div><div class="line">    <span class="string">"ServiceID"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"ServiceName"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"CreateIndex"</span>: 614,</div><div class="line">    <span class="string">"ModifyIndex"</span>: 803</div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<h3 id="メンテナンスモード"><a href="#メンテナンスモード" class="headerlink" title="メンテナンスモード"></a>メンテナンスモード</h3><p>当たり前ではなるが、nodeをメンテナス状態にできる。<br>nginx1をメンテナンスモードにする。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">docker <span class="built_in">exec</span> -it nginx1 /bin/bash</div><div class="line"></div><div class="line"><span class="comment"># maintenance modeをenableにして、理由にtestとする</span></div><div class="line">consul maint -reason <span class="built_in">test</span> -enable</div><div class="line">Node maintenance is now enabled</div><div class="line"></div><div class="line"><span class="comment"># maintenance の状態を確認</span></div><div class="line">consul maint</div><div class="line">Node:</div><div class="line">  Name:   nginx1</div><div class="line">  Reason: <span class="built_in">test</span></div></pre></td></tr></table></figure>
<p>nginx1の状態を確認する。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">curl <span class="_">-s</span> http://localhost:8500/v1/health/node/nginx1 | jq .</div><div class="line">[</div><div class="line">  &#123;</div><div class="line">    <span class="string">"Node"</span>: <span class="string">"nginx1"</span>,</div><div class="line">    <span class="string">"CheckID"</span>: <span class="string">"_node_maintenance"</span>,</div><div class="line">    <span class="string">"Name"</span>: <span class="string">"Node Maintenance Mode"</span>,</div><div class="line">    <span class="string">"Status"</span>: <span class="string">"critical"</span>,</div><div class="line">    <span class="string">"Notes"</span>: <span class="string">"test"</span>,</div><div class="line">    <span class="string">"Output"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"ServiceID"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"ServiceName"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"CreateIndex"</span>: 894,</div><div class="line">    <span class="string">"ModifyIndex"</span>: 894</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="string">"Node"</span>: <span class="string">"nginx1"</span>,</div><div class="line">    <span class="string">"CheckID"</span>: <span class="string">"HTTP Nginx on port 80"</span>,</div><div class="line">    <span class="string">"Name"</span>: <span class="string">"HTTP Nginx on port 80"</span>,</div><div class="line">    <span class="string">"Status"</span>: <span class="string">"passing"</span>,</div><div class="line">    <span class="string">"Notes"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"Output"</span>: <span class="string">"HTTP GET http://localhost:80: 200 OK Output: "</span>,</div><div class="line">    <span class="string">"ServiceID"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"ServiceName"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"CreateIndex"</span>: 614,</div><div class="line">    <span class="string">"ModifyIndex"</span>: 869</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="string">"Node"</span>: <span class="string">"nginx1"</span>,</div><div class="line">    <span class="string">"CheckID"</span>: <span class="string">"nginx1"</span>,</div><div class="line">    <span class="string">"Name"</span>: <span class="string">"Nginx Status"</span>,</div><div class="line">    <span class="string">"Status"</span>: <span class="string">"passing"</span>,</div><div class="line">    <span class="string">"Notes"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"Output"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"ServiceID"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"ServiceName"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"CreateIndex"</span>: 612,</div><div class="line">    <span class="string">"ModifyIndex"</span>: 928</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="string">"Node"</span>: <span class="string">"nginx1"</span>,</div><div class="line">    <span class="string">"CheckID"</span>: <span class="string">"serfHealth"</span>,</div><div class="line">    <span class="string">"Name"</span>: <span class="string">"Serf Health Status"</span>,</div><div class="line">    <span class="string">"Status"</span>: <span class="string">"passing"</span>,</div><div class="line">    <span class="string">"Notes"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"Output"</span>: <span class="string">"Agent alive and reachable"</span>,</div><div class="line">    <span class="string">"ServiceID"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"ServiceName"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"CreateIndex"</span>: 610,</div><div class="line">    <span class="string">"ModifyIndex"</span>: 610</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="string">"Node"</span>: <span class="string">"nginx1"</span>,</div><div class="line">    <span class="string">"CheckID"</span>: <span class="string">"SSH TCP on port 80"</span>,</div><div class="line">    <span class="string">"Name"</span>: <span class="string">"SSH TCP on port 80"</span>,</div><div class="line">    <span class="string">"Status"</span>: <span class="string">"passing"</span>,</div><div class="line">    <span class="string">"Notes"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"Output"</span>: <span class="string">"TCP connect 172.16.238.13:80: Success"</span>,</div><div class="line">    <span class="string">"ServiceID"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"ServiceName"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"CreateIndex"</span>: 613,</div><div class="line">    <span class="string">"ModifyIndex"</span>: 613</div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<p>メンテナンスモードを解除する。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># maintenance modeをdisableにする</span></div><div class="line">consul maint -disable</div><div class="line">Node maintenance is now disabled</div><div class="line"></div><div class="line">consul maint</div><div class="line"><span class="comment"># なし</span></div></pre></td></tr></table></figure>
<h3 id="event処理"><a href="#event処理" class="headerlink" title="event処理"></a>event処理</h3><p>イベントを監視して、発火時に任意の処理を実行することができる。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># testイベントをwatchする</span></div><div class="line">docker <span class="built_in">exec</span> -it consule1 /bin/sh</div><div class="line">consul watch -type=event -name=<span class="built_in">test</span> <span class="built_in">echo</span> <span class="string">"test"</span></div><div class="line"></div><div class="line"><span class="comment"># testイベントを発行</span></div><div class="line">docker <span class="built_in">exec</span> -it nginx1 /bin/bash</div><div class="line"></div><div class="line"><span class="comment"># consul1</span></div><div class="line"><span class="built_in">test</span></div></pre></td></tr></table></figure>
<p>watchコマンドで状態が変化した際に特定の処理をしてみる。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">docker <span class="built_in">exec</span> -it consule1 /bin/sh</div><div class="line">consul watch -type=checks -state=critical <span class="string">"jq ."</span></div><div class="line">[]</div><div class="line"> </div><div class="line"><span class="comment"># nginx1を落とす</span></div><div class="line">docker stop nginx1</div><div class="line"> </div><div class="line"><span class="comment"># criticalが表示される</span></div><div class="line">[</div><div class="line">  &#123;</div><div class="line">    <span class="string">"Node"</span>: <span class="string">"nginx1"</span>,</div><div class="line">    <span class="string">"CheckID"</span>: <span class="string">"serfHealth"</span>,</div><div class="line">    <span class="string">"Name"</span>: <span class="string">"Serf Health Status"</span>,</div><div class="line">    <span class="string">"Status"</span>: <span class="string">"critical"</span>,</div><div class="line">    <span class="string">"Notes"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"Output"</span>: <span class="string">"Agent not live or unreachable"</span>,</div><div class="line">    <span class="string">"ServiceID"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"ServiceName"</span>: <span class="string">""</span></div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<h3 id="consul-templateを試してみる"><a href="#consul-templateを試してみる" class="headerlink" title="consul-templateを試してみる"></a>consul-templateを試してみる</h3><p><a href="https://github.com/hashicorp/consul-template" target="_blank" rel="external">consul-template</a>も試しておく。<br>consul-templateは特定のイベントに応じて、登録しているtemplateからファイルを生成することができる。<br>イベントを監視して、特定のイベントが発火すると登録しているtemplateからファイルを再生成する感じである。</p>
<p>consul-templateで監視できるイベントは</p>
<ul>
<li>datacenter(detacenterの)</li>
<li>file(fileの変更)</li>
<li>key(ストアのkey変更・存在)</li>
<li>ls(kvストアの最上位のkey)</li>
<li>node</li>
<li>secret</li>
<li>service</li>
<li>tree(kvストアのkvペア)</li>
</ul>
<p>例えば、次のようなnodeが追加されるたびにhost名とipを記載したファイルが出力されるもので試してみる。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; range nodes &#125;&#125;</div><div class="line"># &#123;&#123;.Node&#125;&#125;</div><div class="line">&#123;&#123; .Address &#125;&#125; &#123;&#123;.Node&#125;&#125;</div><div class="line">&#123;&#123; end &#125;&#125;</div></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">docker <span class="built_in">exec</span> -it nginx1 /bin/bash</div><div class="line"> </div><div class="line"><span class="comment"># -dry でdry run</span></div><div class="line">consul-template -consul-addr 127.0.0.1:8500 -template <span class="string">"/etc/consul-template/config.d/templates/hosts.ctmpl:/hosts"</span> -dry</div><div class="line"> </div><div class="line">&gt; /hosts</div><div class="line"> </div><div class="line"><span class="comment"># consul1</span></div><div class="line">172.16.238.10 consul1</div><div class="line"> </div><div class="line"><span class="comment"># consul2</span></div><div class="line">172.16.238.11 consul2</div><div class="line"> </div><div class="line"><span class="comment"># consul3</span></div><div class="line">172.16.238.12 consul3</div><div class="line"> </div><div class="line"><span class="comment"># nginx1</span></div><div class="line">172.16.238.13 nginx1</div></pre></td></tr></table></figure>
<p>node nginx2を追加する。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&gt; /hosts</div><div class="line"> </div><div class="line"><span class="comment"># consul1</span></div><div class="line">172.16.238.10 consul1</div><div class="line"> </div><div class="line"><span class="comment"># consul2</span></div><div class="line">172.16.238.11 consul2</div><div class="line"> </div><div class="line"><span class="comment"># consul3</span></div><div class="line">172.16.238.12 consul3</div><div class="line"> </div><div class="line"><span class="comment"># nginx1</span></div><div class="line">172.16.238.13 nginx1</div><div class="line"> </div><div class="line"><span class="comment"># nginx2</span></div><div class="line">172.16.238.14 nginx2</div></pre></td></tr></table></figure>
<p>テンプレートが更新されている。</p>
<h3 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h3><p>おさらいとして、今回はdockerの公式イメージでクラスタを構成してみた。<br>consulによるクラスタ構成を以前より意識できた感がある。</p>
<h3 id="repository"><a href="#repository" class="headerlink" title="repository"></a>repository</h3><p><a href="https://github.com/kazu69/docker-consul-example" target="_blank" rel="external">docker-consul-example</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;consulを少し触ったままだったので、ちゃんと学んでみた。&lt;br&gt;と言っても一通り触ったくらいであるが。&lt;/p&gt;
&lt;p&gt;あらためて試すにあたり、&lt;a href=&quot;https://hub.docker.com/_/consul/&quot;&gt;Official Consul Docker Image&lt;/a&gt;を使用してクラスタを構成した。&lt;/p&gt;
    
    </summary>
    
      <category term="memo" scheme="http://blog.kazu69.net/categories/memo/"/>
    
    
  </entry>
  
  <entry>
    <title>HTTP2 Server PushとService Workerを使ったレスポンス改善</title>
    <link href="http://blog.kazu69.net/2017/01/28/response_improvement_using_http2_server_push_service_worke/"/>
    <id>http://blog.kazu69.net/2017/01/28/response_improvement_using_http2_server_push_service_worke/</id>
    <published>2017-01-28T09:43:38.000Z</published>
    <updated>2017-01-29T14:01:10.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.kazu69.net/2016/10/06/using-http2-serverpush-with-expressjs/">Express width HTTP2 Server Push</a> を試したので、<br>今回はPushされたリソースをCache APIでブラウにキャッシュして、<br>二度目以降のアクセスはキャッシュを使いHTTPリクエストしないでレスポンスをさらに向上できることを試してみた。</p>
<a id="more"></a>
<p>復習でHTTP2 Server Pushを試してみる。</p>
<h2 id="HTTP2-Server-Push"><a href="#HTTP2-Server-Push" class="headerlink" title="HTTP2 Server Push"></a>HTTP2 Server Push</h2><p><a href="https://github.com/kazu69/express-http2-serviceworker-example" target="_blank" rel="external">サンプルで作ったアプリケーション</a>ではStreamにリソースファイルをPushしてレスポンスを返すことで、Server Pushを実現している。</p>
<p>もしアプリケーションの前にNginxなどのProxyサーバーがある場合は、HTTPヘッダーにLinkヘッダーを追加してレスポンスを返すようにしたら良い。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Promise</span>.all(</div><div class="line">    pushFiles.map(<span class="function"><span class="params">file</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">const</span> option = <span class="built_in">Object</span>.assign(stremOption, &#123;<span class="string">'response'</span>: &#123;<span class="string">'content-type'</span>: file.mime&#125;&#125;);</div><div class="line">        <span class="comment">// create push stream</span></div><div class="line">        <span class="keyword">const</span> stream = res.push(file.path, option);</div><div class="line"></div><div class="line">        stream.on(<span class="string">'error'</span>, error =&gt; &#123;</div><div class="line">            <span class="built_in">console</span>.error(error);</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        stream.end(fs.readFileSync(<span class="string">`<span class="subst">$&#123;publicPath&#125;</span><span class="subst">$&#123;file.path&#125;</span>`</span>));</div><div class="line">        <span class="keyword">return</span> file;</div><div class="line">    &#125;)</div><div class="line">).then(<span class="function"><span class="params">files</span> =&gt;</span> &#123;</div><div class="line">    next();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>HTTPリクエストする<br>(あらかじめcurlでhttp2出来るようにlibcurlにnghttp2オプションを追加している)</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">curl -kI https://localhost:3000/push/</div><div class="line">HTTP/2 200</div><div class="line">x-powered-by: Express</div><div class="line">access-control-allow-origin: *</div><div class="line">access-control-allow-headers: Origin, X-Requested-With, Content-Type, Accept</div></pre></td></tr></table></figure>
<p>Chrome Devtoolのネットワークを見てみると、HTTP2 + Server Push されていることがわかる。</p>
<p><img src="/images/2017/01/28/server-push.png" alt=""></p>
<h2 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h2><p><a href="https://www.w3.org/TR/service-workers/" target="_blank" rel="external">Service Worker</a>はブラウザがwebページのスクリプトとは別のプロセスでスクリプトをバックグラウンドできる機能。<br>プッシュ通知やモバイルアプリでのバックグラウンドでのデータの同期などが実現できる。</p>
<p>Caniuseでみると<a href="http://caniuse.com/#feat=serviceworkers" target="_blank" rel="external">各ブラウザのサポート状況はこんな感じ</a>。</p>
<p>今回は<a href="https://www.google.co.jp/chrome/browser/canary.html" target="_blank" rel="external">Chrome Canary (v58)</a>を使う。もちろんHTTPS環境は必要。<br>そのほかChromeでService Workerを使うためのDebug環境を整えておく。</p>
<h3 id="自己証明書を許可する"><a href="#自己証明書を許可する" class="headerlink" title="自己証明書を許可する"></a>自己証明書を許可する</h3><p>chromeでローカルホスト証明書を許可するようにフラグを切り替えておく。</p>
<p>chrome://flags/#allow-insecure-localhost を開いて設定を切替る。</p>
<p><img src="/images/2017/01/28/allow-insecure-localhost.png" alt=""></p>
<h3 id="Service-Worker-Inspector"><a href="#Service-Worker-Inspector" class="headerlink" title="Service Worker Inspector"></a>Service Worker Inspector</h3><p>Service Worker が有効になっているかは、chrome://inspect/#service-workers を開くことで確認できる。<br>Service Worker の一覧と内容、解除を操作できる。</p>
<p><img src="/images/2017/01/28/service-worker-inspector.png" alt=""></p>
<h3 id="serviceworker-internals"><a href="#serviceworker-internals" class="headerlink" title="serviceworker-internals"></a>serviceworker-internals</h3><p>chrome://serviceworker-internals/ を開いて確認できる。</p>
<p>Service Workerの内容や開始、停止やデバックなどを行える。</p>
<p><img src="/images/2017/01/28/serviceworker-internals.png" alt=""></p>
<h3 id="Service-Worker-について"><a href="#Service-Worker-について" class="headerlink" title="Service Worker について"></a>Service Worker について</h3><p>まずはService Workerについてざっくりと学ぶ。<br>Service Workerのライフサイクルは次のようになる。</p>
<p><img src="/images/2017/01/28/service-workers-lifecycle.png" alt=""></p>
<h3 id="1-Service-Workerの登録"><a href="#1-Service-Workerの登録" class="headerlink" title="1. Service Workerの登録"></a>1. Service Workerの登録</h3><p>まずページにアクセスすると、Service Workerをダウンロード。<br>register メソッドをつかってjavascriptを登録する。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">navigator.serviceWorker.register(<span class="string">'/serviceworker.js'</span>, &#123;<span class="attr">scope</span>: <span class="string">'/'</span>&#125;)</div></pre></td></tr></table></figure>
<p>登録の際にscopeパラメータオプションを指定できる。<br>scopeを指定することで、service workerが制御可能なコンテンツを指定できる。<br>たとえば <strong>{ socpe: ‘/sw/‘ }</strong> と指定した場合、 sw/ ディレクトリ以下をService Workerで制御できる。</p>
<p>ちなみに何度か登録に失敗した、その場合は次のことが考えられる。</p>
<ul>
<li>https通信ではない</li>
<li>service workerファイルへのパスが相対パスではない</li>
<li>指定するファイルがSameOriginではない</li>
</ul>
<h3 id="2-Service-Workerのインストールとアクティベート"><a href="#2-Service-Workerのインストールとアクティベート" class="headerlink" title="2 Service Workerのインストールとアクティベート"></a>2 Service Workerのインストールとアクティベート</h3><p>登録すると、InstallとActivate というイベントが順番に実行される。<br>すでにService Workerがすでに登録されている場合は、Service Workerが更新できる状況になるまで待つことになる。<br>(すぐに処理を開始するとデータに不整合が発生する恐れがあるため)</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="string">'serviceWorker'</span> <span class="keyword">in</span> navigator) &#123;</div><div class="line">    navigator.serviceWorker.register(<span class="string">'/sw.js'</span>, &#123;<span class="attr">scope</span>: <span class="string">'/'</span>&#125;).then(<span class="function"><span class="params">reg</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">if</span>(reg.installing) &#123;</div><div class="line">            <span class="comment">// インストール中</span></div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'Service worker installing'</span>);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(reg.waiting) &#123;</div><div class="line">            <span class="comment">// すでに登録されているService Workerがある場合</span></div><div class="line">            <span class="comment">// service workerが更新できる状況になるまで待つ</span></div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'Service worker installed'</span>);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(reg.active) &#123;</div><div class="line">            <span class="comment">// アクティベート</span></div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'Service worker active'</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</div><div class="line">        <span class="built_in">console</span>.error(<span class="string">'ServiceWorker registration failed:'</span>, err);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.addEventListener(<span class="string">'install'</span>, event =&gt; &#123;</div><div class="line">        event.waitUntil(</div><div class="line">            <span class="comment">// some install event hook script</span></div><div class="line">        );</div><div class="line">    &#125;, <span class="literal">false</span>);</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.addEventListener(<span class="string">'activate'</span>, event =&gt; &#123;</div><div class="line">        event.waitUntil(</div><div class="line">            <span class="comment">// some event activate hook script</span></div><div class="line">        );</div><div class="line">    &#125;, <span class="literal">false</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>各状態のイベントリスナーを追加することで、callbackできる。<br>このとき、各遷移状態に移行した際に実行するメソッドは waitUntil()メソッドに引数で渡すことができる。</p>
<p>また、install後に直ちにactivate状態に遷移するには</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">self.addEventListener(<span class="string">'install'</span>, event =&gt; &#123;</div><div class="line">    event.waitUntil(self.skipWaiting());</div><div class="line">&#125;, <span class="literal">false</span>);</div></pre></td></tr></table></figure>
<p>activate後に直ちにactivated状態に遷移するには</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">self.addEventListener(<span class="string">'activate'</span>, event =&gt; &#123;</div><div class="line">    event.waitUntil(self.clients.claim());</div><div class="line">&#125;, <span class="literal">false</span>);</div></pre></td></tr></table></figure>
<p>今回はinstall時にファイルをキャッシュについする。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">self.addEventListener(<span class="string">'install'</span>, event =&gt; &#123;</div><div class="line">    event.waitUntil(</div><div class="line">        caches.open(CACHE_NAME)</div><div class="line">        .then(<span class="function"><span class="params">cache</span> =&gt;</span> &#123;</div><div class="line">            <span class="keyword">const</span> cachePromises = CACHE.map(<span class="function"><span class="params">url</span> =&gt;</span> &#123;</div><div class="line">                <span class="keyword">const</span> fetchUrl = <span class="keyword">new</span> URL(url, location.href);</div><div class="line">                <span class="comment">// no-cors: クロスオリジンでのリクエストを防ぐ。HEAD、GET、POST 以外のメソッド実行を防ぐ。</span></div><div class="line">                <span class="keyword">const</span> request = <span class="keyword">new</span> Request(fetchUrl, &#123; <span class="attr">mode</span>: <span class="string">'no-cors'</span> &#125;);</div><div class="line"></div><div class="line">                <span class="comment">// HTTPリクエストにクレデンシャルを含める</span></div><div class="line">                <span class="keyword">return</span> fetch(request, &#123;<span class="attr">credentials</span>: <span class="string">'include'</span>&#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</div><div class="line">                    <span class="keyword">if</span> (response.status &gt;= <span class="number">400</span>) &#123;</div><div class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'request for '</span> + fetchUrl + <span class="string">' failed with status '</span> + response.statusText);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">return</span> cache.add(fetchUrl, response);</div><div class="line">                &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</div><div class="line">                    <span class="built_in">console</span>.error(<span class="string">'Not caching '</span> + url + <span class="string">' due to '</span> + error);</div><div class="line">                &#125;);</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.all(cachePromises)</div><div class="line"></div><div class="line">        &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</div><div class="line">            <span class="built_in">console</span>.error(<span class="string">'Pre-fetching failed:'</span>, error);</div><div class="line">        &#125;)</div><div class="line">    );</div><div class="line">    event.waitUntil(global.skipWaiting());</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>すでにエンドユーザーのブラウザに登録されたservice workerを更新したいときなどに有効な手段っぽい。</p>
<h3 id="3-Fetchイベント"><a href="#3-Fetchイベント" class="headerlink" title="3 Fetchイベント"></a>3 Fetchイベント</h3><p>Service Workerがactivateな状態で、scope配下のページを移動したり、ページを更新したりすると、<br>fetchイベントを受け取る。</p>
<p>このfetchイベントのリスナーでHTTPレスポンスを横取りして、リソースファイルをCache APIを介してに登録したり、読み込んだりできる。<br>これにより実際にHTTPリクエストすることなくページを返すことができる。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">self.addEventListener(<span class="string">'fetch'</span>, event =&gt; &#123;</div><div class="line">    event.respondWith(</div><div class="line">        <span class="comment">// キャッシュの中に該当するリソースがある</span></div><div class="line">        caches.match(event.request)</div><div class="line">        .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">            <span class="comment">// キャッシュがあればキャッシュを返す</span></div><div class="line">            <span class="keyword">if</span> (response) &#123;</div><div class="line">                <span class="keyword">return</span> response;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// リソースを取得する</span></div><div class="line">            <span class="keyword">return</span> fetch(event.request)</div><div class="line">                .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</div><div class="line">                    <span class="comment">// リソースが取得できないときはレスポンスを返す</span></div><div class="line">                    <span class="comment">// HTTP Statusのチェック</span></div><div class="line">                    <span class="comment">// Same Originのチェック(サードパーティのリソースはキャッシュされない)</span></div><div class="line">                    <span class="keyword">if</span>(!response || response.status !== <span class="number">200</span> || response.type !== <span class="string">'basic'</span>) &#123;</div><div class="line">                        <span class="keyword">return</span> response;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="comment">// ブラウザに返すレスポンスとキャッシュ用のレスポンスの2つ必要なので複製</span></div><div class="line">                    <span class="keyword">const</span> responseToCache = response.clone();</div><div class="line"></div><div class="line">                    caches.open(CACHE_NAME)</div><div class="line">                    .then(<span class="function"><span class="params">cache</span> =&gt;</span> &#123;</div><div class="line">                        <span class="comment">// キャッシュを更新</span></div><div class="line">                        cache.put(event.request, responseToCache);</div><div class="line">                    &#125;);</div><div class="line"></div><div class="line">                    <span class="comment">// ブラウザにレスポンスを返す</span></div><div class="line">                    <span class="keyword">return</span> response;</div><div class="line">               &#125;</div><div class="line">            );</div><div class="line">        &#125;)</div><div class="line">    );</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>実際にリクエストしてみる。<br>1回目はHTTP2 + Server Push でレスポンスを返す。</p>
<p><img src="/images/2017/01/28/server-push.png" alt=""></p>
<p>2回目はキャッシュを返す。from ServiceWorkerとあり、リクエストをしないでService WorkerがCacheを返し、ページが描画されることがわかる。</p>
<p><img src="/images/2017/01/28/server-push-serviceworker.png" alt=""></p>
<h3 id="4-Service-Worker-の更新"><a href="#4-Service-Worker-の更新" class="headerlink" title="4. Service Worker の更新"></a>4. Service Worker の更新</h3><p>Service workerファイルが更新され、ファイルにバイト単位で差分がある場合、<br>再度ファイルをダウンロード、インストールを行う。</p>
<p>ただし、既存のService Worker稼働しているので、新しくダウンロードしたファイルはwaitingになる。<br>ページが閉じられるなどして、新しい Service Workerコントーロール可能な状態となりactivateに遷移する。</p>
<h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>Server Push + Service Worker によりトラフィックは改善される。<br>両者は技術的にも相性が良いなぁという感じ。<br>とくにデバイスによってはオフライン時でもキャッシュを利用できることで、恩恵を受けるものもありそう。</p>
<p>また、HTTP2もしくはServie Workerをサポートしてない(両方ともサポートしてない)場合でも副作用はないため、受けられる恩恵は大きい。<br>まだ市場的には試用段階ではあるが、Progressive Web App(PWA)は今後当たり前にウェブ開発の流れにシフトしていくんだろうな。</p>
<h3 id="作成したサンプル"><a href="#作成したサンプル" class="headerlink" title="作成したサンプル"></a>作成したサンプル</h3><p><a href="https://github.com/kazu69/express-http2-serviceworker-example" target="_blank" rel="external">express-http2-serviceworker-example</a></p>
<h3 id="参考にしたページ"><a href="#参考にしたページ" class="headerlink" title="参考にしたページ"></a>参考にしたページ</h3><p><a href="https://developers.google.com/web/fundamentals/getting-started/codelabs/your-first-pwapp" target="_blank" rel="external">はじめてのプログレッシブ ウェブアプリ</a><br><a href="https://developers.google.com/web/fundamentals/getting-started/primers/service-workers" target="_blank" rel="external">Service Worker の紹介</a><br><a href="https://developer.mozilla.org/ja/docs/Web/API/ServiceWorker_API" target="_blank" rel="external">ServiceWorker API</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/API/Cache" target="_blank" rel="external">Cache</a><br><a href="https://jakearchibald.github.io/isserviceworkerready/" target="_blank" rel="external">ServiceWorker ready?</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://blog.kazu69.net/2016/10/06/using-http2-serverpush-with-expressjs/&quot;&gt;Express width HTTP2 Server Push&lt;/a&gt; を試したので、&lt;br&gt;今回はPushされたリソースをCache APIでブラウにキャッシュして、&lt;br&gt;二度目以降のアクセスはキャッシュを使いHTTPリクエストしないでレスポンスをさらに向上できることを試してみた。&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="http://blog.kazu69.net/categories/web/"/>
    
      <category term="memo" scheme="http://blog.kazu69.net/categories/web/memo/"/>
    
    
  </entry>
  
  <entry>
    <title>Expressでのhttp2 + server pushを使う</title>
    <link href="http://blog.kazu69.net/2016/10/06/using-http2-serverpush-with-expressjs/"/>
    <id>http://blog.kazu69.net/2016/10/06/using-http2-serverpush-with-expressjs/</id>
    <published>2016-10-06T09:43:38.000Z</published>
    <updated>2016-10-06T10:43:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>nodejsの<a href="http://expressjs.com/" target="_blank" rel="external">Express</a>をhttp2サポートして、server pushを試したときのメモ。</p>
<a id="more"></a>
<p>今回は手元でサクッと試すので、自己証明書を使う。</p>
<h2 id="自己証明書の作成"><a href="#自己証明書の作成" class="headerlink" title="自己証明書の作成"></a>自己証明書の作成</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">openssl genrsa -h</div><div class="line">usage: genrsa [args] [numbits]</div><div class="line"> -des            encrypt the generated key with DES <span class="keyword">in</span> cbc mode</div><div class="line"> -des3           encrypt the generated key with DES <span class="keyword">in</span> ede cbc mode (168 bit key)</div><div class="line"> -seed</div><div class="line">                 encrypt PEM output with cbc seed</div><div class="line"> -aes128, -aes192, -aes256</div><div class="line">                 encrypt PEM output with cbc aes</div><div class="line"> -out file       output the key to <span class="string">'file</span></div><div class="line"> -passout arg    output file pass phrase source</div><div class="line"> -f4             use F4 (0x10001) for the E value</div><div class="line"> -3              use 3 for the E value</div><div class="line"> -engine e       use engine e, possibly a hardware device.</div><div class="line"> -rand file:file:...</div><div class="line">                 load the file (or the files in the directory) into</div><div class="line">                 the random number generator</div></pre></td></tr></table></figure>
<p>秘密鍵作成を作成</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># openssl genrsa -des3(暗号化アルゴリズム) -passout pass:(パスワード) -out （秘密鍵ファイル名）（キー長）</span></div><div class="line">openssl genrsa -des3 -passout pass:password -out keys/private.key 2048</div></pre></td></tr></table></figure>
<p>秘密鍵を確認する</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">openssl rsa -text &lt; private.key</div><div class="line">Enter pass phrase:</div><div class="line"></div><div class="line">Private-Key: (2048 bit)</div><div class="line">modulus:</div><div class="line">...</div><div class="line">...</div><div class="line">...</div><div class="line">-----END RSA PRIVATE KEY-----</div></pre></td></tr></table></figure>
<p>秘密鍵からRSA公開鍵の作成</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># openssl rsa -in （秘密鍵ファイル名） -pubout -out （公開鍵ファイル名） -passin pass:(パスワード)</span></div><div class="line">openssl rsa -in private.key -pubout -out public.key -passin pass:password</div><div class="line">writing RSA key</div></pre></td></tr></table></figure>
<p>CSRを作成</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># openssl req -new -key （秘密鍵ファイル名） -out （CSRファイル名）</span></div><div class="line">openssl req -new -key private.key -out server.csr</div><div class="line"></div><div class="line">openssl req -text &lt; server.csr</div><div class="line">Certificate Request:</div><div class="line">    Data:</div><div class="line">    ...</div><div class="line">    ...</div><div class="line">    ...</div><div class="line">-----END CERTIFICATE REQUEST-----</div></pre></td></tr></table></figure>
<p>証明書(CRT)を作成</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 365日有効な証明書を作成</span></div><div class="line">openssl x509 -req -days 365 -signkey private.key &lt; server.csr &gt; server.crt</div></pre></td></tr></table></figure>
<h2 id="expressセットアップ"><a href="#expressセットアップ" class="headerlink" title="expressセットアップ"></a>expressセットアップ</h2><p>続いでexpressのセットアップ。ES nextでサーバーを書くのでbabel-nodeを使ってexpressを起動する<br>(ちなみにproductionではoverheadが大きいので使うことは推奨されていない)</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i -D babel-cli babel-preset-latest</div></pre></td></tr></table></figure>
<p>http2のモジュールは<a href="https://github.com/molnarg/node-http2/" target="_blank" rel="external">node-http2</a>が<a href="https://github.com/molnarg/node-http2/issues/100#issuecomment-231173779" target="_blank" rel="external">Expressで動かない</a>。(Express ver5では対応されるはず)<br><a href="https://github.com/indutny/node-spdy" target="_blank" rel="external">spdy</a>を使ってhttp2に対応させる。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i -S express spdy morgan file-stream-rotator</div></pre></td></tr></table></figure>
<h3 id="node-http2の場合の実装例"><a href="#node-http2の場合の実装例" class="headerlink" title="node_http2の場合の実装例"></a>node_http2の場合の実装例</h3><p>ちなみにnode_http2を使った場合は以下の感じで対応するようになる。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> htttp2 <span class="keyword">from</span> <span class="string">'http2'</span>;</div><div class="line">option = &#123;</div><div class="line">    <span class="attr">key</span>: fs.readFileSync(<span class="string">'./example/localhost.key'</span>),</div><div class="line">    <span class="attr">cert</span>: fs.readFileSync(<span class="string">'./example/localhost.crt'</span>),</div><div class="line">    <span class="attr">passphrase</span>: <span class="string">'password'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">http2.createServer(options, (req, res) =&gt; &#123;</div><div class="line">    <span class="comment">// pushするリソースのStreamを作り、データを書き込んで送信する。</span></div><div class="line">    <span class="keyword">if</span> (res.push) &#123;</div><div class="line">      <span class="keyword">const</span> push = res.push(<span class="string">'/pushed.js'</span>);</div><div class="line">      push.writeHead(<span class="number">200</span>);</div><div class="line">      fs.createReadStream(path.join(__dirname, <span class="string">'/pushed.js'</span>)).pipe(push);</div><div class="line">    &#125;</div><div class="line">     fs.createReadStream(path.join(__dirname, <span class="string">'/client.js'</span>)).pipe(res);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Expressサーバーを作成する。<br>実際の作成したものは<a href="https://github.com/kazu69/express-with-http2-and-server-push-example" target="_blank" rel="external">こちらから</a>。</p>
<p>エントリポイント(index.js)は以下のようになる</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">import express from <span class="string">'express'</span>;</div><div class="line">import spdy from <span class="string">'spdy'</span>;</div><div class="line">import morgan from <span class="string">'morgan'</span>;</div><div class="line">import path from <span class="string">'path'</span>;</div><div class="line">import fs from <span class="string">'fs'</span>;</div><div class="line">import FileStreamRotator from <span class="string">'file-stream-rotator'</span>;</div><div class="line"></div><div class="line">import routes from <span class="string">'./routes/index.js'</span></div><div class="line"></div><div class="line">// when index.js execute app/index.js</div><div class="line">const rootDir = __dirname + <span class="string">'/..'</span>;</div><div class="line">const viewPath = `<span class="variable">$&#123;rootDir&#125;</span>/app/views`;</div><div class="line"></div><div class="line">const port = 3000;</div><div class="line">const app = express();</div><div class="line">const options = &#123;</div><div class="line">    key: fs.readFileSync(`<span class="variable">$&#123;rootDir&#125;</span>/keys/private.key`), // private key</div><div class="line">    cert: fs.readFileSync(`<span class="variable">$&#123;rootDir&#125;</span>/keys/server.crt`), // cert file</div><div class="line">    passphrase: <span class="string">'password'</span></div><div class="line">&#125;;</div><div class="line">const <span class="built_in">log</span>Dir = path.join(`<span class="variable">$&#123;rootDir&#125;</span>/app/<span class="built_in">log</span>`);</div><div class="line">const accessLogOption = &#123;</div><div class="line">    date_format: <span class="string">'YYYYMMDD'</span>,</div><div class="line">    filename: path.join(<span class="built_in">log</span>Dir, <span class="string">'production-%DATE%.log'</span>),</div><div class="line">    frequency: <span class="string">'daily'</span>,</div><div class="line">    verbose: <span class="literal">false</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">app.use(express.static(<span class="string">'app/views'</span>));</div><div class="line">app.use(express.static(<span class="string">'app/public'</span>));</div><div class="line">app.use(<span class="string">'/'</span>, routes);</div><div class="line"></div><div class="line">fs.existsSync(<span class="built_in">log</span>Dir) || fs.mkdirSync(<span class="built_in">log</span>Dir);</div><div class="line"><span class="keyword">if</span>(app.get(<span class="string">'env'</span>) === <span class="string">'production'</span>) &#123;</div><div class="line">    const accessLogStream = FileStreamRotator.getStream(accessLogOption);</div><div class="line">    app.use(morgan(&#123; format: <span class="string">'common'</span>, stream: accessLogStream &#125;));</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    app.use(morgan(&#123; format: <span class="string">'dev'</span>, date: <span class="string">'clf'</span>, immediate: <span class="literal">true</span> &#125;));</div><div class="line">    app.use(morgan(&#123; format: <span class="string">'common'</span> &#125;));</div><div class="line">&#125;</div><div class="line"></div><div class="line">spdy.createServer(options, app)</div><div class="line">    .listen(port, (error) =&gt; &#123;</div><div class="line">        <span class="keyword">if</span> (error) &#123;</div><div class="line">            console.error(error);</div><div class="line">            <span class="built_in">return</span> process.exit(1);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            console.log(`Listening on port: <span class="variable">$&#123;port&#125;</span>.`);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">module.exports = app;</div></pre></td></tr></table></figure>
<p>サーバーをビルドして起動できるるようににnpm scriptを追加</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">...</div><div class="line">  "scripts": &#123;</div><div class="line">    "build": "babel --presets es2015 -d dist src",</div><div class="line">    "prestart": "npm run build",</div><div class="line">    "start": "node dist/index.js",</div><div class="line">    "dev": "babel-node --debug --presets es2015 -- src/index.js --debug"</div><div class="line">  &#125;,</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="curl-with-http2"><a href="#curl-with-http2" class="headerlink" title="curl with http2"></a>curl with http2</h2><p>curlでhttp2出来るようにlibcurlにnghttp2オプションを追加する</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">brew install curl --with-nghttp2</div><div class="line">brew link curl --force</div><div class="line"></div><div class="line">brew info curl</div><div class="line">curl: stable 7.50.3 (bottled) [keg-only]</div><div class="line">Get a file from an HTTP, HTTPS or FTP server</div><div class="line">https://curl.haxx.se/</div><div class="line">/usr/<span class="built_in">local</span>/Cellar/curl/7.50.3 (366 files, 2.6M) *</div><div class="line">  Built from <span class="built_in">source</span> on 2016-09-18 at 16:08:22 with: --with-nghttp2</div><div class="line">From: https://github.com/Homebrew/homebrew-core/blob/master/Formula/curl.rb</div><div class="line">==&gt; Dependencies</div><div class="line">Build: pkg-config ✔</div><div class="line">Optional: openssl ✔, libidn ✘, rtmpdump ✘, libssh2 ✘, c-ares ✘, libmetalink ✘, libressl ✘, nghttp2 ✔</div><div class="line">==&gt; Options</div><div class="line">--with-c-ares</div><div class="line">    Build with C-Ares async DNS support</div><div class="line">--with-gssapi</div><div class="line">    Build with GSSAPI/Kerberos authentication support.</div><div class="line">--with-libidn</div><div class="line">    Build with support <span class="keyword">for</span> Internationalized Domain Names</div><div class="line">--with-libmetalink</div><div class="line">    Build with libmetalink support.</div><div class="line">--with-libressl</div><div class="line">    Build with LibreSSL instead of Secure Transport or OpenSSL</div><div class="line">--with-libssh2</div><div class="line">    Build with scp and sftp support</div><div class="line">--with-nghttp2</div><div class="line">    Build with HTTP/2 support (requires OpenSSL or LibreSSL)</div><div class="line">--with-openssl</div><div class="line">    Build with OpenSSL instead of Secure Transport</div><div class="line">--with-rtmpdump</div><div class="line">    Build with RTMP support</div><div class="line">...</div><div class="line"></div><div class="line">ということで、http2できるのか試して見る。</div><div class="line"></div><div class="line">```sh</div><div class="line">curl -I --http2 https://www.cloudflare.com/</div><div class="line"></div><div class="line">HTTP/2 200</div><div class="line">date: Sun, 18 Sep 2016 07:26:23 GMT</div><div class="line">content-type: text/html</div><div class="line"><span class="built_in">set</span>-cookie: __cfduid=dc330f6d51f40d20cfc7056c62e193<span class="built_in">fc</span>21474183583; expires=Mon, 18-Sep-17 07:26:23 GMT; path=/; domain=.cloudflare.com; HttpOnly</div><div class="line">last-modified: Wed, 14 Sep 2016 17:39:07 GMT</div><div class="line">cf-cache-status: HIT</div><div class="line">expires: Sun, 18 Sep 2016 11:26:23 GMT</div><div class="line">cache-control: public, max-age=14400</div><div class="line">server: cloudflare-nginx</div><div class="line">cf-ray: 2e4311c74c242e09-NRT</div><div class="line">cf-h2-pushed: &lt;/js/jquery-2.1.4-min.js&gt;</div></pre></td></tr></table></figure>
<h2 id="http2を確認"><a href="#http2を確認" class="headerlink" title="http2を確認"></a>http2を確認</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">npm start</div><div class="line"></div><div class="line">curl -kiv https://127.0.0.1:3000/</div><div class="line">*   Trying 127.0.0.1...</div><div class="line">* TCP_NODELAY <span class="built_in">set</span></div><div class="line">* Connected to 127.0.0.1 (127.0.0.1) port 3000 (<span class="comment">#0)</span></div><div class="line">* ALPN, offering h2</div><div class="line">* ALPN, offering http/1.1</div><div class="line">* Cipher selection: ALL:!EXPORT:!EXPORT40:!EXPORT56:!aNULL:!LOW:!RC4:@STRENGTH</div><div class="line">* successfully <span class="built_in">set</span> certificate verify locations:</div><div class="line">*   CAfile: /usr/<span class="built_in">local</span>/etc/openssl/cert.pem</div><div class="line">  CApath: none</div><div class="line">* TLSv1.2 (OUT), TLS header, Certificate Status (22):</div><div class="line">* TLSv1.2 (OUT), TLS handshake, Client hello (1):</div><div class="line">* TLSv1.2 (IN), TLS handshake, Server hello (2):</div><div class="line">* TLSv1.2 (IN), TLS handshake, Certificate (11):</div><div class="line">* TLSv1.2 (IN), TLS handshake, Server key exchange (12):</div><div class="line">* TLSv1.2 (IN), TLS handshake, Server finished (14):</div><div class="line">* TLSv1.2 (OUT), TLS handshake, Client key exchange (16):</div><div class="line">* TLSv1.2 (OUT), TLS change cipher, Client hello (1):</div><div class="line">* TLSv1.2 (OUT), TLS handshake, Finished (20):</div><div class="line">* TLSv1.2 (IN), TLS change cipher, Client hello (1):</div><div class="line">* TLSv1.2 (IN), TLS handshake, Finished (20):</div><div class="line">* SSL connection using TLSv1.2 / ECDHE-RSA-AES128-GCM-SHA256</div><div class="line">* ALPN, server accepted to use h2</div><div class="line">* Server certificate:</div><div class="line">*  subject: C=AU; ST=Some-State; O=Internet Widgits Pty Ltd</div><div class="line">*  start date: Sep 17 14:59:31 2016 GMT</div><div class="line">*  expire date: Sep 17 14:59:31 2017 GMT</div><div class="line">*  issuer: C=AU; ST=Some-State; O=Internet Widgits Pty Ltd</div><div class="line">*  SSL certificate verify result: self signed certificate (18), continuing anyway.</div><div class="line">* Using HTTP2, server supports multi-use</div><div class="line">* Connection state changed (HTTP/2 confirmed)</div><div class="line">* Copying HTTP/2 data <span class="keyword">in</span> stream buffer to connection buffer after upgrade: len=0</div><div class="line">* Using Stream ID: 1 (easy handle 0x7fd47080e200)</div><div class="line">&gt; GET / HTTP/1.1</div><div class="line">&gt; Host: 127.0.0.1:3000</div><div class="line">&gt; User-Agent: curl/7.50.3</div><div class="line">&gt; Accept: */*</div><div class="line">&gt;</div><div class="line">* Connection state changed (MAX_CONCURRENT_STREAMS updated)!</div><div class="line">&lt; HTTP/2 200</div><div class="line">HTTP/2 200</div><div class="line">&lt; x-powered-by: Express</div><div class="line">x-powered-by: Express</div><div class="line">&lt; content-type: application/json; charset=utf-8</div><div class="line">content-type: application/json; charset=utf-8</div><div class="line">&lt; content-length: 16</div><div class="line">content-length: 16</div><div class="line">&lt; etag: W/<span class="string">"10-RUik8aEaJBEg+XocNzeBeg"</span></div><div class="line">etag: W/<span class="string">"10-RUik8aEaJBEg+XocNzeBeg"</span></div><div class="line">...</div></pre></td></tr></table></figure>
<p>HTTP/2 200 でレスポンス確認できた。<br>引き続きServer Pushの対応。</p>
<h2 id="Server-Push"><a href="#Server-Push" class="headerlink" title="Server Push"></a>Server Push</h2><p>実装的には、レスポンスとして返却されるhtmlファイルからjsやcssファイルを抽出し、<br>新しいStreamを作成して、データを書き込み送信する。</p>
<p>ざっくりと以下のようなミドルウェアを作成にする。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// viewPath はviewファイルへのパス</span></div><div class="line"></div><div class="line">router.get(<span class="string">'/push'</span>, (req, res) =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> html = fs.readFileSync(<span class="string">`<span class="subst">$&#123;viewPath&#125;</span>/index.html`</span>);</div><div class="line"></div><div class="line">    <span class="comment">// files = &#123; 'filename': [ &#123; 'path': 'file/to/path', 'mime': 'file-mime-type' &#125; ]&#125;</span></div><div class="line">    <span class="keyword">const</span> pushFIles = files[<span class="string">`<span class="subst">$&#123;viewPath&#125;</span>/index.html`</span>];</div><div class="line">    pushFIles.forEach(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">const</span> option = <span class="built_in">Object</span>.assign(stremOption, &#123;<span class="string">'response'</span>: &#123;<span class="string">'content-type'</span>: file.mime&#125;&#125;);</div><div class="line"></div><div class="line">        <span class="comment">// create push stream</span></div><div class="line">        <span class="keyword">const</span> stream = res.push(<span class="string">`<span class="subst">$&#123;publicPath&#125;</span><span class="subst">$&#123;file.path&#125;</span>`</span>, option);</div><div class="line"></div><div class="line">        stream.on(<span class="string">'error'</span>, (error) =&gt; &#123;</div><div class="line">            <span class="built_in">console</span>.error(error);</div><div class="line">        &#125;);</div><div class="line">        stream.end();</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    res.end(html);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Chromeでnet-internals(chrome://net-internals/#events)を使って確認する。<br>/push にアクセスして、chrome://net-internals/#eventsからHTTP2_SESSIONを確認。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">t=3850 [st=10]  HTTP2_SESSION_RECV_PUSH_PROMISE</div><div class="line">                --&gt; :method: GET</div><div class="line">                    :path: /app/public//js/main.js</div><div class="line">                    :scheme: https</div><div class="line">                    :authority: localhost:3000</div><div class="line">                    accept: */*</div><div class="line">                --&gt; id = 7</div><div class="line">                --&gt; promised_stream_id = 6</div><div class="line">t=3850 [st=10]  HTTP2_SESSION_RECV_PUSH_PROMISE</div><div class="line">                --&gt; :method: GET</div><div class="line">                    :path: /app/public/js/app.js</div><div class="line">                    :scheme: https</div><div class="line">                    :authority: localhost:3000</div><div class="line">                    accept: */*</div><div class="line">                --&gt; id = 7</div><div class="line">                --&gt; promised_stream_id = 8</div></pre></td></tr></table></figure>
<p><strong> HTTP2_SESSION_RECV_PUSH_PROMISE </strong> となりサーバーからpushされていることがわかる。</p>
<p>Expressでのhttp2とserver push は想像よりも簡単に対応できるのかもしれないという気がした。</p>
<h3 id="作成したサンプル"><a href="#作成したサンプル" class="headerlink" title="作成したサンプル"></a>作成したサンプル</h3><p><a href="https://github.com/kazu69/express-with-http2-and-server-push-example" target="_blank" rel="external">express-with-http2-and-server-push-example</a></p>
<h3 id="参考にしたページ"><a href="#参考にしたページ" class="headerlink" title="参考にしたページ"></a>参考にしたページ</h3><p><a href="http://webapplog.com/http2-node/" target="_blank" rel="external">Optimize Your App with HTTP/2 Server Push Using Node and Express</a><br><a href="https://github.com/indutny/node-spdy" target="_blank" rel="external">node-spdy</a><br><a href="https://curl.haxx.se/docs/http2.html" target="_blank" rel="external">HTTP/2 with curl</a><br><a href="https://simonecarletti.com/blog/2016/01/http2-curl-macosx/" target="_blank" rel="external">Using cURL with HTTP/2 on Mac OS X</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;nodejsの&lt;a href=&quot;http://expressjs.com/&quot;&gt;Express&lt;/a&gt;をhttp2サポートして、server pushを試したときのメモ。&lt;/p&gt;
    
    </summary>
    
      <category term="memo" scheme="http://blog.kazu69.net/categories/memo/"/>
    
    
  </entry>
  
  <entry>
    <title>Supportsルールを使って未来のcssプロパティに備えた開発</title>
    <link href="http://blog.kazu69.net/2016/09/14/using-at-rule-supports-development-with-css-property-of-future/"/>
    <id>http://blog.kazu69.net/2016/09/14/using-at-rule-supports-development-with-css-property-of-future/</id>
    <published>2016-09-14T14:02:00.000Z</published>
    <updated>2016-09-16T14:58:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>css3で追加された機能クエリ<a href="https://www.w3.org/TR/css3-conditional/#at-supports" target="_blank" rel="external">@supports</a>を使うことで、将来のcssプロパティで実装しつつ、<br>一昔前のブラウザもサポートする感じで実装することができる。</p>
<a id="more"></a>
<h2 id="supports-とは"><a href="#supports-とは" class="headerlink" title="@supports とは"></a>@supports とは</h2><p>与えられた条件はユーザーエージェントのCSSでサポートされているかをネイティブメソッドを使ってテストするルール。<br>一部ブラウザでは2012あたりから対応されている機能。</p>
<p>Progressive Enhancement(プログレッシブ・エンハンスメント)といわれる開発思想において、<br>ブラウザごとにcssプロパティの実装状況が異なるため、開発時に<a href="https://modernizr.com/" target="_blank" rel="external">Modernizr</a>などを使ってサポート状況ごとにスタイルの分岐をするという手法はこれまでもあった。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.no-cssgradients</span> <span class="selector-class">.header</span> &#123;</div><div class="line">    <span class="comment">/* gradients サポートしてない時のスタイル */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.cssgradients</span> <span class="selector-class">.header</span> &#123;</div><div class="line">    <span class="comment">/* gradients サポートしている時のスタイル */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>これと同じことをネイティブのみでできるようなる感じなのが@supportsルール。<br>いわばネイティブなModernizrという感じになるだろうか。</p>
<p>ちなみにブラウザサポート状況は<a href="http://caniuse.com/#search=Feature%20Queries" target="_blank" rel="external">http://caniuse.com/#feat=css-featurequeries</a>の通り。IEは未サポートです。</p>
<h2 id="実装"><a href="#実装" class="headerlink" title="実装"></a>実装</h2><p>例として <strong>disokay: grid</strong> のサポートの有無で試してみる。<br>ちなみに <a href="https://www.w3.org/TR/css3-grid-layout/" target="_blank" rel="external">display: grid</a> はその名の通りグリッドレイアウトを行えるプロパティ。</p>
<p><a href="http://caniuse.com/#search=grid" target="_blank" rel="external">ブラウザのサポート状況</a> はIE edgeのみである。<br>IE以外で表示すするならば</p>
<table>
<thead>
<tr>
<th>browser</th>
<th>setting</th>
</tr>
</thead>
<tbody>
<tr>
<td>Chrome(Canary)</td>
<td>chrome://flags/#enable-experimental-web-platform-features を有効にする</td>
</tr>
<tr>
<td>Firefox</td>
<td>about:configからlayout.css.grid.enabled を有効にする</td>
</tr>
<tr>
<td>Opera</td>
<td>opera://flags/#enable-experimental-web-platform-features を有効にする</td>
</tr>
<tr>
<td>WebKit(Nightky build)</td>
<td>developのexternal featuresからcss grid を有効にする</td>
</tr>
</tbody>
</table>
<p>以下のコードを実行した時、display: grid のサポートしていれば<strong>背景色が#C00 </strong>のboxがグリッドレイアウトが表示されるはずである。</p>
<p></p><p data-height="265" data-theme-id="0" data-slug-hash="dpXrEA" data-default-tab="css,result" data-user="kazu69" data-embed-version="2" class="codepen">See the Pen <a href="http://codepen.io/kazu69/pen/dpXrEA/" target="_blank" rel="external">@supports example</a> by — (<a href="http://codepen.io/kazu69" target="_blank" rel="external">@kazu69</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<hr>
<p>実際に使うとしたら以下のような感じ。<br>IEが@supportsを未サポートなのでfallbackしてやる。<br>あとは@supportディレクティブでスタイルを書いておけば良さそう。</p>
<p>将来的には <strong>@support (true) </strong>な条件になると言う前提で書いておけば、<br>近い未来のcssプロパティに備ることができる。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* @supportsをサポートしないブラウザ向けのfallback */</span></div><div class="line"><span class="selector-class">.not-FUTURE-PROPERTIES</span> &#123;</div><div class="line">    <span class="comment">/* ... */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 未来のプロパティ未サポートの場合 */</span></div><div class="line"><span class="comment">/* 上記のfallbackとまとめられることもある */</span></div><div class="line">@<span class="keyword">supports</span> not (FUTURE-PROPERTIES) &#123;</div><div class="line">    <span class="comment">/* ... */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 未来のプロパティサポートの場合 */</span></div><div class="line">@<span class="keyword">supports</span> (FUTURE-PROPERTIES) &#123;</div><div class="line">    <span class="comment">/* ... */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="JavaScriptでの代替"><a href="#JavaScriptでの代替" class="headerlink" title="JavaScriptでの代替"></a>JavaScriptでの代替</h2><p>cssのサポートをJavaScriptで検知して何かするとしたら、<strong>CSS.supports()</strong>を使う。<br>今回のように display: grid の場合であるならば、ざっくりだけど</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> isGridSupport = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.CSS) &#123;</div><div class="line">        <span class="keyword">return</span> CSS.supports(<span class="string">'display'</span>, <span class="string">'grid'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(isGridSupport()) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Support display: grid'</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Not Support display: grid'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>という感じかな。</p>
<h3 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h3><p>まだまだModernizrの活躍にも期待しつつも、Web APIとしてCSS.supportsの実装が進んでるので、<br>@supportsを使って、近い将来のCSSプロパティに備える時期に来ているのではないだろうか。</p>
<h3 id="参考にしたページ"><a href="#参考にしたページ" class="headerlink" title="参考にしたページ"></a>参考にしたページ</h3><p><a href="https://www.w3.org/TR/css3-conditional/#at-supports" target="_blank" rel="external">Feature queries: the ‘@supports’ rule</a><br><a href="https://developer.mozilla.org/ja/docs/Web/CSS/@supports" target="_blank" rel="external">@supports</a><br><a href="https://www.w3.org/TR/css3-grid-layout/" target="_blank" rel="external">CSS Grid Layout Module Level 1</a><br><a href="https://igalia.github.io/css-grid-layout/enable.html" target="_blank" rel="external">Enable CSS Grid Layout</a><br><a href="https://developer.mozilla.org/ja/docs/Web/API/CSS/supports" target="_blank" rel="external">CSS.supports()</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;css3で追加された機能クエリ&lt;a href=&quot;https://www.w3.org/TR/css3-conditional/#at-supports&quot;&gt;@supports&lt;/a&gt;を使うことで、将来のcssプロパティで実装しつつ、&lt;br&gt;一昔前のブラウザもサポートする感じで実装することができる。&lt;/p&gt;
    
    </summary>
    
      <category term="css" scheme="http://blog.kazu69.net/categories/css/"/>
    
    
  </entry>
  
  <entry>
    <title>form-actionを使ったCSPのXSS攻撃手法を学んだ</title>
    <link href="http://blog.kazu69.net/2016/09/10/protect-bypass-form-action-reflected-xss/"/>
    <id>http://blog.kazu69.net/2016/09/10/protect-bypass-form-action-reflected-xss/</id>
    <published>2016-09-09T16:23:00.000Z</published>
    <updated>2016-09-16T14:52:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>XSS攻撃の検出と軽減手法として<a href="https://developer.mozilla.org/ja/docs/Web/Security/CSP" target="_blank" rel="external">CSP(Content Security Policy)</a>を設定することはよく取られている手法。<br>しかし、これは決して万全ではないということを改めて学んだ。</p>
<a id="more"></a>
<p>CSP(Content Security Policy)をでのXSSの事例を掲載している<a href="https://swehack.org/viewtopic.php?t=1504" target="_blank" rel="external">Bypassa CSP form-action och referrer</a>の記事が興味深かった。</p>
<p><a href="https://developer.mozilla.org/ja/docs/Web/Security/CSP/Using_Content_Security_Policy" target="_blank" rel="external">CSP(Content Security Policy)</a>とはMDNにある通り</p>
<blockquote>
<p>Content Security Policy の設定とは、Web ページに対する Content-Security-Policy HTTP ヘッダの付加、またそのページ上でユーザエージェントが読み込むリソースを制限する値の設定に他なりません。</p>
</blockquote>
<p>ということで指定したポリシーに基づきリソースの取扱うため、XSS Injectionなどの攻撃を軽減できる。</p>
<p>例えば form-action ディレクティブを設定することで許可する送信先を設定できる。</p>
<p>次のようにcspを設定をしている場合</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Content-Security-Policy:default-src &apos;self&apos;; form-action &apos;self&apos;; report-uri /csp-reports/</div></pre></td></tr></table></figure>
<p>外部スクリプトを実行しようとすると、実行されないでレポートが送られる。<br>また、form-action ディレクティブを追加してももちろん、許可サイト以外へのPOSTは拒否される。<br>(default-srcは基本全ディレクティブに対して設定される)</p>
<p>例えば、次のようなフォームの場合、送信先が許可されていないため送信できない。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">action</span>=<span class="string">"https://google.com/"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"csrftoken"</span> <span class="attr">value</span>=<span class="string">"randomcsrftoken"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"scubscribe"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>またレポート設定をしている場合は違反事象が報告される。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;csp-report&quot;=&gt;&#123;&quot;document-uri&quot;=&gt;&quot;http://localhost:4567/unsafe/&quot;, &quot;referrer&quot;=&gt;&quot;&quot;, &quot;violated-directive&quot;=&gt;&quot;form-action &apos;self&apos;&quot;, &quot;effective-directive&quot;=&gt;&quot;form-action&quot;, &quot;original-policy&quot;=&gt;&quot;default-src &apos;self&apos;; form-action &apos;self&apos;; report-uri /csp-reports/&quot;, &quot;blocked-uri&quot;=&gt;&quot;http://google.com&quot;, &quot;status-code&quot;=&gt;200&#125;&#125;</div></pre></td></tr></table></figure>
<p>次のようにformタグがinjectionされた場合</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">”https://google.com/</span>"&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">action</span>=<span class="string">"/subscribe/"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"csrftoken"</span> <span class="attr">value</span>=<span class="string">"randomcsrftoken"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"scubscribe"</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>このフォームがPOSTされるとフォームの内容がすべてGETされURLパラメータに渡される。<br>もちろんCSPのレポートにも報告される。</p>
<p>このパラメーター付きのGETリクエストがリファラーに送られるとtokenなども任意のサイトに送ることが可能になる。<br>例えばフォームタグの出現前になにかしらの入力値を出力する箇所があり、そこからhtmlが注入できた場合、<br>(例としてはありえないけどGETで渡された値をそのまま出力している場合)</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/?xss=%3Cinput%20value%3D%22Click%20Me%22%20type%3D%22submit%22%20formaction%3D%22%22%20form%3D%22subscribe%22%20formmethod%3D%22get%22%20%2F%3E%3Cinput%20type%3D%22hidden%22%20value%3D%22%3Cmeta%20name%3D%27referrer%27%20content%3D%27always%27%3E%22%3E"</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上記のようなリンクを踏ませて、任意のsubmitボタンをページに注入する。<br>その場合のコードは以下のようになる。<br>(わかりやすくするために適宜改行を入れている)</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">"Click Me"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">formaction</span>=<span class="string">""</span> <span class="attr">form</span>=<span class="string">"subscribe"</span> <span class="attr">formmethod</span>=<span class="string">"get"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">value</span>=<span class="string">"&lt;meta name='referrer' content='always'&gt;"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/subscribe/"</span> <span class="attr">id</span>=<span class="string">"subscribe"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"csrftoken"</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">value</span>=<span class="string">"randomcsrftoken"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"scubscribe"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>inputタグにはhtml5から追加された<a href="https://www.w3.org/TR/html5/forms.html#attr-fae-form" target="_blank" rel="external">form属性</a>、<a href="https://www.w3.org/TR/html5/forms.html#attr-fs-formaction" target="_blank" rel="external">formaction属性</a>、<a href="https://www.w3.org/TR/html5/forms.html#attr-fs-formmethod" target="_blank" rel="external">formmethod属性</a>を使ってformをpostできるようにする。<br>また、リファラを送るようにメタタグを追加しているのがキモらしい。</p>
<p>このボタンを押すことで、フォームの内容がリファラを通して任意のサイトに送られる。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Referer:http://YOURSITE.COM/?xss=%3Cinput%20value%3D%22Click%20Me%22%20type%3D%22submit%22%20formaction%3D%22%22%20form%3D%22subscribe%22%20formmethod%3D%22get%22%20%2F%3E%3Cinput%20type%3D%22hidden%22%20value%3D%22%3Cmeta%20name%3D%27referrer%27%20content%3D%27always%27%3E%22%3E</div></pre></td></tr></table></figure>
<p>この手法はCSPでのレポートは報告されない。<br>攻撃手法がReflected XSS(反射型XSS)ということで、<a href="https://www.w3.org/TR/2012/WD-CSP11-20121213/#relationship-to-x-xss-protection" target="_blank" rel="external">X-XSS-Protection</a>を有効にしているとinjectionされたinputボタンは有効化しない。</p>
<p>CSPである程度のXSSは軽減できると思っていたが、それなりに攻撃手法もあるものですね。<br>header周りのセキュリティも合わせて行うことが必要ということが身にしみる感じになる。</p>
<p>ちなみにGitHubはこのあたりのことから、formタグの前にコメントを入れて少しでも軽減できるようにしているみたいです。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- &lt;/textarea&gt; --&gt;</span><span class="comment">&lt;!-- '"` --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">accept-charset</span>=<span class="string">"UTF-8"</span> <span class="attr">action</span>=<span class="string">"/kazu69/XXX/search"</span> <span class="attr">class</span>=<span class="string">"js-site-search-form"</span> <span class="attr">data-scoped-search-url</span>=<span class="string">"/kazu69/page-data-cli/search"</span> <span class="attr">data-unscoped-search-url</span>=<span class="string">"/search"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>今回はSinatraで試しました。<a href="https://gist.github.com/kazu69/c0262196c49f4a8fdf3f7e9f3889ca41" target="_blank" rel="external">ソースはこちらにあります</a>。</p>
<h3 id="参考にしたページ"><a href="#参考にしたページ" class="headerlink" title="参考にしたページ"></a>参考にしたページ</h3><p><a href="https://swehack.org/viewtopic.php?t=1504" target="_blank" rel="external">Bypassa CSP form-action och referrer</a><br><a href="https://labs.detectify.com/2016/04/04/csp-bypassing-form-action-with-reflected-xss/" target="_blank" rel="external">CSP: bypassing form-action with reflected XSS</a><br><a href="https://chloe.re/2016/07/19/protect-against-html-extraction/" target="_blank" rel="external">Protect against HTML-extraction</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;XSS攻撃の検出と軽減手法として&lt;a href=&quot;https://developer.mozilla.org/ja/docs/Web/Security/CSP&quot;&gt;CSP(Content Security Policy)&lt;/a&gt;を設定することはよく取られている手法。&lt;br&gt;しかし、これは決して万全ではないということを改めて学んだ。&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="http://blog.kazu69.net/categories/web/"/>
    
    
  </entry>
  
  <entry>
    <title>target=&quot;_blank&quot;を使った脆弱性Tabnabbingとその対策</title>
    <link href="http://blog.kazu69.net/2016/08/23/target-blank-vulnerability-tabnabbing-and-countermeasures/"/>
    <id>http://blog.kazu69.net/2016/08/23/target-blank-vulnerability-tabnabbing-and-countermeasures/</id>
    <published>2016-08-23T13:00:13.000Z</published>
    <updated>2016-09-11T07:43:55.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mathiasbynens.github.io/rel-noopener/" target="_blank" rel="external">About rel=noopener</a>の記事を見て、フィッシング詐欺の手法Tabnabbing(タブナビング)について、<br>以前にそれっぽい記事読んだけど、すっかり忘れていた。</p>
<p>改めて見直してみて、その内容と対策がまとまっていたのでおさらい。</p>
<a id="more"></a>
<h2 id="Tabnabbing-タブナビング-の仕組み"><a href="#Tabnabbing-タブナビング-の仕組み" class="headerlink" title="Tabnabbing(タブナビング)の仕組み"></a>Tabnabbing(タブナビング)の仕組み</h2><p>Tabnabbing の仕組みは以下となる。<br>まず、新規のタブを開くようなアンカータグ</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://example.com"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>example.com<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<p>またはjavascript</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.open()</div></pre></td></tr></table></figure>
<p>が存在してるページが存在している。</p>
<p>このようなhtmlの記述やjavascriptがある場合に攻撃の対象となりうる。<br>というのも、上記のリンクで開かれたページ内から以下のようにwindow.openerを操作できるからである。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.opener.location = <span class="string">'http://phishing.example.com'</span>;</div></pre></td></tr></table></figure>
<p>上記のスクリプトが実行されると、元のタブページをフィッシングサイトなどへの誘導が可能となる。<br>ユーザーはこの挙動に気がつくにはリンクが開かれる度に</p>
<ul>
<li>tabの変更を注視する(ローディングされているとか、fav.iconが変わっているとか)</li>
<li>ブラウザの履歴を調べる</li>
<li>セッションなどを使っている際にはログアウトしたりすることをきにする</li>
<li>urlや証明書の情報が異なることをチェックする</li>
</ul>
<p>多くの場合は、一般的に気をつけていないと分かりにくい。</p>
<h2 id="対策"><a href="#対策" class="headerlink" title="対策"></a>対策</h2><p>ブラウザごとにtarget=”_blank”でタブを開く際の操作と影響を受けるブラウザのリストは以下のようになる。</p>
<table>
<thead>
<tr>
<th>ブラウザ</th>
<th>クリック</th>
<th>Shift+クリック</th>
<th>Ctr+クリック</th>
</tr>
</thead>
<tbody>
<tr>
<td>Chrome 40</td>
<td>x</td>
<td>x</td>
<td>x</td>
</tr>
<tr>
<td>Firefox 34</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Opera 26</td>
<td>x</td>
<td>x</td>
<td>x</td>
</tr>
<tr>
<td>Safari 7,8</td>
<td>x</td>
<td></td>
<td></td>
</tr>
<tr>
<td>IE 6 - 11</td>
<td>△</td>
<td>△</td>
<td>△</td>
</tr>
</tbody>
</table>
<p>(<a href="https://github.com/danielstjules/blankshield" target="_blank" rel="external">blankshield</a> より引用)</p>
<p>Internet Explore(IE)はユーザーのセキュリティゾーンの設定次第ではその影響を受けることになる。</p>
<h3 id="target-”-blank”を使う場合"><a href="#target-”-blank”を使う場合" class="headerlink" title="target=”_blank”を使う場合"></a>target=”_blank”を使う場合</h3><p>開発者としてtarget=”_blank”を使う場合は、<a href="https://html.spec.whatwg.org/multipage/semantics.html#link-type-noopener" target="_blank" rel="external">rel=”noopener”</a>を使い、新たに開いたタブから元のタブのlocationを変更できないようする必要がある。</p>
<p>しかし、noopenerは現在のところ<a href="http://caniuse.com/#feat=rel-noopener" target="_blank" rel="external">ブラウザのサポート状況</a>によっては使用できない。(Firefoxなど)</p>
<p>そのため、併せて<a href="https://html.spec.whatwg.org/multipage/semantics.html#link-type-noreferrer" target="_blank" rel="external">rel=”noreferrer”</a>を追加することで新たに開いたタブでのwindow.openerはnullとなりTabnabbingは回避できる。<br>(ただしnoreferrerはリファラを送らないので、その辺も考慮して実装する必要はありそう。)</p>
<p>最終的には以下のようになるとよい。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://example.com"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">rel</span>=<span class="string">"noopener noreferrer"</span>&gt;</span>example.com<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<p>ちなみに、rel=”noreferrer” を使うことはパフォーマンス的にも利点がある。<br>通常のtarget=”_blank”で開いた場合は、同プロセス(スレッド)で処理が行われるため元のタブのパフォーマンスが低下する。<br>Chromiumブラウザにおいて、noreferrerの場合は新しいプロセスでタブを開くため、元のタブのパフォーマンスが低下することはない。</p>
<h3 id="windw-open-を使う場合"><a href="#windw-open-を使う場合" class="headerlink" title="windw.open()を使う場合"></a>windw.open()を使う場合</h3><p>windwo.open()で開く場合は、クリックイベントでデフォルトのクリックイベントをキャンセルする。<br>その後、非表示iframe内でwindowを開き、その結果を返すことでwindow.openerをnullにできる。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span>github.com<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> targets = <span class="built_in">document</span>.querySelectorAll(<span class="string">'a[target=_blank]'</span>);</div><div class="line">    <span class="keyword">var</span> openWindow = <span class="function"><span class="keyword">function</span>(<span class="params">url</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> iframe, iframeDoc, script;</div><div class="line">        iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</div><div class="line">        iframe.style.display = <span class="string">'none'</span>;</div><div class="line">        <span class="built_in">document</span>.body.appendChild(iframe);</div><div class="line"></div><div class="line">        iframeDoc = iframe.contentDocument || iframe.contentWindow.document;</div><div class="line"></div><div class="line">        script = iframeDoc.createElement(<span class="string">'script'</span>);</div><div class="line">        script.text = <span class="string">'window.parent = null; window.top = null; window.frameElement = null; var child = window.open("'</span> + url + <span class="string">'"); child.opener = null'</span>;</div><div class="line"></div><div class="line">        iframeDoc.body.appendChild(script);</div><div class="line">        newWin = iframe.contentWindow.child;</div><div class="line"></div><div class="line">        <span class="built_in">document</span>.body.removeChild(iframe);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> newWin;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; targets.length; i++) &#123;</div><div class="line">        targets[i].addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> url = event.target.getAttribute(<span class="string">'href'</span>);</div><div class="line">            <span class="comment">// window.openを置き換える</span></div><div class="line">            <span class="comment">// window.open(url);</span></div><div class="line">            openWindow(url);</div><div class="line">            event.preventDefault();</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上記の2つの対策は<a href="https://github.com/danielstjules/blankshield" target="_blank" rel="external">blankshield</a>を利用することで実現できる。</p>
<h3 id="試してみる"><a href="#試してみる" class="headerlink" title="試してみる"></a>試してみる</h3><p>ということで、上記の対策を実現する<a href="/images/2016/08/23/sample.html">TabnabbingのDEMO</a>を作成した</p>
<h3 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h3><p>ログインなどの機能を有するページにおいて、target=”_blank” を使うことでフィッシング攻撃の手段を提供することにもなる。<br>リンク先のドキュメントは完全に操作はできないため、開発者はtarget=”_blank”を用いるべきかの正しい判断、その取扱いと適切な処理を知っておく必要がある。</p>
<p>UXの観点から、target=”_blank”を使わないというのも一つの手段としては考えられる。</p>
<h3 id="参考にしたページ"><a href="#参考にしたページ" class="headerlink" title="参考にしたページ"></a>参考にしたページ</h3><p><a href="https://mathiasbynens.github.io/rel-noopener/" target="_blank" rel="external">About rel=noopener</a><br><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1094449" target="_blank" rel="external">Bugzilla#1094449</a><br><a href="https://github.com/danielstjules/blankshield" target="_blank" rel="external">blankshield</a><br><a href="https://jakearchibald.com/2016/performance-benefits-of-rel-noopener/" target="_blank" rel="external">The performance benefits of rel=noopener</a><br><a href="https://sites.google.com/site/bughunteruniversity/nonvuln/phishing-with-window-opener" target="_blank" rel="external">Phishing by navigating browser tabs</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://mathiasbynens.github.io/rel-noopener/&quot;&gt;About rel=noopener&lt;/a&gt;の記事を見て、フィッシング詐欺の手法Tabnabbing(タブナビング)について、&lt;br&gt;以前にそれっぽい記事読んだけど、すっかり忘れていた。&lt;/p&gt;
&lt;p&gt;改めて見直してみて、その内容と対策がまとまっていたのでおさらい。&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="http://blog.kazu69.net/categories/web/"/>
    
    
  </entry>
  
  <entry>
    <title>docker swarm mode を試してみる</title>
    <link href="http://blog.kazu69.net/2016/08/09/try-docker-swarm-mode/"/>
    <id>http://blog.kazu69.net/2016/08/09/try-docker-swarm-mode/</id>
    <published>2016-08-09T09:17:13.000Z</published>
    <updated>2016-08-18T04:45:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>docker engine 1.12から標準で搭載されたswarm modeを試してみる。<br>swarm(群れ)という意味で、クラスタリング構成機構のこと。<br>swarm modeはdocker engine v1.12.0-rc1で統合された機能である。</p>
<a id="more"></a>
<p>swarm modeではクラスタをアプリケーション単位での管理し、<br>複数ホスト間で共有されるネットワークを持っているので、<br>外部のネットワークからのトラフィックをロード・バランシングできるという。</p>
<p>ということで、<a href="tps://pocketstudio.net/2016/06/23/docker-1-12-swarm-mode-and-ingress-load-balancing/" target="_blank" rel="external">チュートリアル</a>に沿って一通り眺める。</p>
<h2 id="nodeの作成"><a href="#nodeの作成" class="headerlink" title="nodeの作成"></a>nodeの作成</h2><table>
<thead>
<tr>
<th>node</th>
<th>role</th>
</tr>
</thead>
<tbody>
<tr>
<td>manager</td>
<td>master</td>
</tr>
<tr>
<td>worker1</td>
<td>worker</td>
</tr>
<tr>
<td>worker2</td>
<td>worker</td>
</tr>
</tbody>
</table>
<p>各ホストでdocker engine(dockerデーモン)を起動させる。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">docker-machine create <span class="_">-d</span> virtualbox manager</div><div class="line">docker-machine create <span class="_">-d</span> virtualbox worker1</div><div class="line">docker-machine create <span class="_">-d</span> virtualbox worker2</div><div class="line"></div><div class="line">NAME      ACTIVE   DRIVER       STATE     URL                         SWARM   DOCKER    ERRORS</div><div class="line">manager   *        virtualbox   Running   tcp://192.168.99.100:2376           v1.12.0</div><div class="line">worker1   -        virtualbox   Running   tcp://192.168.99.101:2376           v1.12.0</div><div class="line">worker2   -        virtualbox   Running   tcp://192.168.99.102:2376           v1.12.0</div><div class="line">docker-machine ip manager</div><div class="line">192.168.99.100</div></pre></td></tr></table></figure>
<h2 id="クラスタを初期化"><a href="#クラスタを初期化" class="headerlink" title="クラスタを初期化"></a>クラスタを初期化</h2><p>swarm initで、クラスタを初期化すると、tokenが発行される。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker@manager</span></div><div class="line"></div><div class="line">docker swarm init --advertise-addr 192.168.99.100</div><div class="line">Swarm initialized: current node (5golpgkwh376tmddgzqcqzjpl) is now a manager.</div><div class="line"></div><div class="line">To add a worker to this swarm, run the following <span class="built_in">command</span>:</div><div class="line">    docker swarm join \</div><div class="line">    --token SWMTKN-1-0vbcihcfezog02z78j4cpmbptt5d917mcm71w0dbbxol0k8pgb-emc5tzyg4ri30i2uqrqlyi6yq \</div><div class="line">    192.168.99.100:2377</div><div class="line"></div><div class="line">To add a manager to this swarm, run the following <span class="built_in">command</span>:</div><div class="line">    docker swarm join \</div><div class="line">    --token SWMTKN-1-0vbcihcfezog02z78j4cpmbptt5d917mcm71w0dbbxol0k8pgb-dm8ugwds89z972yhngfgmv74l \</div><div class="line">    192.168.99.100:2377</div></pre></td></tr></table></figure>
<p>docker infoでswarmの現在の状況を確認してみる。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker@manager</span></div><div class="line"></div><div class="line">docker info</div><div class="line">Containers: 0</div><div class="line"> Running: 0</div><div class="line"> Paused: 0</div><div class="line"> Stopped: 0</div><div class="line">Images: 0</div><div class="line">Server Version: 1.12.0</div><div class="line">Storage Driver: aufs</div><div class="line"> Root Dir: /mnt/sda1/var/lib/docker/aufs</div><div class="line"> Backing Filesystem: extfs</div><div class="line"> Dirs: 0</div><div class="line"> Dirperm1 Supported: <span class="literal">true</span></div><div class="line">Logging Driver: json-file</div><div class="line">Cgroup Driver: cgroupfs</div><div class="line">Plugins:</div><div class="line"> Volume: <span class="built_in">local</span></div><div class="line"> Network: host bridge overlay null</div><div class="line">Swarm: active</div><div class="line"> NodeID: 5golpgkwh376tmddgzqcqzjpl</div><div class="line"> Is Manager: <span class="literal">true</span></div><div class="line"> ClusterID: 7lpo0u0u57yryce83q22ne3ot</div><div class="line"> Managers: 1</div><div class="line"> Nodes:</div><div class="line"> ...</div><div class="line"> ...</div><div class="line"></div><div class="line">docker node ls</div><div class="line">ID                           HOSTNAME  STATUS  AVAILABILITY  MANAGER STATUS</div><div class="line">5golpgkwh376tmddgzqcqzjpl *  manager   Ready   Active        Leader</div></pre></td></tr></table></figure>
<h2 id="クラスタに追加"><a href="#クラスタに追加" class="headerlink" title="クラスタに追加"></a>クラスタに追加</h2><p>workder1, worker2をswarmクラスタにworkerとして追加する。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker@worker1</span></div><div class="line"></div><div class="line">docker swarm join --token SWMTKN-1-0vbcihcfezog02z78j4cpmbptt5d917mcm71w0dbbxol0k8pgb-emc5tzyg4ri30i2uqrqlyi6yq 192.168.99.100:2377</div><div class="line">This node joined a swarm as a worker.</div></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker@worker2</span></div><div class="line"></div><div class="line">docker swarm join --token SWMTKN-1-0vbcihcfezog02z78j4cpmbptt5d917mcm71w0dbbxol0k8pgb-emc5tzyg4ri30i2uqrqlyi6yq 192.168.99.100:2377</div><div class="line">This node joined a swarm as a worker.</div></pre></td></tr></table></figure>
<p>追加したnodeがswarmクラスタに追加されいることを確認する。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker@manager</span></div><div class="line"></div><div class="line">docker node ls</div><div class="line">ID                           HOSTNAME  STATUS  AVAILABILITY  MANAGER STATUS</div><div class="line">0mfxd3hhndyd7i4uncbiprek4    worker2   Ready   Active</div><div class="line">5golpgkwh376tmddgzqcqzjpl *  manager   Ready   Active        Leader</div><div class="line">cwdb1t7e3o9rstaiudaxswzu9    worker1   Ready   Active</div></pre></td></tr></table></figure>
<h2 id="ingressネットワークの作成"><a href="#ingressネットワークの作成" class="headerlink" title="ingressネットワークの作成"></a>ingressネットワークの作成</h2><p>ingressネットワーク(ingress)を作成し、ロードバランスする。<br>複数ホスト間のコンテナで外部からのリクエストをルーティングし、ロードバランシングできるようになる。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker@manager</span></div><div class="line"></div><div class="line">docker network create <span class="_">-d</span> overlay testnetwork</div><div class="line">0s19bsmqf8wcblaur5ryb8biq</div></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker@manager</span></div><div class="line"></div><div class="line">docker network ls</div><div class="line">NETWORK ID          NAME                DRIVER              SCOPE</div><div class="line">a2fab6cccfde        bridge              bridge              <span class="built_in">local</span></div><div class="line">3b4e201a5b10        docker_gwbridge     bridge              <span class="built_in">local</span></div><div class="line">cc20b3e97d14        host                host                <span class="built_in">local</span></div><div class="line">6uoqnkw5ei76        ingress             overlay             swarm</div><div class="line">83f4a43f1315        none                null                <span class="built_in">local</span></div><div class="line">0s19bsmqf8wc        testnetwork         overlay             swarm</div><div class="line"></div><div class="line">docker network inspect testnetwork</div><div class="line">[</div><div class="line">    &#123;</div><div class="line">        <span class="string">"Name"</span>: <span class="string">"testnetwork"</span>,</div><div class="line">        <span class="string">"Id"</span>: <span class="string">"0s19bsmqf8wcblaur5ryb8biq"</span>,</div><div class="line">        <span class="string">"Scope"</span>: <span class="string">"swarm"</span>,</div><div class="line">        <span class="string">"Driver"</span>: <span class="string">"overlay"</span>,</div><div class="line">        <span class="string">"EnableIPv6"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"IPAM"</span>: &#123;</div><div class="line">            <span class="string">"Driver"</span>: <span class="string">"default"</span>,</div><div class="line">            <span class="string">"Options"</span>: null,</div><div class="line">            <span class="string">"Config"</span>: []</div><div class="line">        &#125;,</div><div class="line">        <span class="string">"Internal"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"Containers"</span>: null,</div><div class="line">        <span class="string">"Options"</span>: &#123;</div><div class="line">            <span class="string">"com.docker.network.driver.overlay.vxlanid_list"</span>: <span class="string">"257"</span></div><div class="line">        &#125;,</div><div class="line">        <span class="string">"Labels"</span>: null</div><div class="line">    &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<p>もうちょっとingressネットワークを見てみる。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker@manager</span></div><div class="line"></div><div class="line">docker network inspect 6uoqnkw5ei76</div><div class="line">[</div><div class="line">    &#123;</div><div class="line">        <span class="string">"Name"</span>: <span class="string">"ingress"</span>,</div><div class="line">        <span class="string">"Id"</span>: <span class="string">"6uoqnkw5ei76chns289v0oaei"</span>,</div><div class="line">        <span class="string">"Scope"</span>: <span class="string">"swarm"</span>,</div><div class="line">        <span class="string">"Driver"</span>: <span class="string">"overlay"</span>,</div><div class="line">        <span class="string">"EnableIPv6"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"IPAM"</span>: &#123;</div><div class="line">            <span class="string">"Driver"</span>: <span class="string">"default"</span>,</div><div class="line">            <span class="string">"Options"</span>: null,</div><div class="line">            <span class="string">"Config"</span>: [</div><div class="line">                &#123;</div><div class="line">                    <span class="string">"Subnet"</span>: <span class="string">"10.255.0.0/16"</span>,</div><div class="line">                    <span class="string">"Gateway"</span>: <span class="string">"10.255.0.1"</span></div><div class="line">                &#125;</div><div class="line">            ]</div><div class="line">        &#125;,</div><div class="line">        <span class="string">"Internal"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"Containers"</span>: &#123;</div><div class="line">            <span class="string">"745c0806c4f7082995dd1cb8d04dca6becc6dbe820aad717fcefb34811387d57"</span>: &#123;</div><div class="line">                <span class="string">"Name"</span>: <span class="string">"nginx.1.5nhg56y2vohlevb6p4a1xuwjq"</span>,</div><div class="line">                <span class="string">"EndpointID"</span>: <span class="string">"f33f63c27b2d75fa7272e57fb193e291dab588a6f7fc51f0e508b7caf8bb36b2"</span>,</div><div class="line">                <span class="string">"MacAddress"</span>: <span class="string">"02:42:0a:ff:00:05"</span>,</div><div class="line">                <span class="string">"IPv4Address"</span>: <span class="string">"10.255.0.5/16"</span>,</div><div class="line">                <span class="string">"IPv6Address"</span>: <span class="string">""</span></div><div class="line">            &#125;,</div><div class="line">            <span class="string">"8b4cd33138e9c9262b31a70ba0103535c6a3828b45f3dc6eb9a5ee5c07c07e29"</span>: &#123;</div><div class="line">                <span class="string">"Name"</span>: <span class="string">"nginx.2.8uu9u366fqpda3vm69dzdfr1z"</span>,</div><div class="line">                <span class="string">"EndpointID"</span>: <span class="string">"e73c1b17fe8a5ee98081a33d70abada0852cadd553912504713795059080dd07"</span>,</div><div class="line">                <span class="string">"MacAddress"</span>: <span class="string">"02:42:0a:ff:00:06"</span>,</div><div class="line">                <span class="string">"IPv4Address"</span>: <span class="string">"10.255.0.6/16"</span>,</div><div class="line">                <span class="string">"IPv6Address"</span>: <span class="string">""</span></div><div class="line">            &#125;,</div><div class="line">            <span class="string">"8b4cd33138e9c9262b31a70ba0103535c6a3828b45f3dc6eb9a5ee5c07c07e29"</span>: &#123;</div><div class="line">                <span class="string">"Name"</span>: <span class="string">"nginx.2.41to6h36vp1i31qad79iiz2qf"</span>,</div><div class="line">                <span class="string">"EndpointID"</span>: <span class="string">"745c0806c4f75ee98081a33d70g930s0852cadd55391204713798b4cd33138e9"</span>,</div><div class="line">                <span class="string">"MacAddress"</span>: <span class="string">"02:42:0a:ff:00:06"</span>,</div><div class="line">                <span class="string">"IPv4Address"</span>: <span class="string">"10.255.0.7/16"</span>,</div><div class="line">                <span class="string">"IPv6Address"</span>: <span class="string">""</span></div><div class="line">            &#125;,</div><div class="line">            <span class="string">"ingress-sbox"</span>: &#123;</div><div class="line">                <span class="string">"Name"</span>: <span class="string">"ingress-endpoint"</span>,</div><div class="line">                <span class="string">"EndpointID"</span>: <span class="string">"7e9a378dcfeed25805bd7ea78e411df39b06aa9ad347bb6ff0b3fe86f09d44bb"</span>,</div><div class="line">                <span class="string">"MacAddress"</span>: <span class="string">"02:42:0a:ff:00:03"</span>,</div><div class="line">                <span class="string">"IPv4Address"</span>: <span class="string">"10.255.0.3/16"</span>,</div><div class="line">                <span class="string">"IPv6Address"</span>: <span class="string">""</span></div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="string">"Options"</span>: &#123;</div><div class="line">            <span class="string">"com.docker.network.driver.overlay.vxlanid_list"</span>: <span class="string">"256"</span></div><div class="line">        &#125;,</div><div class="line">        <span class="string">"Labels"</span>: &#123;&#125;</div><div class="line">    &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<p>ingress-sbox というコンテナがある。</p>
<p>workerのiptablesを確認</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker@worker1</span></div><div class="line"></div><div class="line">sudo iptables-save | grep INGRESS</div><div class="line">:DOCKER-INGRESS - [0:0]</div><div class="line">-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER-INGRESS</div><div class="line">-A OUTPUT -m addrtype --dst-type LOCAL -j DOCKER-INGRESS</div><div class="line">-A DOCKER-INGRESS -p tcp -m tcp --dport 80 -j DNAT --to-destination 172.18.0.2:80</div><div class="line">-A DOCKER-INGRESS -j RETURN</div></pre></td></tr></table></figure>
<p>DNATの設定がある。80ポートで受けたリクエストを 172.18.0.2:80 に転送している。<br>この172.18.0.2がingressネットワーク。しかし、172.18.0.2はdockerのコンテナとしてはリストアップされない。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker@worker1</span></div><div class="line"></div><div class="line">ip addr</div><div class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1</div><div class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</div><div class="line">    inet 127.0.0.1/8 scope host lo</div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line">    inet6 ::1/128 scope host</div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line">2: dummy0: &lt;BROADCAST,NOARP&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000</div><div class="line">    link/ether ca:f2:56:e6:fe:34 brd ff:ff:ff:ff:ff:ff</div><div class="line">3: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</div><div class="line">    link/ether 08:00:27:25:2e:6a brd ff:ff:ff:ff:ff:ff</div><div class="line">    inet 10.0.2.15/24 brd 10.0.2.255 scope global eth0</div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line">    inet6 fe80::a00:27ff:fe25:2e6a/64 scope link</div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line">4: eth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</div><div class="line">    link/ether 08:00:27:87:c3:c8 brd ff:ff:ff:ff:ff:ff</div><div class="line">    inet 192.168.99.104/24 brd 192.168.99.255 scope global eth1</div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line">    inet6 fe80::a00:27ff:fe87:c3c8/64 scope link</div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line">6: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default</div><div class="line">    link/ether 02:42:00:44:03:63 brd ff:ff:ff:ff:ff:ff</div><div class="line">    inet 172.17.0.1/16 scope global docker0</div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line">11: docker_gwbridge: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</div><div class="line">    link/ether 02:42:60:28:a7:82 brd ff:ff:ff:ff:ff:ff</div><div class="line">    inet 172.18.0.1/16 scope global docker_gwbridge</div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line">    inet6 fe80::42:60ff:fe28:a782/64 scope link</div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line">13: vethff5efce@<span class="keyword">if</span>12: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker_gwbridge state UP group default</div><div class="line">    link/ether 32:4b:45:f2:fa:8c brd ff:ff:ff:ff:ff:ff</div><div class="line">    inet6 fe80::304b:45ff:fef2:fa8c/64 scope link</div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line">18: vethabbd231@<span class="keyword">if</span>17: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker_gwbridge state UP group default</div><div class="line">    link/ether f6:c9:ed:48:b7:29 brd ff:ff:ff:ff:ff:ff</div><div class="line">    inet6 fe80::f4c9:edff:fe48:b729/64 scope link</div><div class="line">       valid_lft forever preferred_lft forever</div></pre></td></tr></table></figure>
<p>ルーティングもみてみる</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker@worker1</span></div><div class="line"></div><div class="line">ip route</div><div class="line">default via 10.0.2.2 dev eth0  metric 1</div><div class="line">10.0.2.0/24 dev eth0  proto kernel  scope link  src 10.0.2.15</div><div class="line">127.0.0.1 dev lo  scope link</div><div class="line">172.17.0.0/16 dev docker0  proto kernel  scope link  src 172.17.0.1</div><div class="line">172.18.0.0/16 dev docker_gwbridge  proto kernel  scope link  src 172.18.0.1</div><div class="line">192.168.99.0/24 dev eth1  proto kernel  scope link  src 192.168.99.104</div></pre></td></tr></table></figure>
<p>どうやらdocker_gwbridgeのもののようだ。managerでも同様にdocker_gwbridgeなるものがあることから、<br>docker_gwbridgeは作成したネットワークに属するnodeすべてに共通で利用されている。<br>ということで、外部からのアクセスにはdocker_gwbridgeを使用している。</p>
<p>ということで、コンテナ間でも通信できるはず。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker@worker1</span></div><div class="line"></div><div class="line">ping -c 4 192.168.99.100</div><div class="line">PING 192.168.99.100 (192.168.99.100): 56 data bytes</div><div class="line">64 bytes from 192.168.99.100: seq=0 ttl=64 time=0.459 ms</div><div class="line">64 bytes from 192.168.99.100: seq=1 ttl=64 time=0.357 ms</div><div class="line">64 bytes from 192.168.99.100: seq=2 ttl=64 time=0.439 ms</div><div class="line">64 bytes from 192.168.99.100: seq=3 ttl=64 time=0.374 ms</div><div class="line"></div><div class="line">--- 192.168.99.100 ping statistics ---</div><div class="line">4 packets transmitted, 4 packets received, 0% packet loss</div><div class="line">round-trip min/avg/max = 0.357/0.407/0.459 ms</div></pre></td></tr></table></figure>
<h2 id="サービス作成"><a href="#サービス作成" class="headerlink" title="サービス作成"></a>サービス作成</h2><p>swarm modeでコンテナを起動するためのserviceを作成する。作成されたnodeをタスクという。<br>–replicasフラグでtask数を指定して作成する。<br>今回はnginxのサービスを作成する。</p>
<p>nginx というサービスを作成し、testnetworkでswarmのポート80をコンテナのポート80に割り当て。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker@manager</span></div><div class="line"></div><div class="line">docker service create --name nginx --replicas 3 --network testnetwork -p 80:80/tcp nginx</div><div class="line">cz4kot5ft0hz8v9euubq75ja2</div></pre></td></tr></table></figure>
<p>作成されたサービスの確認</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker@manager</span></div><div class="line"></div><div class="line">docker service ls</div><div class="line">ID            NAME   REPLICAS  IMAGE  COMMAND</div><div class="line">cz4kot5ft0hz  nginx  0/3       nginx</div><div class="line"></div><div class="line"><span class="comment"># --pretty で見やすく表示</span></div><div class="line">docker service inspect --pretty nginx</div><div class="line">ID:     cz4kot5ft0hz8v9euubq75ja2</div><div class="line">Name:       nginx</div><div class="line">Mode:       Replicated</div><div class="line"> Replicas:  3</div><div class="line">Placement:</div><div class="line">UpdateConfig:</div><div class="line"> Parallelism:   1</div><div class="line"> On failure:    pause</div><div class="line">ContainerSpec:</div><div class="line"> Image:     nginx</div><div class="line">Resources:</div><div class="line">Networks: 0s19bsmqf8wcblaur5ryb8biqPorts:</div><div class="line"> Protocol = tcp</div><div class="line"> TargetPort = 80</div><div class="line"> PublishedPort = 80</div><div class="line"></div><div class="line"><span class="comment"># nginxのイメージ取得中でpreparingになっている</span></div><div class="line">docker service ps nginx</div><div class="line">ID                         NAME     IMAGE  NODE     DESIRED STATE  CURRENT STATE                 ERROR</div><div class="line">5nhg56y2vohlevb6p4a1xuwjq  nginx.1  nginx  worker2  Running        Running 3 seconds ago</div><div class="line">8uu9u366fqpda3vm69dzdfr1z  nginx.2  nginx  worker1  Running        Preparing about a minute ago</div><div class="line">41to6h36vp1i31qad79iiz2qf  nginx.3  nginx  manager  Running        Preparing about a minute ago</div><div class="line"></div><div class="line"><span class="comment"># 再度実行する</span></div><div class="line">docker service ps nginx</div><div class="line">ID                         NAME     IMAGE  NODE     DESIRED STATE  CURRENT STATE          ERROR</div><div class="line">5nhg56y2vohlevb6p4a1xuwjq  nginx.1  nginx  worker2  Running        Running 2 minutes ago</div><div class="line">8uu9u366fqpda3vm69dzdfr1z  nginx.2  nginx  worker1  Running        Running 2 minutes ago</div><div class="line">41to6h36vp1i31qad79iiz2qf  nginx.3  nginx  manager  Running        Running 2 minutes ago</div></pre></td></tr></table></figure>
<p>curl を実行して起動していることを確認</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">curl http://192.168.99.100</div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</div><div class="line">&lt;style&gt;</div><div class="line">    body &#123;</div><div class="line">        width: 35em;</div><div class="line">        margin: 0 auto;</div><div class="line">        font-family: Tahoma, Verdana, Arial, sans-serif;</div><div class="line">    &#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</div><div class="line">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</div><div class="line">working. Further configuration is required.&lt;/p&gt;</div><div class="line"></div><div class="line">&lt;p&gt;For online documentation and support please refer to</div><div class="line">&lt;a href=<span class="string">"http://nginx.org/"</span>&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</div><div class="line">Commercial support is available at</div><div class="line">&lt;a href=<span class="string">"http://nginx.com/"</span>&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</div><div class="line"></div><div class="line">&lt;p&gt;&lt;em&gt;Thank you <span class="keyword">for</span> using nginx.&lt;/em&gt;&lt;/p&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h2 id="サービスのスケールアップ・スケールダウン"><a href="#サービスのスケールアップ・スケールダウン" class="headerlink" title="サービスのスケールアップ・スケールダウン"></a>サービスのスケールアップ・スケールダウン</h2><p>スケールアップしてみる。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker@manager</span></div><div class="line"></div><div class="line">docker service scale nginx=4</div><div class="line">nginx scaled to 4</div><div class="line"></div><div class="line">docker service ps nginx</div><div class="line">ID                         NAME     IMAGE  NODE     DESIRED STATE  CURRENT STATE          ERROR</div><div class="line">5nhg56y2vohlevb6p4a1xuwjq  nginx.1  nginx  worker2  Running        Running 6 minutes ago</div><div class="line">8uu9u366fqpda3vm69dzdfr1z  nginx.2  nginx  worker1  Running        Running 6 minutes ago</div><div class="line">41to6h36vp1i31qad79iiz2qf  nginx.3  nginx  manager  Running        Running 6 minutes ago</div><div class="line">bn0kohl7ecfcmwoeksy6cowdf  nginx.4  nginx  worker1  Running        Running 4 seconds ago</div></pre></td></tr></table></figure>
<p>タスクが4個あることがわかる。<br>続いてスケールダウンする。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker@manager</span></div><div class="line"></div><div class="line">docker service scale nginx=3</div><div class="line">nginx scaled to 3</div><div class="line"></div><div class="line">docker service ps nginx</div><div class="line">ID                         NAME     IMAGE  NODE     DESIRED STATE  CURRENT STATE                    ERROR</div><div class="line">5nhg56y2vohlevb6p4a1xuwjq  nginx.1  nginx  worker2  Running        Running 7 minutes ago</div><div class="line">8uu9u366fqpda3vm69dzdfr1z  nginx.2  nginx  worker1  Running        Running 7 minutes ago</div><div class="line">41to6h36vp1i31qad79iiz2qf  nginx.3  nginx  manager  Running        Running 7 minutes ago</div><div class="line">bn0kohl7ecfcmwoeksy6cowdf  nginx.4  nginx  worker1  Shutdown       Shutdown less than a second ago</div><div class="line"></div><div class="line">docker service ps nginx</div><div class="line">ID                         NAME     IMAGE  NODE     DESIRED STATE  CURRENT STATE           ERROR</div><div class="line">5nhg56y2vohlevb6p4a1xuwjq  nginx.1  nginx  worker2  Running        Running 7 minutes ago</div><div class="line">8uu9u366fqpda3vm69dzdfr1z  nginx.2  nginx  worker1  Running        Running 7 minutes ago</div><div class="line">41to6h36vp1i31qad79iiz2qf  nginx.3  nginx  manager  Running        Running 7 minutes ago</div><div class="line">bn0kohl7ecfcmwoeksy6cowdf  nginx.4  nginx  worker1  Shutdown       Shutdown 3 seconds ago</div></pre></td></tr></table></figure>
<p>タスクが3つに戻った。</p>
<h2 id="自動復旧"><a href="#自動復旧" class="headerlink" title="自動復旧"></a>自動復旧</h2><p>worker2のコンテナをstopして、タスクが自動で復旧することを確認する。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker@worker2</span></div><div class="line"></div><div class="line">docker ps</div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</div><div class="line">55ce84f00f26        nginx:latest        <span class="string">"nginx -g 'daemon off"</span>   49 seconds ago      Up 48 seconds       80/tcp, 443/tcp     nginx.1.160s9norhjlicvlvrpymar0yz</div><div class="line"></div><div class="line">docker stop 55ce84f00f26</div><div class="line">55ce84f00f26</div><div class="line"></div><div class="line">docker ps</div><div class="line">CONTAINER ID        IMAGE</div></pre></td></tr></table></figure>
<p>stopしたこと確認した。しばらくすると自動でコンテナが起動</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker@worker2</span></div><div class="line"></div><div class="line">docker ps</div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</div><div class="line">6c3d900cb9fe        nginx:latest        <span class="string">"nginx -g 'daemon off"</span>   21 seconds ago      Up 19 seconds       80/tcp, 443/tcp     nginx.1.adgxpo8s9ki82sz3rel26g9cb</div></pre></td></tr></table></figure>
<p>タスクは3つになっている。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker@manager</span></div><div class="line"></div><div class="line">docker service ps nginx</div><div class="line">ID                         NAME         IMAGE  NODE     DESIRED STATE  CURRENT STATE               ERROR</div><div class="line">adgxpo8s9ki82sz3rel26g9cb  nginx.1      nginx  worker2  Running        Running 45 seconds ago</div><div class="line">160s9norhjlicvlvrpymar0yz   \_ nginx.1  nginx  worker2  Shutdown       Complete 51 seconds ago</div><div class="line">ci5qqrgppuxvqub8bos8j3dhg  nginx.2      nginx  worker1  Running        Running about a minute ago</div><div class="line">bngsjgp2o4tdvczrc623wk7x2  nginx.3      nginx  manager  Running        Running 19 seconds ago</div></pre></td></tr></table></figure>
<h2 id="ローリング・アップデート"><a href="#ローリング・アップデート" class="headerlink" title="ローリング・アップデート"></a>ローリング・アップデート</h2><p>実行中のイメージを差し替えたり、アップデートする際に使う。<br>起動中のコンテナの停止、イメージの取得し起動までを自動で行う。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># --update-delay イメージ更新までの遅延時間</span></div><div class="line"><span class="comment"># --update-parallelism 同時に更新するtaskの最大数</span></div><div class="line">docker service update --update-delay 10s --update-parallelism 1 --image nginx:latest nginx</div><div class="line">nginx</div><div class="line"></div><div class="line">docker service ls</div><div class="line">ID            NAME   REPLICAS  IMAGE         COMMAND</div><div class="line">4cut0umrm3a3  nginx  2/3       nginx:latest</div><div class="line"></div><div class="line">docker service ps nginx</div><div class="line">ID                         NAME         IMAGE         NODE     DESIRED STATE  CURRENT STATE            ERROR</div><div class="line">dzyijvwet9pjz8ac9m65ye4id  nginx.1      nginx:latest  worker2  Running        Running 28 seconds ago</div><div class="line">adgxpo8s9ki82sz3rel26g9cb   \_ nginx.1  nginx         worker2  Shutdown       Shutdown 31 seconds ago</div><div class="line">160s9norhjlicvlvrpymar0yz   \_ nginx.1  nginx         worker2  Shutdown       Complete 9 minutes ago</div><div class="line">bgsr4e1yd8c0q9nyl0wylp3ky  nginx.2      nginx:latest  worker2  Running        Preparing 2 seconds ago</div><div class="line">ci5qqrgppuxvqub8bos8j3dhg   \_ nginx.2  nginx         worker1  Shutdown       Shutdown 2 seconds ago</div><div class="line">9tt8df7zjj65tgp9l6yx4engd  nginx.3      nginx:latest  manager  Running        Running 13 seconds ago</div><div class="line">bngsjgp2o4tdvczrc623wk7x2   \_ nginx.3  nginx         manager  Shutdown       Shutdown 16 seconds ago</div></pre></td></tr></table></figure>
<h2 id="drain-解放"><a href="#drain-解放" class="headerlink" title="drain(解放)"></a>drain(解放)</h2><p>メンテナンスなどでnodeを個別に切り離す必要があるときなどに、一時的にクラスタから解放する。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">docker node inspect --pretty worker1</div><div class="line">ID:         cwdb1t7e3o9rstaiudaxswzu9</div><div class="line">Hostname:       worker1</div><div class="line">Status:</div><div class="line"> State:         Ready</div><div class="line"> Availability:      Active</div><div class="line">Platform:</div><div class="line"> Operating System:  linux</div><div class="line"> Architecture:      x86_64</div><div class="line">Resources:</div><div class="line"> CPUs:          1</div><div class="line"> Memory:        995.9 MiB</div><div class="line">Plugins:</div><div class="line">  Network:      bridge, host, null, overlay</div><div class="line">  Volume:       <span class="built_in">local</span></div><div class="line">Engine Version:     1.12.0</div><div class="line">Engine Labels:</div><div class="line"> - provider = virtualbox%</div><div class="line"></div><div class="line">docker node update --availability drain worker1</div><div class="line">worker1</div><div class="line"></div><div class="line">docker node inspect --pretty worker1</div><div class="line">ID:         cwdb1t7e3o9rstaiudaxswzu9</div><div class="line">Hostname:       worker1</div><div class="line">Status:</div><div class="line"> State:         Ready</div><div class="line"> Availability:      Drain</div><div class="line">Platform:</div><div class="line"> Operating System:  linux</div><div class="line"> Architecture:      x86_64</div><div class="line">Resources:</div><div class="line"> CPUs:          1</div><div class="line"> Memory:        995.9 MiB</div><div class="line">Plugins:</div><div class="line">  Network:      bridge, host, null, overlay</div><div class="line">  Volume:       <span class="built_in">local</span></div><div class="line">Engine Version:     1.12.0</div><div class="line">Engine Labels:</div><div class="line"> - provider = virtualbox%</div><div class="line"></div><div class="line">docker service ps nginx</div><div class="line">ID                         NAME         IMAGE         NODE     DESIRED STATE  CURRENT STATE            ERROR</div><div class="line">4h2qkchax4m34z1pxi61nlnnh  nginx.1      nginx         manager  Running        Running 6 minutes ago</div><div class="line">dzyijvwet9pjz8ac9m65ye4id   \_ nginx.1  nginx:latest  worker2  Shutdown       Shutdown 6 minutes ago</div><div class="line">adgxpo8s9ki82sz3rel26g9cb   \_ nginx.1  nginx         worker2  Shutdown       Shutdown 31 seconds ago</div><div class="line">160s9norhjlicvlvrpymar0yz   \_ nginx.1  nginx         worker2  Shutdown       Complete 9 minutes ago</div><div class="line">bgsr4e1yd8c0q9nyl0wylp3ky  nginx.2      nginx:latest  worker2  Running        Preparing 2 seconds ago</div><div class="line">ci5qqrgppuxvqub8bos8j3dhg   \_ nginx.2  nginx         worker1  Shutdown       Shutdown 2 seconds ago</div><div class="line">9tt8df7zjj65tgp9l6yx4engd  nginx.3      nginx:latest  manager  Running        Running 13 seconds ago</div><div class="line">bngsjgp2o4tdvczrc623wk7x2   \_ nginx.3  nginx         manager  Shutdown       Shutdown 16 seconds ago</div></pre></td></tr></table></figure>
<p>worker1がdrainされてmanagerがnginx.1タスクを作成している。<br>この状態でdrainしたnodeをアクティブに戻す。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">docker node update --availability active worker1</div><div class="line">worker1</div><div class="line"></div><div class="line">docker node inspect --pretty worker1</div><div class="line">ID:         cwdb1t7e3o9rstaiudaxswzu9</div><div class="line">Hostname:       worker1</div><div class="line">Status:</div><div class="line"> State:         Ready</div><div class="line"> Availability:      Active</div><div class="line">Platform:</div><div class="line"> Operating System:  linux</div><div class="line"> Architecture:      x86_64</div><div class="line">Resources:</div><div class="line"> CPUs:          1</div><div class="line"> Memory:        995.9 MiB</div><div class="line">Plugins:</div><div class="line">  Network:      bridge, host, null, overlay</div><div class="line">  Volume:       <span class="built_in">local</span></div><div class="line">Engine Version:     1.12.0</div><div class="line">Engine Labels:</div><div class="line"> - provider = virtualbox%</div></pre></td></tr></table></figure>
<p>worker1が利用できる状態で待機している。<br>クラスタに追加されている。</p>
<h2 id="サービスの削除とnodeの削除"><a href="#サービスの削除とnodeの削除" class="headerlink" title="サービスの削除とnodeの削除"></a>サービスの削除とnodeの削除</h2><p>サービスの削除。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">docker service  ls</div><div class="line">ID            NAME   REPLICAS  IMAGE  COMMAND</div><div class="line">cz4kot5ft0hz  nginx  3/3       nginx</div><div class="line"></div><div class="line">docker service rm nginx</div><div class="line">nginx</div><div class="line"></div><div class="line">docker service ls</div><div class="line">ID  NAME  REPLICAS  IMAGE  COMMAND</div></pre></td></tr></table></figure>
<p>nodeをswarmから解放する。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker@worker1</span></div><div class="line"></div><div class="line">docker swarm leave</div><div class="line">Node left the swarm.</div></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker@worker2</span></div><div class="line"></div><div class="line">docker swarm leave</div><div class="line">Node left the swarm.</div></pre></td></tr></table></figure>
<p>各workerがswarmから解放された。</p>
<p>最後にmanagerをswarmから解放する。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker@manager</span></div><div class="line"></div><div class="line">docker swarm leave --force</div><div class="line">Node left the swarm.</div></pre></td></tr></table></figure>
<h3 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h3><p>思った以上にクラスタを容易に作成できた。<br>swarm modeはマルチホストネットワーク機能(docker_gwbridge)をつかって、<br>アプリケーションを動かすということだと再確認できた。</p>
<h3 id="参考にしたページ"><a href="#参考にしたページ" class="headerlink" title="参考にしたページ"></a>参考にしたページ</h3><p><a href="https://pocketstudio.net/2016/06/23/docker-1-12-swarm-mode-and-ingress-load-balancing/" target="_blank" rel="external">https://pocketstudio.net/2016/06/23/docker-1-12-swarm-mode-and-ingress-load-balancing/</a><br><a href="https://docs.docker.com/engine/userguide/networking/get-started-overlay/" target="_blank" rel="external">https://docs.docker.com/engine/userguide/networking/get-started-overlay/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;docker engine 1.12から標準で搭載されたswarm modeを試してみる。&lt;br&gt;swarm(群れ)という意味で、クラスタリング構成機構のこと。&lt;br&gt;swarm modeはdocker engine v1.12.0-rc1で統合された機能である。&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="http://blog.kazu69.net/categories/web/"/>
    
    
  </entry>
  
  <entry>
    <title>JWT(JSON Web Token)を使った認証を試みる</title>
    <link href="http://blog.kazu69.net/2016/07/30/authenticate_with_json_web_token/"/>
    <id>http://blog.kazu69.net/2016/07/30/authenticate_with_json_web_token/</id>
    <published>2016-07-30T09:17:13.000Z</published>
    <updated>2016-08-06T02:51:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>Oauth2やOpenID Connectなどすでに導入されているJWT(JSON Web Token)。<br>今後IoTとかを考えると認証手法としては結構有効な認証方法だということで、改めて眺めてみた。</p>
<a id="more"></a>
<h2 id="JSON-Web-Token"><a href="#JSON-Web-Token" class="headerlink" title="JSON Web Token"></a>JSON Web Token</h2><p>JSON Web Token(JWT) jot(ジョット)と発音する。<br>JSONを電子署名したurl-safe(URLで使用できない文字が含まれる)なclaimのことを指す。<a href="https://tools.ietf.org/html/rfc7519" target="_blank" rel="external">rfc7519</a><br>また同じような言葉もあるので一旦整理する。</p>
<ul>
<li>JWS は署名したもの</li>
<li>JWE はEncryptしたもの</li>
</ul>
<p>一般的にJWTというとJWSのことをいう。</p>
<p>電子署名(公開鍵+秘密鍵方式)をしているため、データの読み出し、書き込みができる。<br>しかし、その内容の改竄はチェックできる。<br>JSONの内容を秘匿化するわけではないので、内容は誰でも見ることはできるという点は注意が必要。</p>
<p><a href="https://jwt.io/" target="_blank" rel="external">jwt.io</a>というサービスを使うことでdebugすることができるので、試してみると見ての通り、PAYLOADの内容は見ることができる。</p>
<p>JWTの形式は</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[ HEADER ] . [ PAYLOAD ] . [ SIGNATURE ]</div></pre></td></tr></table></figure>
<p>という形で構成され、HEADERとPAYLOADはbase64エンコードされている。</p>
<hr>
<p>使い方として、認証時にトークンを発行し、必要に応じて検証することで認証済みとして扱うようにするとか。<br>同じことはSessionを使うことでもできるが、sessionを使う場合との違いは、サーバーが状態(state)を持たないでいいので、<br>token発行ホストと認証ホストが異なっていても問題ない。(まさにステートレス)<br>JWTを使うと、CSRFの攻撃を考えなくて良くなる。</p>
<p>また、JWTは</p>
<ul>
<li>Base64エンコーダー・デコーダー</li>
<li>jsonパーサー</li>
<li>署名検証機能</li>
</ul>
<p>上記のがあれば利用できるため、汎用性が高い。</p>
<p>デバイスによってはjsonを保持しておけば、認証できるという意味ではIoTとかを考慮すると重宝する。<br>クライアント側で永続化はメモリキャッシュでも、DBでもブラウザのLocalStrageも良い。<br>認証が必要な時に、tokenをポストするかhttpヘッダーで送る形となる。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Authorization: bearer &lt;token&gt;</div></pre></td></tr></table></figure>
<h2 id="JSON-Web-Token-の中身"><a href="#JSON-Web-Token-の中身" class="headerlink" title="JSON Web Token の中身"></a>JSON Web Token の中身</h2><h3 id="HEADER"><a href="#HEADER" class="headerlink" title="HEADER"></a>HEADER</h3><p>タイプとハッシュアルゴリズムを保持しており、これをBase64している</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"alg"</span>: <span class="string">"HS256"</span>,</div><div class="line">  <span class="attr">"typ"</span>: <span class="string">"JWT"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>HMAC SHA-256のJWTを表す。これはBase64で</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Base64.encode64(<span class="string">'&#123;"alg": "HS256", "typ": "JWT"&#125;'</span>)</div><div class="line"><span class="comment"># =&gt; eyJhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXVCJ9</span></div></pre></td></tr></table></figure>
<p>となる。</p>
<h3 id="PAYLOAD"><a href="#PAYLOAD" class="headerlink" title="PAYLOAD"></a>PAYLOAD</h3><p>JWTクレーム。トークンの本体となる部分で、幾つかのクレーム名はあらかじめ予約されている。<br>詳細は<a href="https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-19#section-4" target="_blank" rel="external">RFCを参照</a><br>クレーム名はJWT作成者側で自由に作成も出来る。</p>
<p>例えば以下のようなクレーム</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"sub"</span>: <span class="string">"1234567890"</span>,</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"John Doe"</span>,</div><div class="line">  <span class="attr">"admin"</span>: <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>こちらもBase64で</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Base64.encode64(<span class="string">'&#123;"sub":"1234567890","name":"John Doe","admin":true&#125;'</span>)</div><div class="line"><span class="comment"># =&gt; eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9</span></div></pre></td></tr></table></figure>
<h3 id="SIGNATURE"><a href="#SIGNATURE" class="headerlink" title="SIGNATURE"></a>SIGNATURE</h3><p>最終パートはSIGNATURE。HEADERとPAYLOADをSecretKeyで署名。</p>
<p>SecretKeyをsecretとすると、ここまでの結果から署名は</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</div></pre></td></tr></table></figure>
<p>となる。</p>
<p>最終的な結果としてJWTは</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">eyJhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</div></pre></td></tr></table></figure>
<p>このtokenを使って認証を行うことなる。</p>
<h3 id="アプリケーションで試してみた"><a href="#アプリケーションで試してみた" class="headerlink" title="アプリケーションで試してみた"></a>アプリケーションで試してみた</h3><p>Expressをつかって簡単なサーバーでJWT認証を試してみる。</p>
<p><a href="https://github.com/kazu69/jwt-express-example" target="_blank" rel="external">jwt-express-example</a> というExpress + MySQLなアプリケーションを作成して試してみる。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># dockerコンテナを起動して</span></div><div class="line"><span class="comment"># 任意のパスワードでユーザー作成</span></div><div class="line">$ curl -X POST http://127.0.0.1:3000/user <span class="_">-d</span> <span class="string">'name=testuser'</span> <span class="_">-d</span> <span class="string">'password=secretpassword'</span></div><div class="line">&#123;<span class="string">"id"</span>:2,<span class="string">"name"</span>:<span class="string">"testuser"</span>,<span class="string">"password"</span>:<span class="string">"secretpassword"</span>,<span class="string">"updated_at"</span>:<span class="string">"2016-08-03T14:02:08.000Z"</span>,<span class="string">"created_at"</span>:<span class="string">"2016-08-03T14:02:08.000Z"</span>&#125;</div><div class="line"></div><div class="line"><span class="comment"># ユーザー認証をパスワードで行う</span></div><div class="line">$ curl -X POST http://127.0.0.1:3000/authentication <span class="_">-d</span> <span class="string">'name=testuser'</span> <span class="_">-d</span> <span class="string">'password=secretpassword'</span></div><div class="line">&#123;<span class="string">"token"</span>:<span class="string">"CREATED-JSON-WEB-TOKEN"</span>,<span class="string">"message"</span>:<span class="string">"Authentication successfully finished."</span>&#125;%</div><div class="line"></div><div class="line"><span class="comment"># 別のホストでログインする</span></div><div class="line">$ curl -X POST http://127.0.0.1:8000/login <span class="_">-d</span> <span class="string">'access_token=CREATED-JSON-WEB-TOKEN"'</span></div><div class="line">&#123;<span class="string">"id"</span>:2,<span class="string">"name"</span>:<span class="string">"testuser"</span>&#125;</div></pre></td></tr></table></figure>
<p>という感じになる。</p>
<h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>ウェブサービスでの認証は複数のドメイン間で行われることが多い。そのため、クロスドメインを考える必要があり、<br>複雑化していくことなる。JWTのような機構を使うことで、サービス提供側はtokenを認証するということだに注力できるため、<br>仕様もシンプルにできる。<br>IoTなデバイスが増える中で、JWTな事案は今後もっと増えてくるんだろうなぁ。</p>
<h3 id="参考にしたページ"><a href="#参考にしたページ" class="headerlink" title="参考にしたページ"></a>参考にしたページ</h3><ul>
<li><a href="https://github.com/dwyl/learn-json-web-tokens" target="_blank" rel="external">dwyl/learn-json-web-tokens</a></li>
<li><a href="https://float-middle.com/json-web-tokens-jwt-vs-sessions/" target="_blank" rel="external">JSON Web Tokens (JWT) vs Sessions</a></li>
<li><a href="https://jwt.io/" target="_blank" rel="external">jwt.io</a></li>
<li><a href="http://hiyosi.tumblr.com/post/70073770678/jwt%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E7%B0%A1%E5%8D%98%E3%81%AB%E3%81%BE%E3%81%A8%E3%82%81%E3%81%A6%E3%81%BF%E3%81%9F" target="_blank" rel="external">JWTについて簡単にまとめてみた</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Oauth2やOpenID Connectなどすでに導入されているJWT(JSON Web Token)。&lt;br&gt;今後IoTとかを考えると認証手法としては結構有効な認証方法だということで、改めて眺めてみた。&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="http://blog.kazu69.net/categories/web/"/>
    
    
  </entry>
  
  <entry>
    <title>seccompプロファイルを使ってdockerのシステムコールを制御</title>
    <link href="http://blog.kazu69.net/2016/06/27/control_system_callof_docker_using_secomp/"/>
    <id>http://blog.kazu69.net/2016/06/27/control_system_callof_docker_using_secomp/</id>
    <published>2016-06-27T13:14:24.000Z</published>
    <updated>2016-06-27T23:26:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>Dockerコンテナでアプリケーションのプロセスをdebugするためにstraceをすると<br>Operation not permittedで怒られた。</p>
<a id="more"></a>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">strace <span class="_">-f</span> -p 1</div><div class="line">strace: attach: ptrace(PTRACE_ATTACH, ...): Operation not permitted</div></pre></td></tr></table></figure>
<p>エラー内容から調べてみると、どうやらセキュリティ的にコンテナ内のシステムコールへのアクセスが制限されていると思われる。<br>dockerのリポジトリのdocumentを見ると<a href="https://github.com/docker/docker/blob/master/docs/security/seccomp.md" target="_blank" rel="external">Seccomp security profiles for Docker</a>という項目がある。<br>どうやら<a href="https://github.com/docker/docker/pull/17989" target="_blank" rel="external">このPR(#17989)</a>で追加されてるようだ。</p>
<p>seccompを設定しているprofileがあるようで、これを変更することでシステムコールを制御できるようす。</p>
<h2 id="seccomp"><a href="#seccomp" class="headerlink" title="seccomp"></a>seccomp</h2><p>そもそもseccomp(secure computing mode)はプロセスのexit, sigreturn, read, writeを行うシステムコールを制御する。<br>また、seccomp-bpf(seccomp mode filter)は、システムコールのフィルタにBPFを実装しており、<br>システムコールの番号と引数をフィルタリングすることでより柔軟に扱うことができる。</p>
<p>というもの。</p>
<h2 id="docker-seccomp-profile"><a href="#docker-seccomp-profile" class="headerlink" title="docker seccomp profile"></a>docker seccomp profile</h2><p>dockerではseccompの設定は<a href="https://github.com/docker/docker/blob/master/profiles/seccomp/default.json" target="_blank" rel="external">このようなdefault.json</a>で定義されている。<br>適当なシステムコールプロファイルをjsonで作成し、–security-optオプションで実行してみる。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">docker version</div><div class="line">Client:</div><div class="line"> Version:      1.11.0</div><div class="line"> API version:  1.23</div><div class="line"> Go version:   go1.5.4</div><div class="line"> Git commit:   4dc5990</div><div class="line"> Built:        Wed Apr 13 18:13:28 2016</div><div class="line"> OS/Arch:      darwin/amd64</div><div class="line"></div><div class="line">Server:</div><div class="line"> Version:      1.11.0</div><div class="line"> API version:  1.23</div><div class="line"> Go version:   go1.5.4</div><div class="line"> Git commit:   4dc5990</div><div class="line"> Built:        Wed Apr 13 19:36:04 2016</div><div class="line"> OS/Arch:      linux/amd64</div><div class="line"></div><div class="line">cat seccomp.json | jq .</div><div class="line">&#123;</div><div class="line">  <span class="string">"defaultAction"</span>: <span class="string">"SCMP_ACT_ALLOW"</span>,</div><div class="line">  <span class="string">"syscalls"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="string">"name"</span>: <span class="string">"mkdir"</span>,</div><div class="line">      <span class="string">"action"</span>: <span class="string">"SCMP_ACT_ERRNO"</span>,</div><div class="line">      <span class="string">"args"</span>: []</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div><div class="line"></div><div class="line">docker run -it --security-opt seccomp:seccomp.json alpine sh</div><div class="line">/ <span class="comment"># mkdir -p tmp/test</span></div><div class="line">mkdir: can<span class="string">'t create directory '</span>tmp/<span class="string">': Operation not permitted</span></div><div class="line">/ # apk update</div><div class="line">fetch http://dl-cdn.alpinelinux.org/alpine/v3.4/main/x86_64/APKINDEX.tar.gz</div><div class="line">fetch http://dl-cdn.alpinelinux.org/alpine/v3.4/community/x86_64/APKINDEX.tar.gz</div><div class="line">v3.4.0-84-g5967d51 [http://dl-cdn.alpinelinux.org/alpine/v3.4/main]</div><div class="line">v3.4.0-75-g8d1dc52 [http://dl-cdn.alpinelinux.org/alpine/v3.4/community]</div><div class="line">OK: 5958 distinct packages available</div><div class="line">/ # apk add strace</div><div class="line">(1/1) Installing strace (4.11-r2)</div><div class="line">Executing busybox-1.24.2-r9.trigger</div><div class="line">OK: 6 MiB in 12 packages</div><div class="line">/ # ls</div><div class="line">bin      dev      etc      home     lib      linuxrc  media    mnt      proc     root     run      sbin     srv      sys      tmp      usr      var</div><div class="line">/ # strace ls home</div><div class="line">execve("/bin/ls", ["ls", "home"], [/* 6 vars */]) = 0</div><div class="line">arch_prctl(ARCH_SET_FS, 0x7f2a390e3c28) = 0</div><div class="line">set_tid_address(0x7f2a390e3c60)         = 14</div><div class="line">mprotect(0x7f2a390e0000, 4096, PROT_READ) = 0</div><div class="line">mprotect(0x55ab364b6000, 16384, PROT_READ) = 0</div><div class="line">getuid()                                = 0</div><div class="line">ioctl(0, TIOCGWINSZ, &#123;ws_row=45, ws_col=181, ws_xpixel=0, ws_ypixel=0&#125;) = 0</div><div class="line">ioctl(1, TIOCGWINSZ, &#123;ws_row=45, ws_col=181, ws_xpixel=0, ws_ypixel=0&#125;) = 0</div><div class="line">ioctl(1, TIOCGWINSZ, &#123;ws_row=45, ws_col=181, ws_xpixel=0, ws_ypixel=0&#125;) = 0</div><div class="line">stat("home", &#123;st_mode=S_IFDIR|0755, st_size=4096, ...&#125;) = 0</div><div class="line">open("home", O_RDONLY|O_DIRECTORY|O_CLOEXEC) = 3</div><div class="line">fcntl(3, F_SETFD, FD_CLOEXEC)           = 0</div><div class="line">getdents64(3, /* 2 entries */, 2048)    = 48</div><div class="line">getdents64(3, /* 0 entries */, 2048)    = 0</div><div class="line">close(3)                                = 0</div><div class="line">exit_group(0)                           = ?</div><div class="line">+++ exited with 0 +++</div></pre></td></tr></table></figure>
<p>SCMP_ACT_ALLOW は許可。SCMP_ACT_ERRNOは拒否となるので、<br>SCMP_ACT_ALLOW でフィルターに一致しない場合は許可。<br>mkdirを呼び出すとSCMP_ACT_ERRNOでエラーが返る。</p>
<p>mkdir以外は許可されているのでstraceも問題ない。</p>
<p>また、デフォルトのseccomp profileなしで使うなら–security-optオプションにunconfinedを渡してあげると良い。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">docker run -it --security-opt seccomp=unconfined alpine sh</div><div class="line">/ <span class="comment"># apk update</span></div><div class="line">fetch http://dl-cdn.alpinelinux.org/alpine/v3.4/main/x86_64/APKINDEX.tar.gz</div><div class="line">fetch http://dl-cdn.alpinelinux.org/alpine/v3.4/community/x86_64/APKINDEX.tar.gz</div><div class="line">v3.4.0-84-g5967d51 [http://dl-cdn.alpinelinux.org/alpine/v3.4/main]</div><div class="line">v3.4.0-75-g8d1dc52 [http://dl-cdn.alpinelinux.org/alpine/v3.4/community]</div><div class="line">OK: 5958 distinct packages available</div><div class="line">/ <span class="comment"># apk add strace</span></div><div class="line">(1/1) Installing strace (4.11-r2)</div><div class="line">Executing busybox-1.24.2-r9.trigger</div><div class="line">OK: 6 MiB <span class="keyword">in</span> 12 packages</div><div class="line">/ <span class="comment"># ls</span></div><div class="line">bin      dev      etc      home     lib      linuxrc  media    mnt      proc     root     run      sbin     srv      sys      tmp      usr      var</div><div class="line">/ <span class="comment"># strace ls home</span></div><div class="line">execve(<span class="string">"/bin/ls"</span>, [<span class="string">"ls"</span>, <span class="string">"home"</span>], [/* 6 vars */]) = 0</div><div class="line">arch_prctl(ARCH_SET_FS, 0x7feb31d3ec28) = 0</div><div class="line">set_tid_address(0x7feb31d3ec60)         = 14</div><div class="line">mprotect(0x7feb31d3b000, 4096, PROT_READ) = 0</div><div class="line">mprotect(0x559a8af6c000, 16384, PROT_READ) = 0</div><div class="line">getuid()                                = 0</div><div class="line">ioctl(0, TIOCGWINSZ, &#123;ws_row=45, ws_col=181, ws_xpixel=0, ws_ypixel=0&#125;) = 0</div><div class="line">ioctl(1, TIOCGWINSZ, &#123;ws_row=45, ws_col=181, ws_xpixel=0, ws_ypixel=0&#125;) = 0</div><div class="line">ioctl(1, TIOCGWINSZ, &#123;ws_row=45, ws_col=181, ws_xpixel=0, ws_ypixel=0&#125;) = 0</div><div class="line"><span class="built_in">stat</span>(<span class="string">"home"</span>, &#123;st_mode=S_IFDIR|0755, st_size=4096, ...&#125;) = 0</div><div class="line">open(<span class="string">"home"</span>, O_RDONLY|O_DIRECTORY|O_CLOEXEC) = 3</div><div class="line">fcntl(3, F_SETFD, FD_CLOEXEC)           = 0</div><div class="line">getdents64(3, /* 2 entries */, 2048)    = 48</div><div class="line">getdents64(3, /* 0 entries */, 2048)    = 0</div><div class="line">close(3)                                = 0</div><div class="line">exit_group(0)                           = ?</div><div class="line">+++ exited with 0 +++</div></pre></td></tr></table></figure>
<p>ちなみに v1.11だとLinux kernel が 4.3の場合、–pids-limitオプションで<a href="https://github.com/docker/docker/pull/18697" target="_blank" rel="external">リソース制限もできる</a>ようになってるみたい。</p>
<h2 id="参考にしたページ"><a href="#参考にしたページ" class="headerlink" title="参考にしたページ"></a>参考にしたページ</h2><p><a href="https://github.com/docker/docker/blob/master/docs/security/seccomp.md" target="_blank" rel="external">Seccomp security profiles for Docker</a><br><a href="https://blog.docker.com/2016/02/docker-engine-1-10-security/" target="_blank" rel="external">DOCKER ENGINE 1.10 SECURITY IMPROVEMENTS</a><br><a href="https://github.com/docker/docker/pull/17989" target="_blank" rel="external">Phase 1: Initial seccomp support</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Dockerコンテナでアプリケーションのプロセスをdebugするためにstraceをすると&lt;br&gt;Operation not permittedで怒られた。&lt;/p&gt;
    
    </summary>
    
      <category term="tec" scheme="http://blog.kazu69.net/categories/tec/"/>
    
    
  </entry>
  
  <entry>
    <title>ネットワークのアーミーナイフnetcatを使ってみる</title>
    <link href="http://blog.kazu69.net/2016/06/19/using_army_knife_netcat_of_network/"/>
    <id>http://blog.kazu69.net/2016/06/19/using_army_knife_netcat_of_network/</id>
    <published>2016-06-19T11:26:02.000Z</published>
    <updated>2016-06-27T16:38:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>サーバーの死活確認やモックレスポンスが欲しい時など、手元で簡単に実現出来るnetcatコマンド。<br>ソフトウェア開発しているときに活用できそうな機能をまとめてみた。<br>netcatはunixだけでなくwindowsでも使える。</p>
<a id="more"></a>
<p><a href="https://ja.wikipedia.org/wiki/Netcat" target="_blank" rel="external">wikipedia</a>には以下のようにある。</p>
<blockquote>
<p>TCPやUDPを扱う万能ツールとして知られ、しばしばネットワークのスイスアーミーナイフ、<br>TCP/IPのアーミーナイフ、ハッカーのアーミーナイフなどのように評される。</p>
</blockquote>
<p>ということで、簡単に普段の開発で使いそうなことを試してみる。</p>
<h2 id="httpリクエスト"><a href="#httpリクエスト" class="headerlink" title="httpリクエスト"></a>httpリクエスト</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">'GET / HTTP/1.1\n\n'</span> | nc google.com 80</div><div class="line">HTTP/1.1 302 Found</div><div class="line">Cache-Control: private</div><div class="line">Content-Type: text/html; charset=UTF-8</div><div class="line">Location: http://www.google.co.jp/?gfe_rd=cr&amp;ei=5clkV-DkHbLK8geW87zIAw</div><div class="line">Content-Length: 261</div><div class="line">Date: Sat, 18 Jun 2016 04:11:17 GMT</div><div class="line"></div><div class="line">&lt;HTML&gt;&lt;HEAD&gt;&lt;meta http-equiv=<span class="string">"content-type"</span> content=<span class="string">"text/html;charset=utf-8"</span>&gt;</div><div class="line">&lt;TITLE&gt;302 Moved&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;</div><div class="line">&lt;H1&gt;302 Moved&lt;/H1&gt;</div><div class="line">The document has moved</div><div class="line">&lt;A HREF=<span class="string">"http://www.google.co.jp/?gfe_rd=cr&amp;amp;ei=5clkV-DkHbLK8geW87zIAw"</span>&gt;here&lt;/A&gt;.</div><div class="line">&lt;/BODY&gt;&lt;/HTML&gt;</div></pre></td></tr></table></figure>
<h2 id="簡易サーバー"><a href="#簡易サーバー" class="headerlink" title="簡易サーバー"></a>簡易サーバー</h2><p>単純なレスポンスを返すだけのサーバーならnetcatを使うことで実現出来る。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span> ( <span class="built_in">echo</span> <span class="string">"HTTP/1.0 200 OK;\nHello World"</span> ) | nc <span class="_">-l</span> 8080; [ $? != 0 ] &amp;&amp; <span class="built_in">break</span>; <span class="keyword">done</span></div><div class="line">HEAD / HTTP/1.1</div><div class="line">Host: localhost:8080</div><div class="line">User-Agent: curl/7.43.0</div><div class="line">Accept: */*</div><div class="line"></div><div class="line"><span class="comment"># 別プロセスから</span></div><div class="line">curl -I localhost:8080</div><div class="line">HTTP/1.0 200 OK;</div><div class="line">Hello World</div></pre></td></tr></table></figure>
<p>適当なhtmlファイルを返してみる。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">title</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">            This is Test</div><div class="line">        <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">netcat -lp 3000 &lt; index.html</div><div class="line">GET / HTTP/1.1</div><div class="line">Host: localhost:3000</div><div class="line">User-Agent: curl/7.43.0</div><div class="line">Accept: */*</div><div class="line"></div><div class="line"><span class="comment"># 別プロセスから</span></div><div class="line">curl http://localhost:3000</div><div class="line">&lt;html&gt;</div><div class="line">        &lt;head&gt;</div><div class="line">            &lt;title&gt;Test&lt;/title&gt;</div><div class="line">        &lt;/head&gt;</div><div class="line">        &lt;body&gt;</div><div class="line">            This is Test</div><div class="line">        &lt;/body&gt;</div></pre></td></tr></table></figure>
<h2 id="バックドア"><a href="#バックドア" class="headerlink" title="バックドア"></a>バックドア</h2><p>e オプションはバックドアとして機能する。GNU, OpenBSDバージョンでは利用できないようにしてることがある。<br>その場合はソースを取得してコンパイルが必要。<br>Macだとbrewでインストールすることで利用出来る。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># バックドアを開けておく</span></div><div class="line">nc <span class="_">-l</span> -p 8080 <span class="_">-e</span> /bin/bash</div><div class="line"></div><div class="line"><span class="comment"># 別プロセスから</span></div><div class="line">nc localhost 8080</div><div class="line"></div><div class="line">ls</div><div class="line"><span class="comment"># netcatの実行ディレクトリのファイル一覧</span></div><div class="line">whoami</div><div class="line"><span class="comment"># netcatの実行ユーザー</span></div></pre></td></tr></table></figure>
<h2 id="サーバー間通信"><a href="#サーバー間通信" class="headerlink" title="サーバー間通信"></a>サーバー間通信</h2><p>ポート番号を指定して、待ち受けることでサーバー間でコミュニケーションできる。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ホスト側でport 4000をlisten</span></div><div class="line">nc -lp 4000</div><div class="line"></div><div class="line"><span class="comment"># 別プロセスで400にアクセス</span></div><div class="line">nc localhost 4000</div><div class="line"></div><div class="line"><span class="comment"># 入力内容がホスト側に出力される</span></div></pre></td></tr></table></figure>
<p>バックドアはeオプションが使えないが、サーバー間通信を活用することで同じことが実現出来る。<br>出力、エラーをclien側に出力するためにmkfifoを使う。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># host側</span></div><div class="line">mkdir tmp/; rm <span class="_">-f</span> tmp/f; mkfifo tmp/f</div><div class="line">cat tmp/f | /bin/sh -i 2&gt;&amp;1 | nc -lp 4000 &gt; tmp/f</div><div class="line"></div><div class="line"><span class="comment"># client側</span></div><div class="line">nc localhost 4000</div><div class="line"><span class="comment"># /bin/sh が実行できる</span></div></pre></td></tr></table></figure>
<h2 id="ポートスキャン"><a href="#ポートスキャン" class="headerlink" title="ポートスキャン"></a>ポートスキャン</h2><p>z オプションでポート確認だけをする</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">nc -zv localhost 80</div><div class="line">found 0 associations</div><div class="line">found 1 connections:</div><div class="line">     1: flags=82&lt;CONNECTED,PREFERRED&gt;</div><div class="line">    outif en0</div><div class="line">    src 192.168.1.4 port 56855</div><div class="line">    dst 0.0.0.0 port 80</div><div class="line">    rank info not available</div><div class="line">    TCP aux info available</div><div class="line"></div><div class="line">Connection to google.com port 80 [tcp/http] succeeded!</div></pre></td></tr></table></figure>
<p>ちなみにportのレンジを指定して、ポートの確認もできる。<br>(AWSなどはポートスキャンできない)</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">nc -zv localhost 75-85</div><div class="line">nc: connectx to localhost port 75 (tcp) failed: Connection refused</div><div class="line">nc: connectx to localhost port 76 (tcp) failed: Connection refused</div><div class="line">nc: connectx to localhost port 77 (tcp) failed: Connection refused</div><div class="line">nc: connectx to localhost port 78 (tcp) failed: Connection refused</div><div class="line">nc: connectx to localhost port 79 (tcp) failed: Connection refused</div><div class="line">found 0 associations</div><div class="line">found 1 connections:</div><div class="line">     1: flags=82&lt;CONNECTED,PREFERRED&gt;</div><div class="line">    outif en0</div><div class="line">    src 192.168.1.4 port 57809</div><div class="line">    dst 0.0.0.0 port 80</div><div class="line">    rank info not available</div><div class="line">    TCP aux info available</div><div class="line"></div><div class="line">Connection to localhost port 80 [tcp/http] succeeded!</div><div class="line">nc: connectx to localhost port 81 (tcp) failed: Connection refused</div><div class="line">nc: connectx to localhost port 82 (tcp) failed: Connection refused</div><div class="line">nc: connectx to localhost port 83 (tcp) failed: Connection refused</div><div class="line">nc: connectx to localhost port 84 (tcp) failed: Connection refused</div><div class="line">nc: connectx to localhost port 85 (tcp) failed: Connection refused</div></pre></td></tr></table></figure>
<p>このポートスキャンの機能を使うことでアプリケーションの死活監視をすることで実現出来る。<br>ドメイン名だけでなくIPアドレスでも可能。</p>
<h2 id="ファイル転送"><a href="#ファイル転送" class="headerlink" title="ファイル転送"></a>ファイル転送</h2><p>送信する側では標準入力で送信するファイルを指定する。<br>受信する側で送られてきた内容(標準出力)をリダイレクトして、ファイル保存</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># receiving</span></div><div class="line">nc -lp 4000 &gt; test.txt</div><div class="line"></div><div class="line"><span class="comment"># sending</span></div><div class="line">nc -lp 4000 &gt; test.txt</div></pre></td></tr></table></figure>
<p>送信完了しても、特になにもおきない。<br>受信側でmd5 hashなどをつかって、ファイルの同一性をチェックしたほうが良い。</p>
<h2 id="tunnel"><a href="#tunnel" class="headerlink" title="tunnel"></a>tunnel</h2><p>L オプションでリモートのアドレスに転送する</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">nc -L google.com:80 -p 3000</div><div class="line"></div><div class="line"><span class="comment"># 別プロセスから</span></div><div class="line">curl http://localhost:3000</div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=en&gt;</div><div class="line">  &lt;meta charset=utf-8&gt;</div><div class="line">  &lt;meta name=viewport content=<span class="string">"initial-scale=1, minimum-scale=1, width=device-width"</span>&gt;</div><div class="line">  &lt;title&gt;Error 404 (Not Found)!!1&lt;/title&gt;</div><div class="line">  &lt;style&gt;</div><div class="line">    *&#123;margin:0;padding:0&#125;html,code&#123;font:15px/22px arial,sans-serif&#125;html&#123;background:<span class="comment">#fff;color:#222;padding:15px&#125;body&#123;margin:7% auto 0;max-width:390px;min-height:180px;padding:30px 0 15px&#125;* &gt; body&#123;background:url(//www.google.com/images/errors/robot.png) 100% 5px no-repeat;padding-right:205px&#125;p&#123;margin:11px 0 22px;overflow:hidden&#125;ins&#123;color:#777;text-decoration:none&#125;a img&#123;border:0&#125;@media screen and (max-width:772px)&#123;body&#123;background:none;margin-top:0;max-width:none;padding-right:0&#125;&#125;#logo&#123;background:url(//www.google.com/images/branding/googlelogo/1x/googlelogo_color_150x54dp.png) no-repeat;margin-left:-5px&#125;@media only screen and (min-resolution:192dpi)&#123;#logo&#123;background:url(//www.google.com/images/branding/googlelogo/2x/googlelogo_color_150x54dp.png) no-repeat 0% 0%/100% 100%;-moz-border-image:url(//www.google.com/images/branding/googlelogo/2x/googlelogo_color_150x54dp.png) 0&#125;&#125;@media only screen and (-webkit-min-device-pixel-ratio:2)&#123;#logo&#123;background:url(//www.google.com/images/branding/googlelogo/2x/googlelogo_color_150x54dp.png) no-repeat;-webkit-background-size:100% 100%&#125;&#125;#logo&#123;display:inline-block;height:54px;width:150px&#125;</span></div><div class="line">  &lt;/style&gt;</div><div class="line">  &lt;a href=//www.google.com/&gt;&lt;span id=logo aria-label=Google&gt;&lt;/span&gt;&lt;/a&gt;</div><div class="line">  &lt;p&gt;&lt;b&gt;404.&lt;/b&gt; &lt;ins&gt;That’s an error.&lt;/ins&gt;</div><div class="line">  &lt;p&gt;The requested URL &lt;code&gt;/&lt;/code&gt; was not found on this server.  &lt;ins&gt;That’s all we know.&lt;/ins&gt;</div></pre></td></tr></table></figure>
<p>ざっとみただけで、さすが高機能だ。<br>まだまだ奥深い活用方法がありあそうだが、現在のところ自分にはこれでも十分。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;サーバーの死活確認やモックレスポンスが欲しい時など、手元で簡単に実現出来るnetcatコマンド。&lt;br&gt;ソフトウェア開発しているときに活用できそうな機能をまとめてみた。&lt;br&gt;netcatはunixだけでなくwindowsでも使える。&lt;/p&gt;
    
    </summary>
    
      <category term="memo" scheme="http://blog.kazu69.net/categories/memo/"/>
    
    
  </entry>
  
  <entry>
    <title>systemdを使ってnodejsサーバー起動する</title>
    <link href="http://blog.kazu69.net/2016/06/06/start-node-server-with-systemd/"/>
    <id>http://blog.kazu69.net/2016/06/06/start-node-server-with-systemd/</id>
    <published>2016-06-06T10:26:02.000Z</published>
    <updated>2016-06-06T23:29:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>nodejsのプロセスバックグラウンドで実行する(デーモン化)する場合、だいたい<a href="https://www.npmjs.com/package/forever" target="_blank" rel="external">forever</a>などが選択されると思う。<br>今回は、Fedora、CentOS 7のデーモンとなるsystemdを使ってデーモン化してみた。<br><a id="more"></a></p>
<p>まずforeverでプロセスをバックグランドで実行させる。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">npm i -g forever</div><div class="line">forever start server.js</div><div class="line">info:    Forever processing file: server.js</div><div class="line"></div><div class="line">node]<span class="comment"># forever list</span></div><div class="line">info:    Forever processes running</div><div class="line">data:        uid  <span class="built_in">command</span>       script    forever pid id logfile                 uptime</div><div class="line">data:    [0] OhQD /usr/bin/node server.js 97      102    /root/.forever/OhQD.log 0:0:0:19.532</div></pre></td></tr></table></figure>
<p>実際はこのようにforeverを実行する起動ファイルを作成し、自動起動できるようにしないといけない。<br>場合によっては、起動順序やプロセスの依存関係などを考慮しないといけないため、起動スクリプトは複雑になることが考えられる。</p>
<p>これをsystemdに置き換えることで、</p>
<ul>
<li>起動スクリプトを設定ファイルで記述できる</li>
<li>依存関係や起動順序など複雑さを回避できる</li>
<li>起動処理をできる限り並列化するとのことで起動にかかk流時間が短縮できる</li>
</ul>
<p>などが実現する様子。</p>
<p>さっそく適当なDocker環境でsystemdを使ってnodejsサーバーのデーモン化を試してみた。</p>
<h2 id="NodeJsサーバー作成"><a href="#NodeJsサーバー作成" class="headerlink" title="NodeJsサーバー作成"></a>NodeJsサーバー作成</h2><p>ミニマムなサーバーを作成</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> hostname = <span class="string">'0.0.0.0'</span>;</div><div class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</div><div class="line">    res.statusCode = <span class="number">200</span>;</div><div class="line">    res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/plain'</span>);</div><div class="line">    res.end(<span class="string">'Hello World\n'</span>);</div><div class="line">&#125;)</div><div class="line"></div><div class="line">server.listen(port, hostname, () =&gt; &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`Server running at http://<span class="subst">$&#123;hostname&#125;</span>:<span class="subst">$&#123;port&#125;</span>/`</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="systemd-の設定ファイル"><a href="#systemd-の設定ファイル" class="headerlink" title="systemd の設定ファイル"></a>systemd の設定ファイル</h2><p>systemdでは起動処理を<strong>Unit</strong>という単位で管理している。<br>Unitには幾つかのタイプ(service, socketやdebviceなど）が存在するが、それらはすべてファイルの拡張子で判別されている。</p>
<p>設定ファイルにはUnit, Install, Service(serviceであれば)セクションで構成される。</p>
<p>それぞれの設定項目に関しては<a href="https://www.freedesktop.org/software/systemd/man/systemd.html" target="_blank" rel="external">manページ</a>に詳しくあるので、必要そうなものをかいつまんでみる。</p>
<h3 id="Unitセクション"><a href="#Unitセクション" class="headerlink" title="Unitセクション"></a>Unitセクション</h3><p>起動サービスの依存・順序関係を解決する。</p>
<table>
<thead>
<tr>
<th>ディレクティブ</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>Description</td>
<td>ユニットの説明</td>
</tr>
<tr>
<td>Documentation</td>
<td>ドキュメントのURI</td>
</tr>
<tr>
<td>After/Before</td>
<td>実行順番の設定</td>
</tr>
<tr>
<td>Requires/Wants</td>
<td>依存関係の定義。(順序は関係なく並列起動されるべきサービス)<br>RequiresとWantsの違い。Requiresは依存するサービス起動失敗した時は、サービスの起動を中断とする</td>
</tr>
</tbody>
</table>
<h3 id="Serviceセクション"><a href="#Serviceセクション" class="headerlink" title="Serviceセクション"></a>Serviceセクション</h3><p>起動サービスの設定</p>
<table>
<thead>
<tr>
<th>ディレクティブ</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>ExecStart</td>
<td>実行するサービスの起動コマンド</td>
</tr>
<tr>
<td>ExecReload</td>
<td>サービスのリロードコマンド</td>
</tr>
<tr>
<td>ExecStop</td>
<td>サービスの停止コマンド</td>
</tr>
<tr>
<td>Restart</td>
<td>プロセス停止時の再起動の有無<br>always 常に再起動<br>no 再起動しない<br>on-success 終了ステータスコード 0 (exit code 0) で終了時に再起動<br>on-failure 終了ステータスコード 0以外 (exit code 0以外) で終了時に再起動</td>
</tr>
<tr>
<td>Type</td>
<td>プロセスの起動方法<br>フォアグラウンドで実行する場合はsimple<br>プロセスをforkして実行する場合はforking</td>
</tr>
<tr>
<td>Environment</td>
<td>環境変数</td>
</tr>
<tr>
<td>RestartSec</td>
<td>再起動までのスリープ時間</td>
</tr>
<tr>
<td>StandardOutput,StandardError</td>
<td>ログ、エラー出力の設定</td>
</tr>
</tbody>
</table>
<h3 id="Installセクション"><a href="#Installセクション" class="headerlink" title="Installセクション"></a>Installセクション</h3><p>ユニットの自動起動に関する設定。</p>
<table>
<thead>
<tr>
<th>ディレクティブ</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>WantedBy</td>
<td>systemctl enable でインストールされるとき、 .wants/にシンボリックを作成</td>
</tr>
<tr>
<td>RequiredBy</td>
<td>systemctl enable でインストールされるとき、 .requires/にシンボリックを作成</td>
</tr>
</tbody>
</table>
<p>wantsとrequiresはの違いは、wantsはUnitの依存関係のユニットが失敗すると起動を中断する。<br>requiresは依存関係のユニットが失敗すると起動を継続する。</p>
<hr>
<p>ということで、今回はサービスの起動を行うため<strong>.service</strong>を使う。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[Unit]</div><div class="line">Description=Node.js Server</div><div class="line"></div><div class="line">[Service]</div><div class="line">WorkingDirectory=/home/node</div><div class="line">Type=simple</div><div class="line">ExecStart=/usr/bin/node server.js</div><div class="line">Restart=always</div><div class="line">RestartSec=10</div><div class="line">StandardOutput=syslog</div><div class="line">StandardError=syslog</div><div class="line">SyslogIdentifier=node-server</div><div class="line">Environment=NODE_ENV=production PORT=3000</div><div class="line"></div><div class="line">[Install]</div><div class="line">WantedBy=multi-user.target</div></pre></td></tr></table></figure>
<p>上記を使ってDockerfileを作成。<br>centos7でNodeJs 4.x を入れるのが大変だったので、<a href="https://nodesource.com/" target="_blank" rel="external">nodesource</a>からセットアップすることにした。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">FROM centos:7</div><div class="line"></div><div class="line">RUN yum -y update &amp;&amp; \</div><div class="line">    yum -y install epel-release.noarch curl make gcc gcc-c++ tree which &amp;&amp; \</div><div class="line">    yum repolist</div><div class="line"></div><div class="line">RUN curl -sL https://rpm.nodesource.com/setup_4.x | bash - &amp;&amp; \</div><div class="line">    yum -y install nodejs</div><div class="line"></div><div class="line">RUN mkdir /home/node/</div><div class="line">ADD server.js /home/node/server.js</div><div class="line"></div><div class="line">ADD node_server.service /etc/systemd/system/node_server.service</div></pre></td></tr></table></figure>
<h2 id="systemdを試してみる"><a href="#systemdを試してみる" class="headerlink" title="systemdを試してみる"></a>systemdを試してみる</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker build -t server .</div></pre></td></tr></table></figure>
<p>Dockerコンテナ内でDocker daemonの起動はできないので、privilegedオプションで起動する。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">docker run --privileged -d -p 3000:3000 server:latest /sbin/init</div><div class="line">72956dbd3cdf37268a0fa9678922f116e48d1730dd5c69771fa7abffe4affd49</div><div class="line">docker ps</div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                    NAMES</div><div class="line">72956dbd3cdf        server:latest       &quot;/sbin/init&quot;        10 seconds ago      Up 9 seconds        0.0.0.0:3000-&gt;3000/tcp   silly_pike</div><div class="line"></div><div class="line">docker exec -it silly_pike /bin/bash</div></pre></td></tr></table></figure>
<p>色々と確認する</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"># 起動unitの確認</div><div class="line">systemctl list-units --type=service</div><div class="line"></div><div class="line">  UNIT                                   LOAD   ACTIVE SUB     DESCRIPTION</div><div class="line">  dbus.service                           loaded active running D-Bus System Message Bus</div><div class="line">  getty@tty1.service                     loaded active running Getty on tty1</div><div class="line">  ldconfig.service                       loaded active exited  Rebuild Dynamic Linker Cache</div><div class="line">  systemd-hwdb-update.service            loaded active exited  Rebuild Hardware Database</div><div class="line">  systemd-journal-catalog-update.service loaded active exited  Rebuild Journal Catalog</div><div class="line">  systemd-journal-flush.service          loaded active exited  Flush Journal to Persistent Storage</div><div class="line">  systemd-journald.service               loaded active running Journal Service</div><div class="line">  systemd-logind.service                 loaded active running Login Service</div><div class="line">  systemd-random-seed.service            loaded active exited  Load/Save Random Seed</div><div class="line">● systemd-remount-fs.service             loaded failed failed  Remount Root and Kernel File Systems</div><div class="line">  systemd-sysctl.service                 loaded active exited  Apply Kernel Variables</div><div class="line">  systemd-tmpfiles-setup-dev.service     loaded active exited  Create Static Device Nodes in /dev</div><div class="line">iles and Directoriesetup.service         loaded active exited  Create Volatile</div><div class="line">FDevicesd-udev-trigger.service           loaded active exited  udev Coldplug</div><div class="line">e Manager-udevd.service                  loaded active running udev Kernel Devic</div><div class="line">ed      d-update-done.service            loaded active exited  Update is Complet</div><div class="line"> System Boot/Shutdown.service            loaded active exited  Update UTMP about</div><div class="line">ons     d-user-sessions.service          loaded active exited  Permit User Sessi</div><div class="line">sole    d-vconsole-setup.service         loaded active exited  Setup Virtual Con</div><div class="line"></div><div class="line">LOAD   = Reflects whether the unit definition was properly loaded.</div><div class="line">ACTIVE = The high-level unit activation state, i.e. generalization of SUB.</div><div class="line">SUB    = The low-level unit activation state, values depend on unit type.</div><div class="line"></div><div class="line">o.      d units listed. Pass --all to see loaded but inactive units, to--More--</div><div class="line">To show all installed unit files use &apos;systemctl list-unit-files&apos;.</div><div class="line"></div><div class="line"># 起動の有無に関係なくunitの一覧表示する</div><div class="line">systemctl list-unit-files --type=service</div><div class="line"></div><div class="line">UNIT FILE                              STATE</div><div class="line">proc-sys-fs-binfmt_misc.automount      static</div><div class="line">dev-hugepages.mount                    static</div><div class="line">dev-mqueue.mount                       static</div><div class="line">proc-sys-fs-binfmt_misc.mount          static</div><div class="line">sys-fs-fuse-connections.mount          static</div><div class="line">sys-kernel-config.mount                static</div><div class="line">sys-kernel-debug.mount                 static</div><div class="line">tmp.mount                              disabled</div><div class="line">systemd-ask-password-console.path      static</div><div class="line">systemd-ask-password-wall.path         static</div><div class="line">autovt@.service                        disabled</div><div class="line">blk-availability.service               disabled</div><div class="line">console-getty.service                  disabled</div><div class="line">console-shell.service                  disabled</div><div class="line">container-getty@.service               static</div><div class="line">dbus-org.freedesktop.hostname1.service static</div><div class="line">dbus-org.freedesktop.locale1.service   static</div><div class="line">dbus-org.freedesktop.login1.service    static</div><div class="line">dbus-org.freedesktop.machine1.service  static</div><div class="line">dbus-org.freedesktop.network1.service  invalid</div><div class="line">dbus-org.freedesktop.timedate1.service static</div><div class="line">dbus.service                           static</div><div class="line">...</div><div class="line">...</div></pre></td></tr></table></figure>
<p>staticはInstallを持たないので、単体で起動できない(他のUnitに依存)する。<br>enabled/disabled はシステム起動時の自動起動の有効/無効を意味する。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># 自動起動を有効にする</div><div class="line">systemctl enable node_server.service</div><div class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/node_server.service to /etc/systemd/system/node_server.service.</div><div class="line"></div><div class="line"># 自動起動を無効にする</div><div class="line">systemctl disable node_server.service</div><div class="line">Removed symlink /etc/systemd/system/multi-user.target.wants/node_server.service.</div></pre></td></tr></table></figure>
<p>systemd/system にシンボリックリンクを作ることがわかる。</p>
<p>自動起動を有効にする</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">systemctl enable node_server.service</div><div class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/node.service to /etc/systemd/system/node.service.</div><div class="line"></div><div class="line">systemctl list-unit-files --type=service | grep node_server.service</div><div class="line">node_server.service                    enabled</div></pre></td></tr></table></figure>
<p>サービスをスタートする</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl start node_server.service</div></pre></td></tr></table></figure>
<p>起動を確認する</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">systemctl status node_server.service</div><div class="line">● node_server.service - Node.js Server</div><div class="line">   Loaded: loaded (/etc/systemd/system/node_server.service; enabled; vendor preset: disabled)</div><div class="line">   Active: active (running) since Sun 2016-06-06 20:11:11 UTC; 4s ago</div><div class="line"> Main PID: 90 (node)</div><div class="line">   CGroup: /system.slice/node_server.service</div><div class="line">           └─90 /usr/bin/node /home/node/server.js</div><div class="line"></div><div class="line">Jun 06 20:11:11 5bb4328b5c84 systemd[1]: Started Node.js Server.</div><div class="line">Jun 06 20:11:11 5bb4328b5c84 systemd[1]: Starting Node.js Server...</div><div class="line">Jun 06 20:11:11 5bb4328b5c84 node-server[90]: Server running at http://0.0.0.0:3000/</div></pre></td></tr></table></figure>
<p>アクセス確認する</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl http://$(docker-machine ip dev):3000/</div><div class="line">Hello World</div></pre></td></tr></table></figure>
<p>.serveceファイルの再読み込み</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl daemon-reload</div></pre></td></tr></table></figure>
<p>ついでに再起動</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl restart node_server.service</div></pre></td></tr></table></figure>
<h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>起動スクリプトの依存性や順序などは場合によっては複雑化するが、systemdを使うことで設定ファイルに落としこめることは、<br>メリットになるのではないだろうか。<br>ただ、systemdは全体像が大きいため把握できていないが、まだまだ落とし穴も多い様子。<br>iniからsystemdに置き換わっているのは事実なので、さらに使用して理解する必要がありそうだ。</p>
<h2 id="参考にしたページ"><a href="#参考にしたページ" class="headerlink" title="参考にしたページ"></a>参考にしたページ</h2><ul>
<li><a href="http://dev.classmethod.jp/cloud/aws/systemd-getting-started/" target="_blank" rel="external">systemd超入門</a></li>
<li><a href="https://wiki.archlinuxjp.org/index.php/Systemd" target="_blank" rel="external">wiki.archlinuxjp.org systemd</a></li>
<li><a href="https://blog.docker.com/2013/09/docker-can-now-run-within-docker/" target="_blank" rel="external">Docker can now run within Docker</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;nodejsのプロセスバックグラウンドで実行する(デーモン化)する場合、だいたい&lt;a href=&quot;https://www.npmjs.com/package/forever&quot;&gt;forever&lt;/a&gt;などが選択されると思う。&lt;br&gt;今回は、Fedora、CentOS 7のデーモンとなるsystemdを使ってデーモン化してみた。&lt;br&gt;
    
    </summary>
    
      <category term="tec" scheme="http://blog.kazu69.net/categories/tec/"/>
    
    
  </entry>
  
  <entry>
    <title>Serverless Frameworkを使ってAWS LambdaとAPI Gatewayを試した</title>
    <link href="http://blog.kazu69.net/2016/05/12/playing-aws-lamda-api-gateway-using-serverless-framework/"/>
    <id>http://blog.kazu69.net/2016/05/12/playing-aws-lamda-api-gateway-using-serverless-framework/</id>
    <published>2016-05-12T10:26:02.000Z</published>
    <updated>2016-05-12T16:19:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>サーバーレスでアプリケーションを構築するためのNode.jsのフレームワーク<a href="">Serverless</a>を使って、<br><a href="https://aws.amazon.com/lambda/" target="_blank" rel="external">AWS Lambda</a>と<a href="https://aws.amazon.com/jp/api-gateway/" target="_blank" rel="external">Amazon API Gateway</a>をつかってSlack Botを試してみたときのメモ。</p>
<a id="more"></a>
<p>SlackのメッセージをAPI GatewayにPOSTして、AWS Lambdaで処理をして、webhookを使ってslackに投稿する。</p>
<p><img src="/images/2016/05/12/serverless8.png" alt=""></p>
<h2 id="AWS-CLIを端末-Mac-にインストールする"><a href="#AWS-CLIを端末-Mac-にインストールする" class="headerlink" title="AWS CLIを端末(Mac)にインストールする"></a>AWS CLIを端末(Mac)にインストールする</h2><p>なにはともあれ、AWSのコマンドラインインターフェイスを使うので端末にインストールする。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">curl <span class="string">"https://bootstrap.pypa.io/get-pip.py"</span> -o <span class="string">"get-pip.py"</span></div><div class="line">sudo python get-pip.py</div><div class="line"></div><div class="line">The directory <span class="string">'/Users/YOU/Library/Caches/pip/http'</span> or its parent directory is not owned by the current user and the cache has been disabled. Please check the permissions and owner of that directory. If executing pip with sudo, you may want sudo<span class="string">'s -H flag.</span></div><div class="line">The directory '/Users/YOU/Library/Caches/pip<span class="string">' or its parent directory is not owned by the current user and caching wheels has been disabled. check the permissions and owner of that directory. If executing pip with sudo, you may want sudo'</span>s -H flag.</div><div class="line">Requirement already up-to-date: pip <span class="keyword">in</span> /Library/Python/2.7/site-packages/pip-8.1.1-py2.7.egg</div><div class="line">Collecting wheel</div><div class="line">  Downloading wheel-0.29.0-py2.py3-none-any.whl (66kB)</div><div class="line">    100% |████████████████████████████████| 71kB 1.3MB/s</div><div class="line">Installing collected packages: wheel</div><div class="line">Successfully installed wheel-0.29.0</div><div class="line"></div><div class="line">sudo pip install awscli</div><div class="line"></div><div class="line">aws configure</div><div class="line">AWS Access Key ID [None]: XXXXXXXXXXXXXXXXXXX</div><div class="line">AWS Secret Access Key [None]: xxxxxxxxxxxxxxxxxxxxxxxxxxxxx</div><div class="line">Default region name [None]: tokyo</div><div class="line">Default output format [None]: json</div><div class="line"></div><div class="line">ls -la ~/.aws</div><div class="line">total 16</div><div class="line">-rw-------    1 YOU  staff    39  5  1 08:32 config</div><div class="line">-rw-------    1 YOU  staff   116  5  1 08:32 credentials</div></pre></td></tr></table></figure>
<h2 id="IAM-Identity-and-Access-Management-ユーザーとポリシーの作成"><a href="#IAM-Identity-and-Access-Management-ユーザーとポリシーの作成" class="headerlink" title="IAM(Identity and Access Management)ユーザーとポリシーの作成"></a>IAM(Identity and Access Management)ユーザーとポリシーの作成</h2><p>AWSのダッシュボードの <a href="https://console.aws.amazon.com/iam/home" target="_blank" rel="external">IAM</a> からユーザーを作成する。<br>今回は<code>serverless-admin</code> という名前で作成する。</p>
<p><img src="/images/2016/05/12/serverless1.png" alt=""></p>
<p>認証情報は後ほど必要なので認証情報はダウンロードしておく。</p>
<p><img src="/images/2016/05/12/serverless2.png" alt=""></p>
<p>続いてポリシーをアタッチする。</p>
<p>IAMページのポリシーを選択し、<code>AdministratorAccess</code> を選んでアタッチする。</p>
<p><img src="/images/2016/05/12/serverless3.png" alt=""></p>
<p><img src="/images/2016/05/12/serverless4.png" alt=""></p>
<h2 id="Serverlessのインストールとプロジェクト作成"><a href="#Serverlessのインストールとプロジェクト作成" class="headerlink" title="Serverlessのインストールとプロジェクト作成"></a>Serverlessのインストールとプロジェクト作成</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">node -v</div><div class="line">v5.10.1</div><div class="line"></div><div class="line">npm i -g serverless</div><div class="line"></div><div class="line">serverless</div><div class="line"> _______                             __</div><div class="line">|   _   .-----.----.--.--.-----.----|  .-----.-----.-----.</div><div class="line">|   |___|  -__|   _|  |  |  -__|   _|  |  -__|__ --|__ --|</div><div class="line">|____   |_____|__|  \___/|_____|__| |__|_____|_____|_____|</div><div class="line">|   |   |             The Serverless Application Framework</div><div class="line">|       |                           serverless.com, v0.5.5</div><div class="line">`-------<span class="string">'</span></div><div class="line"></div><div class="line">Commands</div><div class="line">* Serverless documentation: http://docs.serverless.com</div><div class="line">* You can run commands with "serverless" or the shortcut "sls"</div><div class="line">* Pass "--help" after any &lt;context&gt; &lt;action&gt; for contextual help</div><div class="line"></div><div class="line">"project" actions:</div><div class="line">  create</div><div class="line">  install</div><div class="line">  init</div><div class="line">  remove</div><div class="line"></div><div class="line">"function" actions:</div><div class="line">  run</div><div class="line">  create</div><div class="line">  deploy</div><div class="line">  logs</div><div class="line">  remove</div><div class="line">  rollback</div><div class="line"></div><div class="line">"endpoint" actions:</div><div class="line">  deploy</div><div class="line">  remove</div><div class="line"></div><div class="line">"event" actions:</div><div class="line">  deploy</div><div class="line">  remove</div><div class="line"></div><div class="line">"dash" actions:</div><div class="line">  deploy</div><div class="line">  summary</div><div class="line"></div><div class="line">"stage" actions:</div><div class="line">  create</div><div class="line">  remove</div><div class="line"></div><div class="line">"region" actions:</div><div class="line">  create</div><div class="line">  remove</div><div class="line"></div><div class="line">"resources" actions:</div><div class="line">  deploy</div><div class="line">  remove</div><div class="line">  diff</div><div class="line"></div><div class="line">"plugin" actions:</div><div class="line">  create</div><div class="line"></div><div class="line">"variables" actions:</div><div class="line">  list</div><div class="line">  set</div><div class="line">  unset</div></pre></td></tr></table></figure>
<p>You can run commands with “serverless” or the shortcut “sls” とあるように<br><code>serverless</code>は<code>sls</code>でaliasされているとのこと。</p>
<p>つづいて、プロジェクトの作成を行う。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">sls project init</div><div class="line"> _______                             __</div><div class="line">|   _   .-----.----.--.--.-----.----|  .-----.-----.-----.</div><div class="line">|   |___|  -__|   _|  |  |  -__|   _|  |  -__|__ --|__ --|</div><div class="line">|____   |_____|__|  \___/|_____|__| |__|_____|_____|_____|</div><div class="line">|   |   |             The Serverless Application Framework</div><div class="line">|       |                           serverless.com, v0.5.5</div><div class="line">`-------<span class="string">'</span></div><div class="line"></div><div class="line">Serverless: Initializing Serverless Project...</div><div class="line">Serverless: Enter a name for this project:  (serverless-b1ntox) serverless-greeints</div><div class="line">Serverless: Enter a new stage name for this project:  (dev)</div><div class="line">Serverless: For the "dev" stage, do you want to use an existing Amazon Web Services profile or create a new one?</div><div class="line">  &gt; Existing Profile</div><div class="line">    Create A New Profile</div><div class="line">Serverless: Select a profile for your project:</div><div class="line">  &gt; default</div><div class="line">Serverless: Creating stage "dev"...</div><div class="line">Serverless: Select a new region for your stage:</div><div class="line">    us-east-1</div><div class="line">    us-west-2</div><div class="line">  &gt; eu-west-1</div><div class="line">    eu-central-1</div><div class="line">    ap-northeast-1</div><div class="line">Serverless: Creating region "eu-west-1" in stage "dev"...</div><div class="line">Serverless: Deploying resources to stage "dev" in region "eu-west-1" via Cloudformation (~3 minutes)...</div><div class="line">Serverless: Successfully deployed "dev" resources to "eu-west-1"</div><div class="line">Serverless: Successfully created region "eu-west-1" within stage "dev"</div><div class="line">Serverless: Successfully created stage "dev"</div><div class="line">Serverless: Successfully initialized project "serverless-greeints"</div></pre></td></tr></table></figure>
<p>プロジェクトを作成すると以下のようになる。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">tree -L 2</div><div class="line">.</div><div class="line">│ </div><div class="line">└── serverless-greeints</div><div class="line">      ├── _meta</div><div class="line">      │   ├── resources</div><div class="line">      │   └── variables</div><div class="line">      ├── admin.env</div><div class="line">      ├── package.json</div><div class="line">      ├── s-project.json</div><div class="line">      └── s-resources-cf.json</div></pre></td></tr></table></figure>
<p>プロジェクト毎に次のような<code>s-project.json</code>が作成される。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"serverless-greeints"</span>,</div><div class="line">  <span class="string">"custom"</span>: &#123;&#125;,</div><div class="line">  <span class="string">"plugins"</span>: []</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>admin.env</code>にはAWSのAccess Keysのパスが書き込まれる。<br>初期値はdefaultとなり、$HOME/.awsを参照する。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AWS_DEV_PROFILE=default</div></pre></td></tr></table></figure>
<p><code>_meta/variables</code>にはプロジェクトごとのstageやregionなどの設定ファイルがjsonで保持されている。<br>たとえばstateがdev、reagionがus:westなら該当する設定ファイルは<code>s-variables-dev-uswest.json</code>となる。</p>
<p><code>s-resources-cf.json</code>はCloudFormationのテンプレートファイル。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"AWSTemplateFormatVersion"</span>: <span class="string">"2010-09-09"</span>,</div><div class="line">  <span class="string">"Description"</span>: <span class="string">"The AWS CloudFormation template for this Serverless application's resources outside of Lambdas and Api Gateway"</span>,</div><div class="line">  <span class="string">"Resources"</span>: &#123;</div><div class="line">    <span class="string">"IamRoleLambda"</span>: &#123;</div><div class="line">      <span class="string">"Type"</span>: <span class="string">"AWS::IAM::Role"</span>,</div><div class="line">      <span class="string">"Properties"</span>: &#123;</div><div class="line">        <span class="string">"AssumeRolePolicyDocument"</span>: &#123;</div><div class="line">          <span class="string">"Version"</span>: <span class="string">"2012-10-17"</span>,</div><div class="line">          <span class="string">"Statement"</span>: [</div><div class="line">            &#123;</div><div class="line">              <span class="string">"Effect"</span>: <span class="string">"Allow"</span>,</div><div class="line">              <span class="string">"Principal"</span>: &#123;</div><div class="line">                <span class="string">"Service"</span>: [</div><div class="line">                  <span class="string">"lambda.amazonaws.com"</span></div><div class="line">                ]</div><div class="line">              &#125;,</div><div class="line">              <span class="string">"Action"</span>: [</div><div class="line">                <span class="string">"sts:AssumeRole"</span></div><div class="line">              ]</div><div class="line">            &#125;</div><div class="line">          ]</div><div class="line">        &#125;,</div><div class="line">        <span class="string">"Path"</span>: <span class="string">"/"</span></div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"IamPolicyLambda"</span>: &#123;</div><div class="line">      <span class="string">"Type"</span>: <span class="string">"AWS::IAM::Policy"</span>,</div><div class="line">      <span class="string">"Properties"</span>: &#123;</div><div class="line">        <span class="string">"PolicyName"</span>: <span class="string">"$&#123;stage&#125;-$&#123;project&#125;-lambda"</span>,</div><div class="line">        <span class="string">"PolicyDocument"</span>: &#123;</div><div class="line">          <span class="string">"Version"</span>: <span class="string">"2012-10-17"</span>,</div><div class="line">          <span class="string">"Statement"</span>: [</div><div class="line">            &#123;</div><div class="line">              <span class="string">"Effect"</span>: <span class="string">"Allow"</span>,</div><div class="line">              <span class="string">"Action"</span>: [</div><div class="line">                <span class="string">"logs:CreateLogGroup"</span>,</div><div class="line">                <span class="string">"logs:CreateLogStream"</span>,</div><div class="line">                <span class="string">"logs:PutLogEvents"</span></div><div class="line">              ],</div><div class="line">              <span class="string">"Resource"</span>: <span class="string">"arn:aws:logs:$&#123;region&#125;:*:*"</span></div><div class="line">            &#125;</div><div class="line">          ]</div><div class="line">        &#125;,</div><div class="line">        <span class="string">"Roles"</span>: [</div><div class="line">          &#123;</div><div class="line">            <span class="string">"Ref"</span>: <span class="string">"IamRoleLambda"</span></div><div class="line">          &#125;</div><div class="line">        ]</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="string">"Outputs"</span>: &#123;</div><div class="line">    <span class="string">"IamRoleArnLambda"</span>: &#123;</div><div class="line">      <span class="string">"Description"</span>: <span class="string">"ARN of the lambda IAM role"</span>,</div><div class="line">      <span class="string">"Value"</span>: &#123;</div><div class="line">        <span class="string">"Fn::GetAtt"</span>: [</div><div class="line">          <span class="string">"IamRoleLambda"</span>,</div><div class="line">          <span class="string">"Arn"</span></div><div class="line">        ]</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>_meta</code>ディレクトリはデフォルトで作成される.gitignoreに記載されているため、基本的にgit管理されないようになっている。</p>
<h2 id="functionを触ってみる"><a href="#functionを触ってみる" class="headerlink" title="functionを触ってみる"></a>functionを触ってみる</h2><p>API Gateway、Lambdaで実行されるfunctionを作成します。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> serverless-greeints</div><div class="line">sls <span class="keyword">function</span> create <span class="built_in">functions</span>/hello</div><div class="line">Serverless: Please, select a runtime <span class="keyword">for</span> this new Function</div><div class="line">    nodejs4.3</div><div class="line">    python2.7</div><div class="line">  &gt; nodejs (v0.10, soon to be deprecated)</div><div class="line">Serverless: For this new Function, would you like to create an Endpoint, Event, or just the Function?</div><div class="line">  &gt; Create Endpoint</div><div class="line">    Create Event</div><div class="line">    Just the Function...</div><div class="line">Serverless: Successfully created <span class="keyword">function</span>: <span class="string">"functions/hello"</span></div></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">tree -L 2 <span class="built_in">functions</span></div><div class="line"><span class="built_in">functions</span></div><div class="line">└── hello</div><div class="line">    ├── event.json</div><div class="line">    ├── handler.js</div><div class="line">    └── s-function.json</div></pre></td></tr></table></figure>
<p>Amazon API Gatewayのマッピングテンプレートとなるs-function.jsonは以下のようになる。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"hello"</span>,</div><div class="line">  <span class="string">"runtime"</span>: <span class="string">"nodejs"</span>,</div><div class="line">  <span class="string">"description"</span>: <span class="string">"Serverless Lambda function for project: serverless-greeints"</span>,</div><div class="line">  <span class="string">"customName"</span>: <span class="literal">false</span>,</div><div class="line">  <span class="string">"customRole"</span>: <span class="literal">false</span>,</div><div class="line">  <span class="string">"handler"</span>: <span class="string">"handler.handler"</span>,</div><div class="line">  <span class="string">"timeout"</span>: <span class="number">6</span>,</div><div class="line">  <span class="string">"memorySize"</span>: <span class="number">1024</span>,</div><div class="line">  <span class="string">"authorizer"</span>: &#123;&#125;,</div><div class="line">  <span class="string">"custom"</span>: &#123;</div><div class="line">    <span class="string">"excludePatterns"</span>: []</div><div class="line">  &#125;,</div><div class="line">  <span class="string">"endpoints"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="string">"path"</span>: <span class="string">"hello"</span>,</div><div class="line">      <span class="string">"method"</span>: <span class="string">"GET"</span>,</div><div class="line">      <span class="string">"type"</span>: <span class="string">"AWS"</span>,</div><div class="line">      <span class="string">"authorizationType"</span>: <span class="string">"none"</span>,</div><div class="line">      <span class="string">"authorizerFunction"</span>: <span class="literal">false</span>,</div><div class="line">      <span class="string">"apiKeyRequired"</span>: <span class="literal">false</span>,</div><div class="line">      <span class="string">"requestParameters"</span>: &#123;&#125;,</div><div class="line">      <span class="string">"requestTemplates"</span>: &#123;</div><div class="line">        <span class="string">"application/json"</span>: <span class="string">""</span></div><div class="line">      &#125;,</div><div class="line">      <span class="string">"responses"</span>: &#123;</div><div class="line">        <span class="string">"400"</span>: &#123;</div><div class="line">          <span class="string">"statusCode"</span>: <span class="string">"400"</span></div><div class="line">        &#125;,</div><div class="line">        <span class="string">"default"</span>: &#123;</div><div class="line">          <span class="string">"statusCode"</span>: <span class="string">"200"</span>,</div><div class="line">          <span class="string">"responseParameters"</span>: &#123;&#125;,</div><div class="line">          <span class="string">"responseModels"</span>: &#123;</div><div class="line">            <span class="string">"application/json;charset=UTF-8"</span>: <span class="string">"Empty"</span></div><div class="line">          &#125;,</div><div class="line">          <span class="string">"responseTemplates"</span>: &#123;</div><div class="line">            <span class="string">"application/json;charset=UTF-8"</span>: <span class="string">""</span></div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ],</div><div class="line">  <span class="string">"events"</span>: [],</div><div class="line">  <span class="string">"environment"</span>: &#123;</div><div class="line">    <span class="string">"SERVERLESS_PROJECT"</span>: <span class="string">"$&#123;project&#125;"</span>,</div><div class="line">    <span class="string">"SERVERLESS_STAGE"</span>: <span class="string">"$&#123;stage&#125;"</span>,</div><div class="line">    <span class="string">"SERVERLESS_REGION"</span>: <span class="string">"$&#123;region&#125;"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"vpc"</span>: &#123;</div><div class="line">    <span class="string">"securityGroupIds"</span>: [],</div><div class="line">    <span class="string">"subnetIds"</span>: []</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>実際にfunctionを実行する。</p>
<p>ここは本来はAPI Gateway側で実行されるのだが、Serverlessではローカルとリーモートどちらでも手元から実行できるようになっている。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># stageを選択してないのでlocalで実行</span></div><div class="line">sls <span class="keyword">function</span> run hello</div><div class="line">Serverless: Running hello...</div><div class="line">Serverless: -----------------</div><div class="line">Serverless: Success! - This Response Was Returned:</div><div class="line">Serverless: &#123;</div><div class="line">    <span class="string">"message"</span>: <span class="string">"Go Serverless! Your Lambda function executed successfully!"</span></div><div class="line"></div><div class="line"><span class="comment"># stageを選択してdeployed stageで実行</span></div><div class="line">sls <span class="keyword">function</span> run hello <span class="_">-s</span> dev</div><div class="line">Serverless: Running hello...</div><div class="line">Serverless: WARNING: This variable is not defined: region</div><div class="line">Serverless: -----------------</div><div class="line">Serverless: Success! - This Response Was Returned:</div><div class="line">Serverless: &#123;</div><div class="line">    <span class="string">"message"</span>: <span class="string">"Go Serverless! Your Lambda function executed successfully!"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>試したところで、AWSにデプロイする。<br>今回はダッシュボードとなる<code>dash</code>をデプロイする。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"> sls dash deploy</div><div class="line"> _______                             __</div><div class="line">|   _   .-----.----.--.--.-----.----|  .-----.-----.-----.</div><div class="line">|   |___|  -__|   _|  |  |  -__|   _|  |  -__|__ --|__ --|</div><div class="line">|____   |_____|__|  \___/|_____|__| |__|_____|_____|_____|</div><div class="line">|   |   |             The Serverless Application Framework</div><div class="line">|       |                           serverless.com, v0.5.5</div><div class="line">`-------<span class="string">'</span></div><div class="line"></div><div class="line">Use the &lt;up&gt;, &lt;down&gt;, &lt;pageup&gt;, &lt;pagedown&gt;, &lt;home&gt;, and &lt;end&gt; keys to navigate.</div><div class="line">Press &lt;enter&gt; to select/deselect, or &lt;space&gt; to select/deselect and move down.</div><div class="line">Press &lt;ctrl&gt; + a to select all, and &lt;ctrl&gt; + d to deselect all.</div><div class="line">Press &lt;ctrl&gt; + f to select all functions, and &lt;ctrl&gt; + e to select all endpoints.</div><div class="line">Press &lt;ctrl&gt; + &lt;enter&gt; to immediately deploy selected.</div><div class="line">Press &lt;escape&gt; to cancel.</div><div class="line"></div><div class="line"></div><div class="line">Serverless: Select the assets you wish to deploy:</div><div class="line">    hello</div><div class="line">      function - hello</div><div class="line">      endpoint - hello - GET</div><div class="line">    - - - - -</div><div class="line">  &gt; Deploy</div><div class="line">    Cancel</div><div class="line"></div><div class="line">Serverless: Deploying the specified functions in "dev" to the following regions: eu-west-1</div><div class="line">Serverless: ------------------------</div><div class="line">Serverless: Successfully deployed the following functions in "dev" to the following regions:</div><div class="line">Serverless: eu-west-1 ------------------------</div><div class="line">Serverless:   hello (serverless-greeints-hello): arn:aws:lambda:eu-west-1:0000000000:function:serverless-greeints-hello:dev</div><div class="line"></div><div class="line">Serverless: Deploying endpoints in "dev" to the following regions: eu-west-1</div><div class="line">Serverless: Successfully deployed endpoints in "dev" to the following regions:</div><div class="line">Serverless: eu-west-1 ------------------------</div><div class="line">Serverless:   GET - hello - https://xxxxxxxxx.execute-api.eu-west-1.amazonaws.com/dev/hello</div></pre></td></tr></table></figure>
<p>最後のエンドポイントが表示されているので、実際にリクエストしてみる。<br>レスポンスが帰って来ればOK。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl https://xxxxxxxxx.execute-api.eu-west-1.amazonaws.com/dev/hello</div><div class="line">&#123;<span class="string">"message"</span>:<span class="string">"Go Serverless! Your Lambda function executed successfully!"</span>&#125;</div></pre></td></tr></table></figure>
<h3 id="functionを編集する"><a href="#functionを編集する" class="headerlink" title="functionを編集する"></a>functionを編集する</h3><p>一通り触ってみたので、実際にfunctionを編集していく。<br>まず<code>s-functions.json</code>を以下のように変更する。<br>ちなみにAPI Gatewayでは<a href="http://velocity.apache.org/engine/devel/vtl-reference-guide.html" target="_blank" rel="external">VTL(Velocity Template Language)記法</a>が使われる。</p>
<p>マッピングに使用できる変数などは<a href="http://docs.aws.amazon.com/ja_jp/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html" target="_blank" rel="external">マッピングテンプレートリファレンス</a>にまとまっている。</p>
<figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="deletion">-      "requestTemplates": &#123;&#125;,</span></div><div class="line"><span class="addition">+      "requestTemplates": &#123;</span></div><div class="line"><span class="addition">+        "application/json": "&#123;\"message\": \"$input.params('message')\"&#125;"</span></div><div class="line"><span class="addition">+      &#125;,</span></div></pre></td></tr></table></figure>
<p>これでjson形式のリクエストで<code>message</code>を受け取ることができる。</p>
<p>Lambdaで実行する処理を書いていく。</p>
<p>handler.jsを編集する。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports.handler = <span class="function"><span class="keyword">function</span>(<span class="params">event, context</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> message = event.message || <span class="string">'Good bye'</span>;</div><div class="line">  <span class="keyword">return</span> context.done(<span class="literal">null</span>, &#123;</div><div class="line">    <span class="attr">message</span>: <span class="string">'Hello '</span> + message + <span class="string">' !'</span></div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>単純にリクエストを待ち受けて、簡単なメッセージを返す。<br>先ほど<code>requestTemplates</code>を修正したので、<code>message</code>を受け取ることができる。</p>
<p>手元でfunctionを実行する。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sls <span class="keyword">function</span> run hello</div><div class="line">Serverless: Running hello...</div><div class="line">Serverless: -----------------</div><div class="line">Serverless: Success! - This Response Was Returned:</div><div class="line">Serverless: &#123;</div><div class="line">    <span class="string">"message"</span>: <span class="string">"Hello Good bye !"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>また、リクエストされる<code>message</code>を渡してfunctionを実行するには、<br>event.jsonにリクエストを追加する。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="string">"message"</span>: <span class="string">"World"</span> &#125;</div></pre></td></tr></table></figure>
<p>再度、ローカルでfunctionを実行する。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sls <span class="keyword">function</span> run hello</div><div class="line">Serverless: Running hello...</div><div class="line">Serverless: -----------------</div><div class="line">Serverless: Success! - This Response Was Returned:</div><div class="line">Serverless: &#123;</div><div class="line">    <span class="string">"message"</span>: <span class="string">"Hello World !"</span></div></pre></td></tr></table></figure>
<p>想定した動きとなったので、実際にfunctionをAWS側にデプロイする。<br>ちなみに今回も<code>dash</code>(ダッシュボード)をデプロイしているが、<code>endpoint</code>のみでも良い。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">sls dash deploy</div><div class="line"> _______                             __</div><div class="line">|   _   .-----.----.--.--.-----.----|  .-----.-----.-----.</div><div class="line">|   |___|  -__|   _|  |  |  -__|   _|  |  -__|__ --|__ --|</div><div class="line">|____   |_____|__|  \___/|_____|__| |__|_____|_____|_____|</div><div class="line">|   |   |             The Serverless Application Framework</div><div class="line">|       |                           serverless.com, v0.5.5</div><div class="line">`-------<span class="string">'</span></div><div class="line"></div><div class="line">Use the &lt;up&gt;, &lt;down&gt;, &lt;pageup&gt;, &lt;pagedown&gt;, &lt;home&gt;, and &lt;end&gt; keys to navigate.</div><div class="line">Press &lt;enter&gt; to select/deselect, or &lt;space&gt; to select/deselect and move down.</div><div class="line">Press &lt;ctrl&gt; + a to select all, and &lt;ctrl&gt; + d to deselect all.</div><div class="line">Press &lt;ctrl&gt; + f to select all functions, and &lt;ctrl&gt; + e to select all endpoints.</div><div class="line">Press &lt;ctrl&gt; + &lt;enter&gt; to immediately deploy selected.</div><div class="line">Press &lt;escape&gt; to cancel.</div><div class="line"></div><div class="line"></div><div class="line">Serverless: Select the assets you wish to deploy:</div><div class="line">    hello</div><div class="line">      function - hello</div><div class="line">      endpoint - hello - GET</div><div class="line">    - - - - -</div><div class="line">  &gt; Deploy</div><div class="line">    Cancel</div><div class="line"></div><div class="line">Serverless: Deploying the specified functions in "dev" to the following regions: eu-west-1</div><div class="line">Serverless: ------------------------</div><div class="line">Serverless: Successfully deployed the following functions in "dev" to the following regions:</div><div class="line">Serverless: eu-west-1 ------------------------</div><div class="line">Serverless:   hello (serverless-greeints-hello): arn:aws:lambda:eu-west-1:0000000000:function:serverless-greeints-hello:dev</div><div class="line"></div><div class="line">Serverless: Deploying endpoints in "dev" to the following regions: eu-west-1</div><div class="line">Serverless: Successfully deployed endpoints in "dev" to the following regions:</div><div class="line">Serverless: eu-west-1 ------------------------</div><div class="line">Serverless:   GET - hello - https://xxxxxxxxx.execute-api.eu-west-1.amazonaws.com/dev/hello</div></pre></td></tr></table></figure>
<p>実際にリクエストをしてみる。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">curl https://xxxxxxxxx.execute-api.eu-west-1.amazonaws.com/dev/hello</div><div class="line">&#123;<span class="string">"message"</span>:<span class="string">"Hello Good bye !"</span>&#125;%</div><div class="line"></div><div class="line">curl https://xxxxxxxxx.execute-api.eu-west-1.amazonaws.com/dev/hello\?message\=World</div><div class="line">&#123;<span class="string">"message"</span>:<span class="string">"Hello World !"</span>&#125;%</div></pre></td></tr></table></figure>
<p>ということで、Amazon API GatewayとAWS Lambdaをひととおり触った。</p>
<h3 id="POSTメソッドに変更する"><a href="#POSTメソッドに変更する" class="headerlink" title="POSTメソッドに変更する"></a>POSTメソッドに変更する</h3><figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="deletion">-      "method": "GET",</span></div><div class="line"><span class="addition">+      "method": "POST",</span></div><div class="line"></div><div class="line"><span class="deletion">-      "requestTemplates": &#123;</span></div><div class="line"><span class="deletion">-        "application/json": "&#123;\"message\": \"$input.params('message')\"&#125;"</span></div><div class="line"><span class="deletion">-      &#125;,</span></div><div class="line"><span class="addition">+      "requestTemplates": &#123;</span></div><div class="line"><span class="addition">+        "application/json": "&#123;\"message\": \"$util.escapeJavaScript($input.json('$.message'))\"&#125;"</span></div><div class="line"><span class="addition">+      &#125;,</span></div></pre></td></tr></table></figure>
<p>jsonのpostデータをescape処理して受け取ります。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sls endpoint deploy</div><div class="line"></div><div class="line">Serverless: Deploying endpoints <span class="keyword">in</span> <span class="string">"dev"</span> to the following regions: eu-west-1</div><div class="line">Serverless: Successfully deployed endpoints <span class="keyword">in</span> <span class="string">"dev"</span> to the following regions:</div><div class="line">Serverless: eu-west-1 ------------------------</div><div class="line">Serverless:   POST - hello - https://xxxxxxxxx.execute-api.eu-west-1.amazonaws.com/dev/hello</div></pre></td></tr></table></figure>
<p>最後にPOSTのエンドポイントが表示された。<br>実際にリクエストを投げてみる。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl -H <span class="string">"Content-type: application/json"</span> -X POST <span class="_">-d</span> <span class="string">"&#123;\"message\": \"World\"&#125;"</span> https://xxxxxxxxx.execute-api.eu-west-1.amazonaws.com/dev/hello</div><div class="line">&#123;<span class="string">"message"</span>:<span class="string">"Hello \"World\" !"</span>&#125;%</div></pre></td></tr></table></figure>
<p>問題なくレスポンスが帰ってきた。</p>
<h3 id="Slack-Bot-を作ってみる"><a href="#Slack-Bot-を作ってみる" class="headerlink" title="Slack Bot を作ってみる"></a>Slack Bot を作ってみる</h3><p>ここまで出来たので、これらを使ってSlack Botを作ってみる。<br>まずは<a href="https://api.slack.com/web" target="_blank" rel="external">api.slack.com</a>からTokenを発行する。</p>
<p>続いて、AWS Lambdaで実行される<code>handler.js</code>を編集する。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> https = <span class="built_in">require</span>(<span class="string">'https'</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">parse</span>(<span class="params">data, separator</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> res = &#123;&#125;;</div><div class="line">  data.body.split(<span class="string">'&amp;'</span>).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> tmp = val.split(separator, <span class="number">2</span>);</div><div class="line">    <span class="keyword">var</span> k = tmp[<span class="number">0</span>],</div><div class="line">        v = tmp[<span class="number">1</span>];</div><div class="line">    res[k] = v;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports.handler = <span class="function"><span class="keyword">function</span>(<span class="params">event, context</span>) </span>&#123;</div><div class="line">  <span class="comment">// Incoming Web Hook のURL</span></div><div class="line">  <span class="keyword">var</span> SLACK_HOOKURL = SLACK_INCCOMING_WEBHOOK_URL;</div><div class="line">  <span class="keyword">var</span> SLACK_TOKEN = SLACK_TOKEN;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> data = parse(event, <span class="string">'='</span>);</div><div class="line">  <span class="keyword">var</span> user_name = data.user_name;</div><div class="line">  <span class="keyword">var</span> response_text = <span class="built_in">decodeURIComponent</span>(data.text.replace(data.trigger_word, <span class="string">''</span>).replace(<span class="regexp">/\+/g</span>, <span class="string">' '</span>));</div><div class="line"></div><div class="line">  <span class="keyword">if</span>(data.token !== SLACK_TOKEN) &#123;</div><div class="line">    <span class="keyword">return</span> context.done(&#123;<span class="string">'text'</span>: <span class="string">':sob: Failed Invalid Token'</span> &#125;, <span class="literal">null</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> message = <span class="string">":hand: @"</span> + user_name + <span class="string">" Hello "</span> + (response_text || <span class="string">"Good bye"</span>);</div><div class="line">  <span class="keyword">var</span> options = &#123;</div><div class="line">    <span class="attr">hostname</span>: <span class="string">'hooks.slack.com'</span>,</div><div class="line">    <span class="attr">port</span>: <span class="number">443</span>,</div><div class="line">    <span class="attr">path</span>: SLACK_HOOKURL,</div><div class="line">    <span class="attr">method</span>: <span class="string">'POST'</span>,</div><div class="line">    <span class="attr">headers</span>: &#123; <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>, &#125;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="comment">// @metionを使うために`link_names`を設定</span></div><div class="line">  <span class="keyword">var</span> data = &#123;</div><div class="line">    <span class="string">"text"</span>: message,</div><div class="line">    <span class="string">"link_names"</span>: <span class="number">1</span>,</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> req = https.request(options, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</div><div class="line">    res</div><div class="line">    .on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</div><div class="line">        <span class="comment">// If success, post a response back into the Slack channel</span></div><div class="line">        <span class="keyword">return</span> context.done(<span class="literal">null</span>, &#123;<span class="string">'text'</span>: <span class="string">':ok_woman: Success'</span>&#125;);</div><div class="line">    &#125;)</div><div class="line">    .on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> context.done(&#123;<span class="string">'text'</span>: <span class="string">':sob: Failed '</span> + e.message&#125;, <span class="literal">null</span>);</div><div class="line">    &#125;)</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  req.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> context.done(&#123;<span class="string">'text'</span>: <span class="string">':sob: Failed '</span> + e.message&#125;, <span class="literal">null</span>);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  req.write(<span class="built_in">JSON</span>.stringify(data));</div><div class="line">  req.end();</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>シンプルにslack apiを実行するだけのBotにした。</p>
<p>次にAWSからSlack Botに対して送られたメッセージにHookする<a href="https://api.slack.com/incoming-webhooks" target="_blank" rel="external">Incoming WebHook</a>を作成する。</p>
<p>今回は設定項目を以下のようにした</p>
<table>
<thead>
<tr>
<th>項目</th>
<th>値</th>
</tr>
</thead>
<tbody>
<tr>
<td>Post to Channel</td>
<td>#general (default)</td>
</tr>
<tr>
<td>Webhook URL</td>
<td><a href="https://hooks.slack.com/services/XXXXXXXX/YYYYYYYYY" target="_blank" rel="external">https://hooks.slack.com/services/XXXXXXXX/YYYYYYYYY</a></td>
</tr>
<tr>
<td>Customize Name</td>
<td>incoming-webhook (default)</td>
</tr>
</tbody>
</table>
<p>ここで作成したURLに対してPOSTすることでSlackに通知される。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X POST -H <span class="string">'Content-type: application/json'</span> --data <span class="string">'&#123;"text": "@here This is posted to &lt;#general&gt; and comes from *monkey-bot*.", "channel": "#general", "username": "monkey-bot", "icon_emoji": ":monkey_face:", "link_names": 1&#125;'</span> https://hooks.slack.com/services/XXXXXX/YYYYYY/ZZZZZZ</div></pre></td></tr></table></figure>
<p><img src="/images/2016/05/12/serverless6.png" alt=""></p>
<p>続いて、Slack BotがメッセージをAWSに送信するために使うHookとなる<a href="https://api.slack.com/outgoing-webhooks" target="_blank" rel="external">Outgoing WebHook</a>を作成する。</p>
<table>
<thead>
<tr>
<th>項目</th>
<th>値</th>
</tr>
</thead>
<tbody>
<tr>
<td>Channel</td>
<td>#general (default)</td>
</tr>
<tr>
<td>Trigger Word(s)</td>
<td>greet</td>
</tr>
<tr>
<td>URL(s)</td>
<td><a href="https://xxxxxxxxx.execute-api.eu-west-1.amazonaws.com/dev/hello" target="_blank" rel="external">https://xxxxxxxxx.execute-api.eu-west-1.amazonaws.com/dev/hello</a><br>(作成したGate Way API URL)</td>
</tr>
<tr>
<td>Token</td>
<td>generateされているtoken</td>
</tr>
<tr>
<td>Customize Name</td>
<td>outgoing-webhook (default)</td>
</tr>
</tbody>
</table>
<p><code>Trigger Word</code>でslackに投稿すると、URLにpostされるようになる。</p>
<p>ここまでできたので、実際にBotで遊んでみる。</p>
<p><img src="/images/2016/05/12/serverless7.png" alt=""></p>
<p>ということで、Serverless を使って、Amazon Gate Way API &amp; AWS LambdaでSlack Botができた。<br>サーバーを作り、管理することないため、アプリケーションに注力できるたりが素晴らしい。</p>
<p>AWS Lambdaのようなイベントドリブンなサービスを使うことで、Botやインターネットに接続する機器からのリクエストを受け付けるアプリケーションが容易に作成できる。<br>またイベント数によりオートスケールしていくので、サーバー管理も気にすることはない。</p>
<p>AWS Lambdaの他にもMicrosoftは<a href="https://azure.microsoft.com/ja-jp/documentation/services/functions/" target="_blank" rel="external">Azure Functions</a>というイベント駆動システムを提供している。</p>
<p>今回利用したServerlessはAmazon API GatewayとAWS Lambdaを中心としたイベントドリブンなサービスを開発するフレームワークだったが、AIやBotの盛り上がりから今後もっと様々なプロジェクト生まれていきそうな感じがする。</p>
<h3 id="参考にしたページ"><a href="#参考にしたページ" class="headerlink" title="参考にしたページ"></a>参考にしたページ</h3><p><a href="http://docs.serverless.com/docs/installing-serverless" target="_blank" rel="external">serverless docs</a><br><a href="http://davidcai.github.io/blog/posts/serverless-and-cors/" target="_blank" rel="external">Serverless Framework &amp; AWS API Gateway CORS</a><br><a href="https://docs.aws.amazon.com/ja_jp/apigateway/latest/developerguide/welcome.html" target="_blank" rel="external">Amazon API Gateway とは?</a><br><a href="http://docs.aws.amazon.com/ja_jp/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html" target="_blank" rel="external">API Gateway のマッピングテンプレートリファレンス</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;サーバーレスでアプリケーションを構築するためのNode.jsのフレームワーク&lt;a href=&quot;&quot;&gt;Serverless&lt;/a&gt;を使って、&lt;br&gt;&lt;a href=&quot;https://aws.amazon.com/lambda/&quot;&gt;AWS Lambda&lt;/a&gt;と&lt;a href=&quot;https://aws.amazon.com/jp/api-gateway/&quot;&gt;Amazon API Gateway&lt;/a&gt;をつかってSlack Botを試してみたときのメモ。&lt;/p&gt;
    
    </summary>
    
      <category term="memo" scheme="http://blog.kazu69.net/categories/memo/"/>
    
    
  </entry>
  
  <entry>
    <title>Google AnalyticsのMeasurement ProtocolでJavaScript無効なユーザーをトラッキング</title>
    <link href="http://blog.kazu69.net/2016/05/04/tracking-noscript-user-measurement-protocol/"/>
    <id>http://blog.kazu69.net/2016/05/04/tracking-noscript-user-measurement-protocol/</id>
    <published>2016-05-04T02:43:25.000Z</published>
    <updated>2016-05-10T11:25:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>これまでanalyticsdではJavaScriptの無効のユーザー、メールの開封率、サーバーイベント、POSシステムなどは通常のトラッキングタグでは計測できなかった。<br>しかし、新たに追加された<a href="https://developers.google.com/analytics/devguides/collection/protocol/v1/" target="_blank" rel="external">Measurement Protocol</a>を使うことで、直接イベントをトラッキングができる。</p>
<a id="more"></a>
<p>Measurement Protocolはanalytics.jsなどの上位に位置する低レベルのプロトコルであり、<br>直接analyticsのAPIを実行できるため自由度が高い。</p>
<p><img src="/images/2016/05/04/google-analytics.png" alt=""></p>
<blockquote>
<p>developers.google.com/analytics/devguides/platformより</p>
</blockquote>
<p>ちなみに<code>ga.js</code>はMeasurement Protocolを介してないが、ga.jsを使っているTracking IDでも問題なく利用できる。</p>
<hr>
<p>ウェブアプリケーションのnoscriptのユーザー(crawlerやbot)のアクセスをトラッキングする場合、<br>JavaScriptが無効であるため通常のTrackingタグは利用できない。<br>そこで、Measurement Protocolを使い計測する。</p>
<p>Measurement Protocolに渡すべきパラメーターは<a href="https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters" target="_blank" rel="external">Measurement Protocol のパラメータ リファレンス</a>を参考にする。</p>
<p>いずれのイベントでも必須になるパラメーターは</p>
<table>
<thead>
<tr>
<th>パラメーター</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>v</td>
<td>バージョン</td>
</tr>
<tr>
<td>t</td>
<td>ヒットタイプ (pageview, screenview, event, transaction, item, social, exception, timing)</td>
</tr>
<tr>
<td>tid</td>
<td>トラッキングID (UA-XXXX-Y)</td>
</tr>
<tr>
<td>cid</td>
<td>クライアントID</td>
</tr>
</tbody>
</table>
<p>あとはイベントに応じて組み合わせることになる。</p>
<p>実際にパラメーターが正しいかチェックするために<a href="https://ga-dev-tools.appspot.com/hit-builder/" target="_blank" rel="external">Hit Builder</a>が提供されているので、試してみると分かりやすい。</p>
<p>実際にanalytics上でどのように解析されるかを見る場合は、Hit Builderでリクエストして、<br>analyticsのリアルタイム解析で結果をみると効率的だった。</p>
<p>noscriptユーザーに対して次のようなパラメーターを設定する。</p>
<table>
<thead>
<tr>
<th>パラメーター</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>v</td>
<td>1</td>
</tr>
<tr>
<td>tid</td>
<td>トラッキングID (UA-XXXX-Y)</td>
</tr>
<tr>
<td>cid</td>
<td>クライアントID</td>
</tr>
<tr>
<td>t</td>
<td>event</td>
</tr>
<tr>
<td>ec</td>
<td>イベント カテゴリ</td>
</tr>
<tr>
<td>ea</td>
<td>イベント アクション</td>
</tr>
<tr>
<td>el</td>
<td>イベントラベル</td>
</tr>
</tbody>
</table>
<p>上記のパラメーターでPOSTまたはGETできればよいトラッキングできるので、</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">POST /collect HTTP/1.1</div><div class="line">Host: www.google-analytics.com</div><div class="line"></div><div class="line">v=1</div><div class="line">&amp;tid=UA-XXXXX-Y</div><div class="line">&amp;cid=xxxxxxxxxx</div><div class="line">&amp;t=event</div><div class="line">&amp;ec=JavaScript_Disabled</div><div class="line">&amp;ea=pageview</div><div class="line">&amp;el=UserAgent+ページパス</div></pre></td></tr></table></figure>
<p>または</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">GET /collect?v=1&amp;t=event&amp;tid=UA-XXXXX-Y-1&amp;cid=xxxxxxxxxx&amp;ea=pageview&amp;ec=JS_Disabled&amp;ea=pageview&amp;el=UserAgent+ページパス HTTP/1.1</div><div class="line">Host: http://www.google-analytics.com</div></pre></td></tr></table></figure>
<p>が実行できれば良い。<br>実際にHit Builderで試してみると、次のようになる。</p>
<p><img src="/images/2016/05/04/hit_builder1.png" alt=""><br><img src="/images/2016/05/04/hit_builder2.png" alt=""></p>
<p>例えばPHPのアプリケーションでこれを用いる場合、</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCid</span><span class="params">()</span> </span>&#123;</div><div class="line">    $cookie = $_COOKIE[<span class="string">'_ga'</span>];</div><div class="line">    <span class="keyword">if</span>(is_null($cookie)) &#123;</div><div class="line">        $cid = createCid();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        $cookieArray = split(<span class="string">'[\.]'</span>, $cookie, <span class="number">4</span>);</div><div class="line">        $cid = <span class="string">''</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(!$cookieArray[<span class="number">2</span>] &amp;&amp; !$cookieArray[<span class="number">3</span>]) &#123; $cid = $cookieArray[<span class="number">2</span>] . <span class="string">'.'</span> . $cookieArray[<span class="number">3</span>]; &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> $cid;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCid</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> sprintf(<span class="string">'%04x%04x-%04x-%04x-%04x-%04x%04x%04x'</span>,</div><div class="line">        mt_rand( <span class="number">0</span>, <span class="number">0xffff</span> ),</div><div class="line">        mt_rand( <span class="number">0</span>, <span class="number">0xffff</span> ),</div><div class="line">        mt_rand( <span class="number">0</span>, <span class="number">0xffff</span> ),</div><div class="line">        mt_rand( <span class="number">0</span>, <span class="number">0x0fff</span> ) | <span class="number">0x4000</span>,</div><div class="line">        mt_rand( <span class="number">0</span>, <span class="number">0x3fff</span> ) | <span class="number">0x8000</span>,</div><div class="line">        mt_rand( <span class="number">0</span>, <span class="number">0xffff</span> ),</div><div class="line">        mt_rand( <span class="number">0</span>, <span class="number">0xffff</span> ),</div><div class="line">        mt_rand( <span class="number">0</span>, <span class="number">0xffff</span> )</div><div class="line">    );</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">trackingUrl</span><span class="params">($data)</span> </span>&#123;</div><div class="line">    $result = <span class="string">'https://www.google-analytics.com/collect'</span>;</div><div class="line">    $result .= <span class="string">'?payload_data&amp;'</span>;</div><div class="line">    $result .= http_build_query($data);</div><div class="line">    <span class="keyword">return</span> $result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// send pageview</span></div><div class="line">$pageview_data = <span class="keyword">array</span>(</div><div class="line">    <span class="string">'v'</span>   =&gt; <span class="number">1</span>,</div><div class="line">    <span class="string">'tid'</span> =&gt; <span class="string">'UA-XXXXXXX-X'</span>,          <span class="comment">// tracking id</span></div><div class="line">    <span class="string">'cid'</span> =&gt; getCid(),                <span class="comment">// client id</span></div><div class="line">    <span class="string">'t'</span>   =&gt; <span class="string">'pageview'</span>,              <span class="comment">// event type</span></div><div class="line">    <span class="string">'dh'</span>  =&gt; $_SERVER[<span class="string">'SERVER_NAME'</span>], <span class="comment">// Hostname</span></div><div class="line">    <span class="string">'dp'</span>  =&gt; $_SERVER[<span class="string">'REQUEST_URI'</span>], <span class="comment">// Page</span></div><div class="line">    <span class="string">'dt'</span>  =&gt; <span class="string">'Page Title'</span>             <span class="comment">// Title</span></div><div class="line">);</div><div class="line"></div><div class="line"><span class="comment">// send custom event</span></div><div class="line">$event_data = <span class="keyword">array</span>(</div><div class="line">    <span class="string">'v'</span>   =&gt; <span class="number">1</span>,</div><div class="line">    <span class="string">'tid'</span> =&gt; <span class="string">'UA-XXXXXXX-X'</span>,             <span class="comment">// tracking id</span></div><div class="line">    <span class="string">'cid'</span> =&gt; getCid(),                   <span class="comment">// client id</span></div><div class="line">    <span class="string">'t'</span>   =&gt; <span class="string">'event'</span>,                    <span class="comment">// event type</span></div><div class="line">    <span class="string">'ec'</span>  =&gt; <span class="string">'JavaScript_Disabled'</span>,      <span class="comment">//Category</span></div><div class="line">    <span class="string">'ea'</span>  =&gt; <span class="string">'pageview'</span>,                 <span class="comment">//Action</span></div><div class="line">    <span class="string">'el'</span>  =&gt; $_SERVER[<span class="string">'HTTP_USER_AGENT'</span>] <span class="comment">//Label</span></div><div class="line">);</div></pre></td></tr></table></figure>
<p>cidはUUID(バージョン4)なのでphpでは<a href="http://php.net/manual/ja/function.uniqid.php#94959" target="_blank" rel="external">uniqid</a>を参考にした。</p>
<p>あとは上記をHTMLに組み込んでやるだけ。<br>仕組みは簡単でnoscriptタグ内でimgタグなどで出力してMeasurement Protocolに対してGETを実行するだけでよい。<br>(ajaxでGETやPOSTするという方法もある)</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">noscript</span> <span class="attr">class</span>=<span class="string">"javascript-disabled-tracking"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&lt;?php echo trackingUrl($pageview_data); ?&gt;"</span> <span class="attr">width</span>=<span class="string">"0"</span> <span class="attr">height</span>=<span class="string">"0"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&lt;?php echo trackingUrl($event_data); ?&gt;"</span> <span class="attr">width</span>=<span class="string">"0"</span> <span class="attr">height</span>=<span class="string">"0"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></div></pre></td></tr></table></figure>
<p>analyticsは独自にログ解析用のサービスを構築・運用することに比べると低コストでログ解析基盤が手に入る。<br>限度はあるけど、無料ながらも高機能なのでそこそこの規模でも問題なく利用できる。<br>それに加えて、Measurement Protocolのように直接APIを実行できる機能となると、<br>ネットに接続できれば画面のないようなものでもイベントをトラッキングできるので、ますますanalyticsの価値が高まりそうだ。</p>
<h3 id="参考にしたページ"><a href="#参考にしたページ" class="headerlink" title="参考にしたページ"></a>参考にしたページ</h3><p><a href="http://php.net/manual/ja/function.uniqid.php#94959" target="_blank" rel="external">PHP uniqid</a><br><a href="https://developers.google.com/analytics/devguides/platform/" target="_blank" rel="external">Google アナリティクスの使用方法を学習する</a><br><a href="https://developers.google.com/analytics/devguides/collection/protocol/v1/" target="_blank" rel="external">Measurement Protocol の概要</a><br><a href="https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters" target="_blank" rel="external">Measurement Protocol のパラメータ リファレンス</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;これまでanalyticsdではJavaScriptの無効のユーザー、メールの開封率、サーバーイベント、POSシステムなどは通常のトラッキングタグでは計測できなかった。&lt;br&gt;しかし、新たに追加された&lt;a href=&quot;https://developers.google.com/analytics/devguides/collection/protocol/v1/&quot;&gt;Measurement Protocol&lt;/a&gt;を使うことで、直接イベントをトラッキングができる。&lt;/p&gt;
    
    </summary>
    
      <category term="tec" scheme="http://blog.kazu69.net/categories/tec/"/>
    
    
  </entry>
  
  <entry>
    <title>Dockerコンテナ内でのnpm installを改善してみる</title>
    <link href="http://blog.kazu69.net/2016/05/02/npm-install-speedup-in-docker/"/>
    <id>http://blog.kazu69.net/2016/05/02/npm-install-speedup-in-docker/</id>
    <published>2016-05-02T10:12:54.000Z</published>
    <updated>2016-05-10T12:57:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>開発やCIでやDockerイメージをbuildする際にnpm installすると、cacheがないため時間がかかる。<br>これはpackageの数が多くなると結構辛いことになるので、なんとかできないかと試してみた。</p>
<a id="more"></a>
<p>以下のような適当なpackageを使って試してみる。</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"example-project"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.1"</span>,</div><div class="line">  <span class="attr">"description"</span>: <span class="string">"example"</span>,</div><div class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"author"</span>: <span class="string">"kazu69"</span>,</div><div class="line">  <span class="attr">"license"</span>: <span class="string">"MIT"</span>,</div><div class="line">  <span class="attr">"dependencies"</span>: &#123;</div><div class="line">    <span class="attr">"express"</span>: <span class="string">"^4.13.4"</span>,</div><div class="line">    <span class="attr">"react"</span>: <span class="string">"^15.0.1"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"devDependencies"</span>: &#123;</div><div class="line">    <span class="attr">"babel"</span>: <span class="string">"^6.5.2"</span>,</div><div class="line">    <span class="attr">"browserify"</span>: <span class="string">"^13.0.0"</span>,</div><div class="line">    <span class="attr">"eslint"</span>: <span class="string">"^2.8.0"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Alpine-Linuxを利用する"><a href="#Alpine-Linuxを利用する" class="headerlink" title="Alpine Linuxを利用する"></a>Alpine Linuxを利用する</h2><p>そもそものDcokerイメージを最小にしておくこと。<br><a href="https://hub.docker.com/_/alpine/" target="_blank" rel="external">Alpine Linux</a>でイメージを作成する。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># application.dockerfile</div><div class="line">FROM alpine</div><div class="line">RUN apk add --update nodejs bash</div><div class="line"></div><div class="line">WORKDIR /var/</div><div class="line">ADD ./package.json .</div></pre></td></tr></table></figure>
<p>この状態で計測する。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">time npm i</div><div class="line"></div><div class="line">real    0m29.258s</div><div class="line">user    0m0.000s</div><div class="line">sys 0m0.000s</div></pre></td></tr></table></figure>
<h2 id="Install-Progressを無効化する"><a href="#Install-Progressを無効化する" class="headerlink" title="Install Progressを無効化する"></a>Install Progressを無効化する</h2><p>npm install時に<a href="https://github.com/npm/npm/issues/11283" target="_blank" rel="external">Progress Barを出すと遅くなる</a>ので、非表示にする。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">time npm i --production --no-progress</div><div class="line"></div><div class="line">real    0m28.150s</div><div class="line">user    0m0.010s</div><div class="line">sys 0m0.000s</div></pre></td></tr></table></figure>
<h2 id="SSLを利用しない"><a href="#SSLを利用しない" class="headerlink" title="SSLを利用しない"></a>SSLを利用しない</h2><p>もし可能ならばSSLを使わない、proxyをつかってhttpのregistryを使う。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">time npm i --no-progress --registry http://registry.npmjs.org/</div><div class="line"></div><div class="line">real    0m26.405s</div><div class="line">user    0m0.000s</div><div class="line">sys 0m0.000s</div></pre></td></tr></table></figure>
<h2 id="Cache-Container-を使う"><a href="#Cache-Container-を使う" class="headerlink" title="Cache Container を使う"></a>Cache Container を使う</h2><p>キャッシュコンテナを利用するために、簡単なpackageをキャッシュするだけなコンテナを作成。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># cache.dockerfile</div><div class="line">FROM alpine</div><div class="line">RUN apk add --update nodejs bash</div><div class="line"></div><div class="line">WORKDIR /var/</div><div class="line">ADD ./package.json .</div><div class="line">RUN npm i</div><div class="line">VOLUME /var/node_modules</div></pre></td></tr></table></figure>
<p>このコンテナのnode_modulesディレクトリをマウントする。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">docker build -t cache <span class="_">-f</span> cache.dockerfile .</div><div class="line">docker run <span class="_">-d</span> --name cache_volume -it cache:latest /bin/bash</div><div class="line"></div><div class="line">docker ps</div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</div><div class="line">621b7fe67bc8        cache:latest        <span class="string">"/bin/bash"</span>         3 seconds ago       Up 2 seconds                            cache_volume</div><div class="line"></div><div class="line">docker run --volumes-from cache_volume -it ci:latest /bin/bash</div></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">time npm i</div><div class="line"></div><div class="line">real    0m2.270s</div><div class="line">user    0m0.000s</div><div class="line">sys 0m0.000s</div></pre></td></tr></table></figure>
<p>CIなどでDockerを使っている場合はcacheコンテナをサポートしていると思うので、<br>cacheコンテナを利用すると圧倒的に改善できそう。</p>
<p>毎回キャッシュコンテナにinstallしてるのつらいので、package.jsonに変更ある場合のみキャッシュコンテナをupdateする必要がある。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git diff --name-only master $(git rev-parse --abbrev-ref HEAD) | grep -q package.json</div><div class="line"><span class="built_in">test</span> $? <span class="_">-eq</span> 0 &amp;&amp; \</div><div class="line">docker <span class="built_in">exec</span> -t cache npm i --no-progress --registry http://registry.npmjs.org/</div></pre></td></tr></table></figure>
<h3 id="そのほか"><a href="#そのほか" class="headerlink" title="そのほか"></a>そのほか</h3><p>一度キャッシュしてしまえば、以下のように<br><strong>cache-min</strong> オプションに十分に大きな値を渡す。<br>cache-minはキャッシュを再チェックするまでの最小時間となるので、これによりキャッシュからインストールするようにできる。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i --cache-min 999999</div></pre></td></tr></table></figure>
<p>また、devDependenciesが不要ならば<strong>production</strong>オプションを追加して</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i --production</div></pre></td></tr></table></figure>
<p>でdependenciesのみインストールすると良さそう。</p>
<h2 id="参考にしたページ"><a href="#参考にしたページ" class="headerlink" title="参考にしたページ"></a>参考にしたページ</h2><p><a href="https://github.com/npm/npm/issues/8581" target="_blank" rel="external">cache-min &amp; unknown version</a><br><a href="https://github.com/npm/npm/issues/2568" target="_blank" rel="external">feature request: force install from cache.</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;開発やCIでやDockerイメージをbuildする際にnpm installすると、cacheがないため時間がかかる。&lt;br&gt;これはpackageの数が多くなると結構辛いことになるので、なんとかできないかと試してみた。&lt;/p&gt;
    
    </summary>
    
      <category term="tec" scheme="http://blog.kazu69.net/categories/tec/"/>
    
    
  </entry>
  
  <entry>
    <title>PHPアプリケーションでのReact.jsのサーバーレンダリング考える</title>
    <link href="http://blog.kazu69.net/2016/04/17/rendering_reactjs_template_server_side_in_php_application/"/>
    <id>http://blog.kazu69.net/2016/04/17/rendering_reactjs_template_server_side_in_php_application/</id>
    <published>2016-04-17T09:08:21.000Z</published>
    <updated>2016-04-26T04:59:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>PHPでReact.jsなアプリケーションを導入する時に眺めてみた時のメモ。</p>
<a id="more"></a>
<p>まず、ブラウザからのリクエストに対して、サーバー側でDOMをレンダリングする必要がある。<br>これは、ブラウザでDOMレンダリングする場合は、サーチエンジンのアクセスに対して、<br>空の要素を返してしまう。<br>そのため、その結果がインデックスされるとSEO的によろしくないからである。</p>
<p>そこで、どこでReact.jsを実行してDOMを生成するのかを考える必要がある。</p>
<ul>
<li>PHPでJSを実行する</li>
<li>React.jsをレンダリングする小さなアプリケーションに処理を委譲する</li>
</ul>
<p>の2つのパターンを考えられる。</p>
<p>例として簡単なView Classのテンプレートをレンダリングする。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.countUp = <span class="keyword">this</span>.countUp.bind(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">this</span>.countDown = <span class="keyword">this</span>.countDown.bind(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">this</span>.state = &#123;</div><div class="line">      <span class="attr">count</span>: <span class="keyword">this</span>.props.count</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">   <span class="keyword">static</span> defaultProps = &#123;</div><div class="line">    <span class="attr">count</span>: <span class="number">0</span></div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">static</span> propTypes = &#123;</div><div class="line">    <span class="attr">count</span>: React.PropTypes.number.isRequired</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  countUp(event) &#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">count</span>: <span class="keyword">this</span>.state.count + <span class="number">1</span>&#125;);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  countDown(event) &#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">count</span>: <span class="keyword">this</span>.state.count - <span class="number">1</span>&#125;);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span>(</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">'counter'</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">'count'</span>&gt;</span></div><div class="line">          &#123;this.state.count&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.countUp.bind(this)&#125;</span>&gt;</span> count up <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.countDown.bind(this)&#125;</span>&gt;</span> count down <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="PHPでJSを実行する"><a href="#PHPでJSを実行する" class="headerlink" title="PHPでJSを実行する"></a>PHPでJSを実行する</h3><p>PHPに<a href="http://php.net/manual/ja/book.v8js.php" target="_blank" rel="external">V8jsモジュール</a>を追加することで、<br>jsをコンパイルして実行できるようになる。<br>(require: PHP &gt;= 5.3.3)</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># install v8js</span></div><div class="line">pecl install v8js-0.1.3 \</div><div class="line"><span class="built_in">echo</span> <span class="string">"extension=v8js.so"</span> &gt;&gt; /etc/php5/cli/php.ini</div><div class="line"></div><div class="line"><span class="comment"># install composer</span></div><div class="line">curl <span class="_">-s</span>S https://getcomposer.org/installer | php -- --install-dir=/usr/<span class="built_in">local</span>/bin --filename=composer</div><div class="line"></div><div class="line"><span class="comment"># オプションを追加してconfigure</span></div><div class="line">./configure --with-freetype-dir=/usr/include/ \</div><div class="line">            --with-jpeg-dir=/usr/include/ \</div><div class="line">            --with-gd \</div><div class="line">            --with-mcrypt \</div><div class="line">            --with-libzip \</div><div class="line">            --with-bz2 \</div><div class="line">            --enable-mbstring \</div><div class="line">            --enable-v8js</div></pre></td></tr></table></figure>
<p>通常ブラウザ向けにReact.jsを提供するのと同じように、<br><a href="http://browserify.org/" target="_blank" rel="external">Browserify</a>を使いbundleし、v8jsでphpを実行する。</p>
<p>最終的に<strong>renderToString</strong>でreactIdを割り振られたDOMを出力する。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require_once</span> dirname(<span class="keyword">__FILE__</span>) . <span class="string">'/../vendor/autoload.php'</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_markup</span><span class="params">($component, $prop)</span> </span>&#123;</div><div class="line">  $default_prop = json_encode($prop);</div><div class="line">  $v8 = <span class="keyword">new</span> V8Js();</div><div class="line">  $js[] = <span class="string">"var global = global || this, self = self || this, window = window || this;"</span>;</div><div class="line">  $js[] = file_get_contents(<span class="string">'js/bundle.min.js'</span>, <span class="keyword">true</span>);</div><div class="line">  $js[] = <span class="string">"print(ReactDomServer.renderToString(React.createElement($&#123;component&#125;, $&#123;default_prop&#125;)));"</span>;</div><div class="line">  $code = implode(<span class="string">";\n"</span>, $js);</div><div class="line">  ob_start();</div><div class="line">  $v8-&gt;executeString($code);</div><div class="line">  <span class="keyword">return</span> ob_get_clean();</div><div class="line">&#125;</div><div class="line">$component = <span class="string">'Counter'</span>;</div><div class="line">$prop = [<span class="string">'count'</span> =&gt; <span class="number">3</span>];</div><div class="line">$markup = get_markup($component, $prop);</div></pre></td></tr></table></figure>
<p>Facebookの<a href="https://github.com/reactjs/react-php-v8js" target="_blank" rel="external">react-php-v8js</a>をそのままに処理を書いた。</p>
<p>PHPにモジュールを追加できるのであれば、PHP側でtemplateを返すほうが容易である。<br>とくにreact-php-v8jsなどを使うことで簡単に実装はできそう。</p>
<h3 id="テンプレート処理をレンダリングアプリケーションに委譲する"><a href="#テンプレート処理をレンダリングアプリケーションに委譲する" class="headerlink" title="テンプレート処理をレンダリングアプリケーションに委譲する"></a>テンプレート処理をレンダリングアプリケーションに委譲する</h3><p>稼動中でPHPアプリケーションに対して手を入れることができない場合などは、<br>このパターンを採用することが考えられる。<br>実際にReact.jsを実行するのはnodejsで書かれたサーバーになる。</p>
<p>PHPアプリケーションからはHTTPリクエストを送信するだけとなる。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$context = stream_context_create(</div><div class="line">    <span class="keyword">array</span>(</div><div class="line">        <span class="string">'http'</span> =&gt; <span class="keyword">array</span>(</div><div class="line">            <span class="string">'method'</span>=&gt; <span class="string">'POST'</span>,</div><div class="line">            <span class="string">'header'</span>=&gt; <span class="string">'Content-type: application/json; charset=UTF-8'</span>,</div><div class="line">            <span class="string">'content'</span> =&gt; json_encode(</div><div class="line">                <span class="keyword">array</span>(</div><div class="line">                    <span class="string">'count'</span> =&gt; <span class="number">4</span></div><div class="line">                )</div><div class="line">            )</div><div class="line">        )</div><div class="line">    )</div><div class="line">);</div><div class="line">$output = file_get_contents($url, <span class="keyword">false</span>, $context);</div></pre></td></tr></table></figure>
<p>という感じでPHPからPOSTされたdataに対して、<br>たとえば<a href="http://expressjs.com/" target="_blank" rel="external">express</a>でざっくりサーバーを書く。</p>
<p>こちらも最終的に<strong>renderToString</strong>でreactIdを割り振られたDOMを出力する。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">'express'</span>;</div><div class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">'path'</span>;</div><div class="line"><span class="keyword">import</span> ReactDOMServer <span class="keyword">from</span> <span class="string">'react-dom/server'</span>;</div><div class="line"><span class="keyword">import</span> bodyParser <span class="keyword">from</span> <span class="string">'body-parser'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> app = express();</div><div class="line">app.use(bodyParser.json());</div><div class="line"></div><div class="line">app.post(<span class="string">'/'</span>, (req, res) =&gt; &#123;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">const</span> view = path.resolve(<span class="string">'./views/'</span> + req.query.component);</div><div class="line">    <span class="keyword">const</span> Component = <span class="built_in">require</span>(view).default;</div><div class="line">    <span class="keyword">const</span> props = req.body || <span class="literal">null</span>;</div><div class="line">    res.status(<span class="number">200</span>).send(</div><div class="line">      ReactDOMServer.renderToString(</div><div class="line">        React.createElement(Component, props)</div><div class="line">      )</div><div class="line">    );</div><div class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</div><div class="line">     res.status(<span class="number">500</span>).send(error.message);</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'App listening on port 3000!'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>こうすることでテンプレートを処理をして、htmlを返すことだけに注力できる。<br>nodejsサーバーからのレスポンスをPHPのレスポンスとして出力してあげると良い。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">curl http://APPLICATION_IP/template_nodejs.php</div><div class="line"></div><div class="line">&lt;div id=<span class="string">"app"</span>&gt;&lt;div class=<span class="string">"counter"</span> data-reactroot=<span class="string">""</span> data-reactid=<span class="string">"1"</span> data-react-checksum=<span class="string">"685065078"</span>&gt;&lt;span class=<span class="string">"count"</span> data-reactid=<span class="string">"2"</span>&gt;4&lt;/span&gt;&lt;button data-reactid=<span class="string">"3"</span>&gt; count up &lt;/button&gt;&lt;button data-reactid=<span class="string">"4"</span>&gt; count down &lt;/button&gt;&lt;/div&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>仮にnodejsサーバーとPHPアプリケーションでのConnectionエラーなどがあった場合でも、<br>ブラウザレンダリング機構を用いれば、コンテンツが表示されないという致命的な問題は回避できる。</p>
<p>nodejsサーバーを採用した場合は、サーバーは常にステートレス(状態を保持しない)なので、<br>スケールアウトしやすく、またアプリケーションのテストも容易になる。</p>
<h3 id="そのほか"><a href="#そのほか" class="headerlink" title="そのほか"></a>そのほか</h3><p>どちらの方法採用しても、サーバーでレンダリングされたDOMに対して、<br>ブラウザ側でイベントをbindする必要がある。<br>この場合、すでにDOMがレンダリングされているので、React.jsはDOMを再描画する必要はない。</p>
<p>サーバーレンダリングを行うことで、ブラウザ側での描画を避けることができため、<br>サーバーからドキュメントがダウンロードされるとコンテンツが表示される。<br>つまり描画までの時間を短縮できる。</p>
<hr>
<p><a href="https://github.com/kazu69/render-reactjs-with-php-example/" target="_blank" rel="external">今回試したサンプル</a></p>
<h3 id="参考にしたページ"><a href="#参考にしたページ" class="headerlink" title="参考にしたページ"></a>参考にしたページ</h3><p><a href="http://php.net/manual/ja/book.v8js.php" target="_blank" rel="external">v8js</a><br><a href="https://github.com/reactjs/react-php-v8js" target="_blank" rel="external">react-php-v8js</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PHPでReact.jsなアプリケーションを導入する時に眺めてみた時のメモ。&lt;/p&gt;
    
    </summary>
    
      <category term="tec" scheme="http://blog.kazu69.net/categories/tec/"/>
    
    
  </entry>
  
  <entry>
    <title>resouce hintsとpreloadを使ってリソースの取得を最適化する</title>
    <link href="http://blog.kazu69.net/2016/03/19/optimize_resources_using_resoucehint_and_preload/"/>
    <id>http://blog.kazu69.net/2016/03/19/optimize_resources_using_resoucehint_and_preload/</id>
    <published>2016-03-19T07:56:14.000Z</published>
    <updated>2016-03-21T12:19:16.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.w3.org/TR/resource-hints/" target="_blank" rel="external">Resource Hints</a>と<a href="https://www.w3.org/TR/preload/" target="_blank" rel="external">Preload</a>を使うことでリソースの取得を最適化できるようなので試してみた。</p>
<a id="more"></a>
<p>もともとはHTTP2にしてServer Pushを使うことで、予めリソースをサーバー側から送ることができるが、<br>ブラウザのキャッシュのメリットを活用できないんじゃないかということが気になっていた。<br>また、単純にHTTP2対応してもウェブページにはcrossoriginなリソースを多く利用しているので、<br>そのパフォーマンスの問題は解決しないのではないかという疑問があった。</p>
<p>それらを解決する手段としてResource Hintsなどを使ったPrebrowsingの技術が活用できそう。</p>
<p>preloadに関しては<a href="https://www.smashingmagazine.com/2016/02/preload-what-is-it-good-for/" target="_blank" rel="external">Preload: What Is It Good For?</a>がまとまっているので参考にした。</p>
<h2 id="Resource-Hints-について"><a href="#Resource-Hints-について" class="headerlink" title="Resource Hints について"></a>Resource Hints について</h2><p>Resource Hints はlink要素に <strong>dns-prefetch</strong>、<strong>preconnect</strong>、<strong>prefetch</strong>、<strong>prerender</strong>のいずれかを指定することで、取得するリソースに対してバックグラウンドで事前に処理をすることで、遷移後のページのパフォーマンス向上に寄与できる。<br>次に遷移するページで必要なリーソースをバックグランドで取得し、遷移後にページが表示されるまでの時間を短縮することができる。<br>Browserプロセスの裏側でRenderプロセスがPrebrowsing処理する感じ。</p>
<p>例えば</p>
<ul>
<li>ログイン前にPrebrowsingして、ログイン後のページの表示パフォーマンスを向上させる</li>
<li>商品購入前にPrebrowsingして、商品詳細ページの表示パフォーマンスを向上させる</li>
<li>ユーザー登録フォームの前にPrebrowsingして、登録フォームの表示パフォーマンスを向上させる</li>
</ul>
<p>など、多くのウェブアプリケーションでありそうなもので活用できる。</p>
<h3 id="試してみる"><a href="#試してみる" class="headerlink" title="試してみる"></a>試してみる</h3><p>以下のようなファイルに対してHTTP2をつかってResource Hintsを試してみる。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">class</span>=<span class="string">"no-js"</span> <span class="attr">lang</span>=<span class="string">"ja"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"x-ua-compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Sample<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon"</span> <span class="attr">href</span>=<span class="string">"apple-touch-icon.png"</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- normalize --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"//cdnjs.cloudflare.com/ajax/libs/normalize/3.0.3/normalize.css"</span> <span class="attr">integrity</span>=<span class="string">"sha384-+K7c3ujxU/SqpJg+sVdgOemJ3tcpzSGHWv3+1TgPb20j3DmE2srNJo5kVStOVq4k"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- bootstrap --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"//maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css"</span> <span class="attr">integrity</span>=<span class="string">"sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"//maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap-theme.min.css"</span> <span class="attr">integrity</span>=<span class="string">"sha384-fLW2N01lMqjakBkx3l/M9EahuwpSfeNvV63J5ezn3uZzapT0u7EYsXMjQV+0En5r"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- font awasome --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"//maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"//fortawesome.github.io/Font-Awesome/assets/font-awesome/fonts/fontawesome-webfont.woff2"</span> <span class="attr">as</span>=<span class="string">"font"</span> <span class="attr">type</span>=<span class="string">"font/woff2"</span> <span class="attr">crossorigin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/main.css"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--[if lt IE 8]&gt;</span></div><div class="line">            &lt;p class="browserupgrade"&gt;You are using an &lt;strong&gt;outdated&lt;/strong&gt; browser. Please &lt;a href="http://browsehappy.com/"&gt;upgrade your browser&lt;/a&gt; to improve your experience.&lt;/p&gt;</div><div class="line">        &lt;![endif]--&gt;</div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- Add your site or application content here --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello world! This is HTML5 Boilerplate.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- bootstrap --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"</span> <span class="attr">integrity</span>=<span class="string">"sha384-0mSbJDEHialfmuBBQP6A4Qrprq5OVfW37PRR3j5ELqxss1yVqOtnepnHVP9aJ7xS"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- modernizr --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//ajax.aspnetcdn.com/ajax/modernizr/modernizr-2.8.3.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- jQuery --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//code.jquery.com/jquery-1.12.1.js"</span> <span class="attr">integrity</span>=<span class="string">"sha256-VuhDpmsr9xiKwvTIHfYWCIQ84US9WqZsLfR4P7qF6O8="</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/plugins.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- Google Analytics: change UA-XXXXX-Y to be your site's ID. --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//www.google-analytics.com/analytics.js"</span> <span class="attr">async</span> <span class="attr">defer</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>このファイルへのアクセスをChrome Dev ToolのNetwork panelで見てみる</p>
<p><img src="/images/2016/03/19/default.png" alt=""></p>
<p>このような感じ。</p>
<h3 id="dns-prefetch"><a href="#dns-prefetch" class="headerlink" title="dns-prefetch"></a>dns-prefetch</h3><p>DNSによる名前解決をできるだけ早くおこなうことで、ページ読込み時にかかる名前解決によるコストを下げる。<br><a href="http://caniuse.com/#search=dns-prefetch" target="_blank" rel="external">多くのブラウザですでにサポートされている</a>。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//example.com"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>amazon.comでは以下のように活用されている模様。<br><strong>x-dns-prefetch-control</strong> でDNS Prefetch機能をユーザーの意志とは関係なく実装できる。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- from amazon.com --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"x-dns-prefetch-control"</span> <span class="attr">content</span>=<span class="string">"on"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//g-ec2.images-amazon.com"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//ecx.images-amazon.com"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//z-ecx.images-amazon.com"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//z-ak.images-amazon.com"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//completion.amazon.com"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//fls-fe.amazon.co.jp"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//d1y6jrbzotnyjg.cloudfront.net"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>実際に次のようなページを作成して試してみた。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"ja"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"x-dns-prefetch-control"</span> <span class="attr">content</span>=<span class="string">"on"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>DNS-Prefetch<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//:cdnjs.cloudflare.com"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//:maxcdn.bootstrapcdn.com"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//:ajax.aspnetcdn.com"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//:code.jquery.com"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//:www.google-analytics.com/"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"main.html"</span>&gt;</span>main page<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="/images/2016/03/19/dns-prefetch.png" alt=""></p>
<p>CDNを使っているので名前解決にそこまで時間がかかっていないが、それでも名前解決の時間が短縮されている。</p>
<h3 id="preconnect"><a href="#preconnect" class="headerlink" title="preconnect"></a>preconnect</h3><p>DNSルックアップ、TCPハンドシェイク、TLSネゴシエーションまでを事前に処理することができる。<br>schemeはhttp, httpsのみが許可されていて、crossorigin属性が定義されている。<br>ちなみに2016/03 現在では<a href="http://caniuse.com/#search=preconnect" target="_blank" rel="external">ChromeとFirefoxではサポート</a>されている様子。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preconnect"</span> <span class="attr">href</span>=<span class="string">"//example.com"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preconnect"</span> <span class="attr">href</span>=<span class="string">"//cdn.example.com"</span> <span class="attr">crossorigin</span>&gt;</span></div></pre></td></tr></table></figure>
<p>また、Resource Hintはlinkタグを挿入したらいいということでJavaScriptを使えば簡単に動的に追加もできる。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">preconnect</span>(<span class="params">url</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> hint = <span class="built_in">document</span>.createElement(<span class="string">'link'</span>);</div><div class="line">    hint.rel = <span class="string">'preconnect'</span>;</div><div class="line">    hint.href = url;</div><div class="line">    <span class="built_in">document</span>.head.appendChild(hint);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>実際に遷移前のページとして以下のようなものを使う</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"ja"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Preconnect<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preconnect"</span> <span class="attr">href</span>=<span class="string">"//cdnjs.cloudflare.com/ajax/libs/normalize/3.0.3/normalize.css"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preconnect"</span> <span class="attr">href</span>=<span class="string">"//maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preconnect"</span> <span class="attr">href</span>=<span class="string">"//maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap-theme.min.css"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preconnect"</span> <span class="attr">href</span>=<span class="string">"//maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preconnect"</span> <span class="attr">href</span>=<span class="string">"//maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preconnect"</span> <span class="attr">href</span>=<span class="string">"//ajax.aspnetcdn.com/ajax/modernizr/modernizr-2.8.3.js"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preconnect"</span> <span class="attr">href</span>=<span class="string">"//code.jquery.com/jquery-1.12.1.js"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preconnect"</span> <span class="attr">href</span>=<span class="string">"//www.google-analytics.com/analytics.js"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"main.html"</span>&gt;</span>main page<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Chromeで chrome://net-internals/#dns を見てみると</p>
<table>
<thead>
<tr>
<th>Hostname</th>
<th>Family</th>
<th>Addresses</th>
<th>Expires</th>
</tr>
</thead>
<tbody>
<tr>
<td>ajax.aspnetcdn.com</td>
<td>IPV4</td>
<td>68.232.45.201</td>
<td>2016-03-09 15:05:55.444 [Expired]</td>
</tr>
<tr>
<td>cdnjs.cloudflare.com</td>
<td>IPV4</td>
<td>198.41.215.66<br>198.41.215.67<br>198.41.214.67<br>198.41.214.68<br>198.41.215.68</td>
<td>2016-03-09 15:05:55.443 [Expired]</td>
</tr>
<tr>
<td>code.jquery.com</td>
<td>IPV4</td>
<td>94.46.159.11</td>
<td>2016-03-09 15:05:55.444 [Expired]</td>
</tr>
<tr>
<td>maxcdn.bootstrapcdn.com</td>
<td>IPV4</td>
<td>94.31.29.154</td>
<td>2016-03-09 15:05:55.442 [Expired]</td>
</tr>
<tr>
<td>www.google-analytics.com</td>
<td>IPV4</td>
<td>216.58.197.206</td>
<td>2016-03-09 15:05:55.474 [Expired]</td>
</tr>
</tbody>
</table>
<p>Chromeで chrome://net-internals/#events でも確認</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Source</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>534655</td>
<td>CONNECT_JOB</td>
<td>pm/ssl/cdnjs.cloudflare.com:443</td>
</tr>
<tr>
<td>534656</td>
<td>CONNECT_JOB</td>
<td>pm/ssl/cdnjs.cloudflare.com:443</td>
</tr>
<tr>
<td>534657</td>
<td>HOST_RESOLVER_IMPL_JOB</td>
<td>cdnjs.cloudflare.com</td>
</tr>
<tr>
<td>534658</td>
<td>HTTP_STREAM_JOB</td>
<td><a href="https://maxcdn.bootstrapcdn.com/" target="_blank" rel="external">https://maxcdn.bootstrapcdn.com/</a></td>
</tr>
<tr>
<td>534659</td>
<td>CONNECT_JOB</td>
<td>pm/ssl/maxcdn.bootstrapcdn.com:443</td>
</tr>
<tr>
<td>534660</td>
<td>CONNECT_JOB</td>
<td>pm/ssl/maxcdn.bootstrapcdn.com:443</td>
</tr>
<tr>
<td>534661</td>
<td>HOST_RESOLVER_IMPL_JOB</td>
<td>maxcdn.bootstrapcdn.com</td>
</tr>
<tr>
<td>534662</td>
<td>HTTP_STREAM_JOB</td>
<td><a href="https://maxcdn.bootstrapcdn.com/" target="_blank" rel="external">https://maxcdn.bootstrapcdn.com/</a></td>
</tr>
<tr>
<td>534663</td>
<td>HTTP_STREAM_JOB</td>
<td><a href="https://maxcdn.bootstrapcdn.com/" target="_blank" rel="external">https://maxcdn.bootstrapcdn.com/</a></td>
</tr>
<tr>
<td>534664</td>
<td>HTTP_STREAM_JOB</td>
<td><a href="https://maxcdn.bootstrapcdn.com/" target="_blank" rel="external">https://maxcdn.bootstrapcdn.com/</a></td>
</tr>
<tr>
<td>534665</td>
<td>HTTP_STREAM_JOB</td>
<td><a href="https://ajax.aspnetcdn.com/" target="_blank" rel="external">https://ajax.aspnetcdn.com/</a></td>
</tr>
<tr>
<td>534666</td>
<td>CONNECT_JOB</td>
<td>pm/ssl/ajax.aspnetcdn.com:443</td>
</tr>
<tr>
<td>534667</td>
<td>CONNECT_JOB</td>
<td>pm/ssl/ajax.aspnetcdn.com:443</td>
</tr>
<tr>
<td>534668</td>
<td>HOST_RESOLVER_IMPL_JOB</td>
<td>ajax.aspnetcdn.com</td>
</tr>
<tr>
<td>534669</td>
<td>HTTP_STREAM_JOB</td>
<td><a href="https://code.jquery.com/" target="_blank" rel="external">https://code.jquery.com/</a></td>
</tr>
<tr>
<td>534670</td>
<td>CONNECT_JOB</td>
<td>pm/ssl/code.jquery.com:443</td>
</tr>
<tr>
<td>534671</td>
<td>CONNECT_JOB</td>
<td>pm/ssl/code.jquery.com:443</td>
</tr>
<tr>
<td>534672</td>
<td>HOST_RESOLVER_IMPL_JOB</td>
<td>code.jquery.com</td>
</tr>
<tr>
<td>534673</td>
<td>HTTP_STREAM_JOB</td>
<td><a href="https://www.google-analytics.com/" target="_blank" rel="external">https://www.google-analytics.com/</a></td>
</tr>
<tr>
<td>534674</td>
<td>CONNECT_JOB</td>
<td>pm/ssl/www.google-analytics.com:443</td>
</tr>
<tr>
<td>534675</td>
<td>CONNECT_JOB</td>
<td>pm/ssl/www.google-analytics.com:443</td>
</tr>
<tr>
<td>534676</td>
<td>HOST_RESOLVER_IMPL_JOB</td>
<td>www.google-analytics.com</td>
</tr>
<tr>
<td>534677</td>
<td>SOCKET</td>
<td>pm/ssl/ajax.aspnetcdn.com:443</td>
</tr>
<tr>
<td>534678</td>
<td>SOCKET</td>
<td>pm/ssl/cdnjs.cloudflare.com:443</td>
</tr>
<tr>
<td>534679</td>
<td>SOCKET</td>
<td>pm/ssl/maxcdn.bootstrapcdn.com:443</td>
</tr>
<tr>
<td>534680</td>
<td>SOCKET</td>
<td>pm/ssl/code.jquery.com:443</td>
</tr>
<tr>
<td>534681</td>
<td>SOCKET</td>
<td>pm/ssl/www.google-analytics.com:443</td>
</tr>
</tbody>
</table>
<p>確かに事前にリクエストしていることがわかる。<br>アクセスしてみる。Google dev toolのNetwork pannelから</p>
<p><img src="/images/2016/03/19/preconnect.png" alt=""></p>
<p>すでにconnectしているまでは完了しており、ダウンロードするだけとなり早い。</p>
<h3 id="prefetch"><a href="#prefetch" class="headerlink" title="prefetch"></a>prefetch</h3><p>ページを予めダウンロードまでおこない、キャッシュに格納する。<br>リソースのサイズが大きい場合やネットワークが遅い場合などはブラウザはprefetchを行わない。<br>またas属性でリソースを適切なコンテキストを指定でき、これによりブラウザは最適なfetchプロセスでresourceを取得する。</p>
<p>prefetchは<a href="http://caniuse.com/#search=prefetch" target="_blank" rel="external">最近のブラウザではだいたいサポート</a>されてる。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"prefetch"</span> <span class="attr">href</span>=<span class="string">"//example.com/next-page.html"</span> <span class="attr">as</span>=<span class="string">"html"</span> <span class="attr">crossorigin</span>=<span class="string">"use-credentials"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"prefetch"</span> <span class="attr">href</span>=<span class="string">"/library.js"</span> <span class="attr">as</span>=<span class="string">"script"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>こちらもChromeで chrome://net-internals/#events を見てみると</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Source</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>538454</td>
<td>URL_REQUEST</td>
<td><a href="https://cdnjs.cloudflare.com/ajax/libs/normalize/3.0.3/normalize.css" target="_blank" rel="external">https://cdnjs.cloudflare.com/ajax/libs/normalize/3.0.3/normalize.css</a></td>
</tr>
<tr>
<td>538456</td>
<td>URL_REQUEST</td>
<td><a href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" target="_blank" rel="external">https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css</a></td>
</tr>
<tr>
<td>538458</td>
<td>URL_REQUEST</td>
<td><a href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap-theme.min.css" target="_blank" rel="external">https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap-theme.min.css</a></td>
</tr>
<tr>
<td>538460</td>
<td>URL_REQUEST</td>
<td><a href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css" target="_blank" rel="external">https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css</a></td>
</tr>
<tr>
<td>538462</td>
<td>URL_REQUEST</td>
<td><a href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js" target="_blank" rel="external">https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js</a></td>
</tr>
<tr>
<td>538464</td>
<td>URL_REQUEST</td>
<td><a href="https://ajax.aspnetcdn.com/ajax/modernizr/modernizr-2.8.3.js" target="_blank" rel="external">https://ajax.aspnetcdn.com/ajax/modernizr/modernizr-2.8.3.js</a></td>
</tr>
<tr>
<td>538466</td>
<td>URL_REQUEST</td>
<td><a href="https://code.jquery.com/jquery-1.12.1.js" target="_blank" rel="external">https://code.jquery.com/jquery-1.12.1.js</a></td>
</tr>
<tr>
<td>538468</td>
<td>URL_REQUEST</td>
<td><a href="https://www.google-analytics.com/analytics.js" target="_blank" rel="external">https://www.google-analytics.com/analytics.js</a></td>
</tr>
<tr>
<td>538470</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://cdnjs.cloudflare.com/ajax/libs/normalize/3.0.3/normalize.css" target="_blank" rel="external">https://cdnjs.cloudflare.com/ajax/libs/normalize/3.0.3/normalize.css</a></td>
</tr>
<tr>
<td>538471</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" target="_blank" rel="external">https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css</a></td>
</tr>
<tr>
<td>538472</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap-theme.min.css" target="_blank" rel="external">https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap-theme.min.css</a></td>
</tr>
<tr>
<td>538473</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css" target="_blank" rel="external">https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css</a></td>
</tr>
<tr>
<td>538474</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js" target="_blank" rel="external">https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js</a></td>
</tr>
<tr>
<td>538475</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://ajax.aspnetcdn.com/ajax/modernizr/modernizr-2.8.3.js" target="_blank" rel="external">https://ajax.aspnetcdn.com/ajax/modernizr/modernizr-2.8.3.js</a></td>
</tr>
<tr>
<td>538476</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://code.jquery.com/jquery-1.12.1.js" target="_blank" rel="external">https://code.jquery.com/jquery-1.12.1.js</a></td>
</tr>
<tr>
<td>538477</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://www.google-analytics.com/analytics.js" target="_blank" rel="external">https://www.google-analytics.com/analytics.js</a></td>
</tr>
</tbody>
</table>
<p>リクエストからcacheまで行われている。</p>
<p>Chrome dev toolのNetwork pannelでもリクエストしていることが見てわかる。</p>
<p><img src="/images/2016/03/19/prefetch1.png" alt=""></p>
<p>実際にcssを読込んでいるページに遷移してみると、cacheしているので早い。</p>
<p><img src="/images/2016/03/19/prefetch2.png" alt=""></p>
<h3 id="prerender"><a href="#prerender" class="headerlink" title="prerender"></a>prerender</h3><p>事前にバックグランドで指定リンク先のリソースをダウンロードし、DOM構築、JavaScriptの実行、CSS適用、レイアウトまで行う。<br>Render Processですでにページを構築している感じなるっぽい。(見えないタブでページを描画してしまってる感じ)<br>よって、遷移後はタブが切り替わるのように、ページがすぐに表示されるようになる。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"prerender"</span> <span class="attr">href</span>=<span class="string">"//example.com/next-page.html"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>サポートは2016/03 現在<a href="http://caniuse.com/#feat=link-rel-prerender" target="_blank" rel="external">ChromeとEdge、Operaがサポート</a>している。</p>
<p>こちらも同じ感じのhtmlを準備して試してみる。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"ja"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Prerender<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"prerender"</span> <span class="attr">href</span>=<span class="string">"main.html"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"main.html"</span>&gt;</span>main page<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>こちらは遷移先のページ(prerender.htmlとした)を指定して、試してみる。<br>Chromeで chrome://net-internals/#events を見てみると</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Source</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>561062</td>
<td>URL_REQUEST</td>
<td><a href="https://192.168.99.100:8443/main.html" target="_blank" rel="external">https://192.168.99.100:8443/main.html</a></td>
</tr>
<tr>
<td>561064</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://192.168.99.100:8443/main.html" target="_blank" rel="external">https://192.168.99.100:8443/main.html</a></td>
</tr>
<tr>
<td>561065</td>
<td>HTTP_STREAM_JOB</td>
<td><a href="https://192.168.99.100:8443/" target="_blank" rel="external">https://192.168.99.100:8443/</a></td>
</tr>
<tr>
<td>561066</td>
<td>URL_REQUEST</td>
<td><a href="https://cdnjs.cloudflare.com/ajax/libs/normalize/3.0.3/normalize.css" target="_blank" rel="external">https://cdnjs.cloudflare.com/ajax/libs/normalize/3.0.3/normalize.css</a></td>
</tr>
<tr>
<td>561068</td>
<td>URL_REQUEST</td>
<td><a href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" target="_blank" rel="external">https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css</a></td>
</tr>
<tr>
<td>561070</td>
<td>URL_REQUEST</td>
<td><a href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap-theme.min.css" target="_blank" rel="external">https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap-theme.min.css</a></td>
</tr>
<tr>
<td>561072</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://cdnjs.cloudflare.com/ajax/libs/normalize/3.0.3/normalize.css" target="_blank" rel="external">https://cdnjs.cloudflare.com/ajax/libs/normalize/3.0.3/normalize.css</a></td>
</tr>
<tr>
<td>561073</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" target="_blank" rel="external">https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css</a></td>
</tr>
<tr>
<td>561074</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap-theme.min.css" target="_blank" rel="external">https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap-theme.min.css</a></td>
</tr>
<tr>
<td>561075</td>
<td>URL_REQUEST</td>
<td><a href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css" target="_blank" rel="external">https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css</a></td>
</tr>
<tr>
<td>561077</td>
<td>URL_REQUEST</td>
<td><a href="https://fortawesome.github.io/Font-Awesome/assets/font-awesome/fonts/fontawesome-webfont.woff2" target="_blank" rel="external">https://fortawesome.github.io/Font-Awesome/assets/font-awesome/fonts/fontawesome-webfont.woff2</a></td>
</tr>
<tr>
<td>561079</td>
<td>URL_REQUEST</td>
<td><a href="https://192.168.99.100:8443/css/main.css" target="_blank" rel="external">https://192.168.99.100:8443/css/main.css</a></td>
</tr>
<tr>
<td>561081</td>
<td>URL_REQUEST</td>
<td><a href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js" target="_blank" rel="external">https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js</a></td>
</tr>
<tr>
<td>561083</td>
<td>URL_REQUEST</td>
<td><a href="https://ajax.aspnetcdn.com/ajax/modernizr/modernizr-2.8.3.js" target="_blank" rel="external">https://ajax.aspnetcdn.com/ajax/modernizr/modernizr-2.8.3.js</a></td>
</tr>
<tr>
<td>561085</td>
<td>URL_REQUEST</td>
<td><a href="https://code.jquery.com/jquery-1.12.1.js" target="_blank" rel="external">https://code.jquery.com/jquery-1.12.1.js</a></td>
</tr>
<tr>
<td>561087</td>
<td>URL_REQUEST</td>
<td><a href="https://192.168.99.100:8443/js/plugins.js" target="_blank" rel="external">https://192.168.99.100:8443/js/plugins.js</a></td>
</tr>
<tr>
<td>561089</td>
<td>URL_REQUEST</td>
<td><a href="https://192.168.99.100:8443/js/main.js" target="_blank" rel="external">https://192.168.99.100:8443/js/main.js</a></td>
</tr>
<tr>
<td>561091</td>
<td>URL_REQUEST</td>
<td><a href="https://www.google-analytics.com/analytics.js" target="_blank" rel="external">https://www.google-analytics.com/analytics.js</a></td>
</tr>
<tr>
<td>561093</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css" target="_blank" rel="external">https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css</a></td>
</tr>
<tr>
<td>561094</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://fortawesome.github.io/Font-Awesome/assets/font-awesome/fonts/fontawesome-webfont.woff2" target="_blank" rel="external">https://fortawesome.github.io/Font-Awesome/assets/font-awesome/fonts/fontawesome-webfont.woff2</a></td>
</tr>
<tr>
<td>561095</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js" target="_blank" rel="external">https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js</a></td>
</tr>
<tr>
<td>561096</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://ajax.aspnetcdn.com/ajax/modernizr/modernizr-2.8.3.js" target="_blank" rel="external">https://ajax.aspnetcdn.com/ajax/modernizr/modernizr-2.8.3.js</a></td>
</tr>
<tr>
<td>561097</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://code.jquery.com/jquery-1.12.1.js" target="_blank" rel="external">https://code.jquery.com/jquery-1.12.1.js</a></td>
</tr>
<tr>
<td>561098</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://www.google-analytics.com/analytics.js" target="_blank" rel="external">https://www.google-analytics.com/analytics.js</a></td>
</tr>
<tr>
<td>561099</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://192.168.99.100:8443/css/main.css" target="_blank" rel="external">https://192.168.99.100:8443/css/main.css</a></td>
</tr>
<tr>
<td>561100</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://192.168.99.100:8443/js/plugins.js" target="_blank" rel="external">https://192.168.99.100:8443/js/plugins.js</a></td>
</tr>
<tr>
<td>561101</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://192.168.99.100:8443/js/main.js" target="_blank" rel="external">https://192.168.99.100:8443/js/main.js</a></td>
</tr>
<tr>
<td>561102</td>
<td>HTTP_STREAM_JOB</td>
<td><a href="https://192.168.99.100:8443/" target="_blank" rel="external">https://192.168.99.100:8443/</a></td>
</tr>
<tr>
<td>561103</td>
<td>HTTP_STREAM_JOB</td>
<td><a href="https://192.168.99.100:8443/" target="_blank" rel="external">https://192.168.99.100:8443/</a></td>
</tr>
<tr>
<td>561104</td>
<td>HTTP_STREAM_JOB</td>
<td><a href="https://192.168.99.100:8443/" target="_blank" rel="external">https://192.168.99.100:8443/</a></td>
</tr>
<tr>
<td>561105</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js" target="_blank" rel="external">https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js</a></td>
</tr>
<tr>
<td>561106</td>
<td>URL_REQUEST</td>
<td><a href="https://ajax.aspnetcdn.com/ajax/modernizr/modernizr-2.8.3.js" target="_blank" rel="external">https://ajax.aspnetcdn.com/ajax/modernizr/modernizr-2.8.3.js</a></td>
</tr>
<tr>
<td>561108</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://ajax.aspnetcdn.com/ajax/modernizr/modernizr-2.8.3.js" target="_blank" rel="external">https://ajax.aspnetcdn.com/ajax/modernizr/modernizr-2.8.3.js</a></td>
</tr>
<tr>
<td>561109</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://ajax.aspnetcdn.com/ajax/modernizr/modernizr-2.8.3.js" target="_blank" rel="external">https://ajax.aspnetcdn.com/ajax/modernizr/modernizr-2.8.3.js</a></td>
</tr>
<tr>
<td>561110</td>
<td>URL_REQUEST</td>
<td><a href="https://code.jquery.com/jquery-1.12.1.js" target="_blank" rel="external">https://code.jquery.com/jquery-1.12.1.js</a></td>
</tr>
<tr>
<td>561112</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://code.jquery.com/jquery-1.12.1.js" target="_blank" rel="external">https://code.jquery.com/jquery-1.12.1.js</a></td>
</tr>
<tr>
<td>561113</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://code.jquery.com/jquery-1.12.1.js" target="_blank" rel="external">https://code.jquery.com/jquery-1.12.1.js</a></td>
</tr>
<tr>
<td>561114</td>
<td>URL_REQUEST</td>
<td><a href="https://www.google-analytics.com/analytics.js" target="_blank" rel="external">https://www.google-analytics.com/analytics.js</a></td>
</tr>
<tr>
<td>561116</td>
<td>DISK_CACHE_ENTRY</td>
<td><a href="https://www.google-analytics.com/analytics.js" target="_blank" rel="external">https://www.google-analytics.com/analytics.js</a></td>
</tr>
</tbody>
</table>
<p>リクエストされ、cacheもされている。しかし、こちらはChrome dev toolのNetwork pannelでは確認できない。<br>このまま該当ページに遷移する。</p>
<p><img src="/images/2016/03/19/prerender.png" alt=""></p>
<p>予めページの準備が整ってるだけあり、体感的にも早い。</p>
<h2 id="preload"><a href="#preload" class="headerlink" title="preload"></a>preload</h2><p>こちらはResource Hintsではなく、別の機能としてドキュメントも分けられている。<br>利用するにはResource Hintsと同様にlinkタグを用いる。</p>
<p><a href="http://blog.chromium.org/2016/03/chrome-50-beta-push-notification.html" target="_blank" rel="external">Chrome version 50 からサポートされる様子</a>。<br>2016/03/19 現在はcanaryでは利用できる。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preload"</span> <span class="attr">href</span>=<span class="string">"/assets/font.woff"</span> <span class="attr">as</span>=<span class="string">"font"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preload"</span> <span class="attr">href</span>=<span class="string">"/style/other.css"</span> <span class="attr">as</span>=<span class="string">"style"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preload"</span> <span class="attr">href</span>=<span class="string">"//example.com/resource"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preload"</span> <span class="attr">href</span>=<span class="string">"https://fonts.example.com/font.woff"</span> <span class="attr">as</span>=<span class="string">"font"</span> <span class="attr">crossorigin</span>&gt;</span></div></pre></td></tr></table></figure>
<p>または、HTTP response HeaderにLinkを追加することでも実現できる。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Link: https://example.com/font.woff; rel=preload; as=font</div><div class="line">Link: https://example.com/app/script.js; rel=preload; as=script</div><div class="line">Link: https://example.com/logo-hires.jpg; rel=preload; as=image</div><div class="line">Link: https://fonts.example.com/font.woff; rel=preload; as=font; crossorigin</div></pre></td></tr></table></figure>
<p>as属性にはfont、script、style、image、documentなどが利用できる。<br>リソースの種類の詳細は<a href="https://www.w3.org/TR/preload/#widl-HTMLLinkElement-as" target="_blank" rel="external">widl-HTMLLinkElement-as</a>から確認出来る</p>
<h3 id="peloadの特徴"><a href="#peloadの特徴" class="headerlink" title="peloadの特徴"></a>peloadの特徴</h3><ul>
<li>ページの読込をブロックしない</li>
<li>Resource Hintsが遷移前に次のページのResourceを先行して処理するのと異なり、<br>現在のページにおいてResourceを先読みする。</li>
<li>取得するリソースの優先度を設定できる。</li>
<li>Resourceをfetchする際に<a href="https://developer.mozilla.org/ja/docs/Web/Security/CSP" target="_blank" rel="external">Content-Security-Policy(CSP)</a>を確認できる</li>
<li>Resourceのタイプに応じたAcceptヘッダーを送ることができる</li>
<li>将来的なResourceは再利用のために、ブラウザはResourceタイプを決定することができる</li>
</ul>
<p>preloadのタグは任意のタイミングで動的に追加された場合、リソースの読み込みが開始される。<br>しかし、その時点では現在のページに対して、取得したリソースを実行をしたり、ページに適用をすることはない。</p>
<p>これらを踏まえて、いくつかのパターンでためしてみる。</p>
<h4 id="動的にlinkタグを追加"><a href="#動的にlinkタグを追加" class="headerlink" title="動的にlinkタグを追加"></a>動的にlinkタグを追加</h4><p>JavaScriptで動的にlinkタグを追加して、任意のタイミングでpreloadする。<br>onloadイベントにてscriptタグを動的に生成することで、ページに適用できる。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addScripts</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line">  script.src = <span class="string">'execute.js'</span>;</div><div class="line">  <span class="built_in">document</span>.body.appendChild(script);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> link = <span class="built_in">document</span>.createElement(<span class="string">'link'</span>);</div><div class="line">link.href = <span class="string">'execute.js'</span>;</div><div class="line">link.rel = <span class="string">'preload'</span>;</div><div class="line">link.as = <span class="string">'script'</span>;</div><div class="line">link.addEventListener(<span class="string">'load'</span>, addScripts, <span class="literal">false</span>);</div><div class="line">link.addEventListener(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123; <span class="built_in">console</span>.log(error) &#125;, <span class="literal">false</span>);</div><div class="line"><span class="built_in">document</span>.head.appendChild(link);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h4 id="ウェブフォントの先読み"><a href="#ウェブフォントの先読み" class="headerlink" title="ウェブフォントの先読み"></a>ウェブフォントの先読み</h4><p>WebフォントをPreloadする。<br>webフォントの問題点として、パフォーマンスがあった。<br>実際にフォントの読込みが遅延することで、ページ全体のパーフォーマンスが低下します。<br>Preloadを利用することで、ブロッキングされないためパフォーマンスが向上する。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preload"</span> <span class="attr">href</span>=<span class="string">"//fonts.googleapis.com/css?family=Montserrat"</span> <span class="attr">as</span>=<span class="string">"font"</span> <span class="attr">crossorigin</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="バックグランウンドで先読みしてloadのタイミングで適用"><a href="#バックグランウンドで先読みしてloadのタイミングで適用" class="headerlink" title="バックグランウンドで先読みしてloadのタイミングで適用"></a>バックグランウンドで先読みしてloadのタイミングで適用</h4><p>任意のタイミングでPreloadして、Resource取得後にlinkタグのrel属性値をstylesheetに変えることで<br>直接cssを適用できる。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> link = <span class="built_in">document</span>.createElement(<span class="string">"link"</span>);</div><div class="line">link.rel = <span class="string">"preload"</span>;</div><div class="line">link.as = <span class="string">"style"</span>;</div><div class="line">link.href = <span class="string">"css/style.css"</span>;</div><div class="line">link.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.rel = <span class="string">'stylesheet'</span> &#125;, <span class="literal">false</span>);</div><div class="line">link.addEventListener(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123; <span class="built_in">console</span>.log(error) &#125;, <span class="literal">false</span>);</div><div class="line"><span class="built_in">document</span>.head.appendChild(link);</div></pre></td></tr></table></figure>
<h4 id="メディアクエリ"><a href="#メディアクエリ" class="headerlink" title="メディアクエリ"></a>メディアクエリ</h4><p>media属性を用いることでレスポンシブにpreloadもできるようになる様子。<br>(現在はまだサポートされていない)<br>デバイスに応じて必要なリソースを取得することでsumartphoneなどでのページ表示のパフォーマンスの改善になりそう。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preload"</span> <span class="attr">as</span>=<span class="string">"image"</span> <span class="attr">href</span>=<span class="string">"image-max-width.png"</span> <span class="attr">media</span>=<span class="string">"(max-width: 640px)"</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="HTTP2-Server-Push-との違い"><a href="#HTTP2-Server-Push-との違い" class="headerlink" title="HTTP2 Server Push との違い"></a>HTTP2 Server Push との違い</h3><p>peloadの場合はサードパーティーのresourceも先読みできる。<br>いっぽう、Server Pushではさすがにサードパーティーのresourceを先読みすることは難しい。</p>
<p>また、preloadの場合はブラウザのキャッシュを有効に活用できるほか、コンテントネゴシエーションも利用できる。<br>これに対してServer Pushは現在のところこれは利用できないため、すでにキャッシュできているResourceも一方的に送ってくる結果になってしまう。<br>h2oではcasper(<a href="https://h2o.examp1e.net/configure/http2_directives.html#http2-casper" target="_blank" rel="external">cache-aware server-push</a>)ディレクティブを追加してこのあたりを改善できるようにしよう策定している様子。</p>
<h3 id="所感"><a href="#所感" class="headerlink" title="所感"></a>所感</h3><p>HTTP2化のほかに、ブラウザキャッシュやサードパーティーのリソースなどを活用できるPrebrowsingも併用することで、<br>webアプリケーションのパフォーマンスの改善が期待できる。<br>とくにスマートフォンなどのマルチなデバイスをサポートしているサービスなどは活用した方が良い。</p>
<p>今回は<a href="https://blog.kazu69.net/2015/08/05/try-http2-with-h2o-and-mruby/">前回</a>利用した<a href="https://github.com/kazu69/h2o_mruby_playground" target="_blank" rel="external">kazu69/h2o_mruby_playground</a>の環境でためした。</p>
<h5 id="参考にしたページ"><a href="#参考にしたページ" class="headerlink" title="参考にしたページ"></a>参考にしたページ</h5><p><a href="https://www.chromestatus.com/feature/5757468554559488" target="_blank" rel="external">https://www.chromestatus.com/feature/5757468554559488</a><br><a href="https://www.chromium.org/developers/design-documents/prerender" target="_blank" rel="external">https://www.chromium.org/developers/design-documents/prerender</a><br><a href="https://developer.mozilla.org/ja/docs/Link_prefetching_FAQ" target="_blank" rel="external">https://developer.mozilla.org/ja/docs/Link_prefetching_FAQ</a><br><a href="https://css-tricks.com/prefetching-preloading-prebrowsing/" target="_blank" rel="external">https://css-tricks.com/prefetching-preloading-prebrowsing/</a><br><a href="https://www.smashingmagazine.com/2016/02/preload-what-is-it-good-for/" target="_blank" rel="external">https://www.smashingmagazine.com/2016/02/preload-what-is-it-good-for/</a><br><a href="https://github.com/w3c/preload/" target="_blank" rel="external">https://github.com/w3c/preload/</a><br><a href="https://github.com/igrigorik/resource-hints" target="_blank" rel="external">https://github.com/igrigorik/resource-hints</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.w3.org/TR/resource-hints/&quot;&gt;Resource Hints&lt;/a&gt;と&lt;a href=&quot;https://www.w3.org/TR/preload/&quot;&gt;Preload&lt;/a&gt;を使うことでリソースの取得を最適化できるようなので試してみた。&lt;/p&gt;
    
    </summary>
    
    
      <category term="web" scheme="http://blog.kazu69.net/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>React FluxアプリをReact Redux(ES2015)で書き直した時のメモ</title>
    <link href="http://blog.kazu69.net/2016/02/04/rebuilding-react-app-to-using-es2015-classes-and-redux/"/>
    <id>http://blog.kazu69.net/2016/02/04/rebuilding-react-app-to-using-es2015-classes-and-redux/</id>
    <published>2016-02-04T10:58:25.000Z</published>
    <updated>2016-02-09T15:39:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>しばらく<a href="https://facebook.github.io/react/" target="_blank" rel="external">React</a>周りの情報を追うのが疎かになっていた感があったので、<br>ReactアプリをES2015 classでリファクタリングして、ついでに<a href="http://redux.js.org/" target="_blank" rel="external">Redux</a>にのせてみた際に学んだことの個人的なまとめ。</p>
<a id="more"></a>
<p>すでに自明のことばかりであるけど。</p>
<h2 id="ES2015-classを使う"><a href="#ES2015-classを使う" class="headerlink" title="ES2015 classを使う"></a>ES2015 classを使う</h2><h3 id="class"><a href="#class" class="headerlink" title="class"></a>class</h3><p>例えばES5でコンポーネントクラスを作成する<strong>createClass</strong>を使用している。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES5 style</span></div><div class="line"><span class="keyword">var</span> Task = React.createClass(&#123;</div><div class="line">  <span class="attr">handleClick</span>: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123; ... &#125;,</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; ... &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>React v0.13からはES2015のclassへのサポートされてるので、<br>ES2015 class定義を使って書くときは、createClassでなく、<a href="https://facebook.github.io/react/docs/component-api.html" target="_blank" rel="external">Component</a>を使うことで可能になる。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES2015 class style</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  handleClick() &#123;...&#125;</div><div class="line">  render() &#123;...&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>function</strong>が消えよりシンプルになる。ただしこれだけではまだエラーとなる。</p>
<h3 id="State-Property"><a href="#State-Property" class="headerlink" title="State, Property"></a>State, Property</h3><p>コンポーネントのインスタンス作成時にstateを初期化するために、<strong>getInitialState</strong>。<br>propertyのdefault値を定義する<strong>getDefaultProps</strong>やpropsの情報を保持する<strong>propTypes</strong>など一般的にコンポーネントには必要な情報がある。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES5 style</span></div><div class="line"><span class="keyword">var</span> Task = React.createClass(&#123;</div><div class="line">  <span class="attr">getInitialState</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">　  <span class="keyword">return</span> &#123; <span class="attr">complete</span>: <span class="keyword">this</span>.props.todo.complete &#125;</div><div class="line">  &#125;),</div><div class="line">  <span class="attr">getDefaultProps</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123; <span class="attr">complete</span>: <span class="literal">false</span> &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">propTypes</span>: &#123;</div><div class="line">    <span class="attr">complete</span>: React.PropTypes.bool.isRequired</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; ... &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>ES2015 classで記述する場合は、getInitialStateを使わずに、<strong>constructor</strong>で行う。<br>これでより意図が通じる形に書きなおすことができる。<br>また、static修飾子を使いpropsの設定値を静的メンバとして登録するので、getterの定義が不要となる。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES2015 class style</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">complete</span>: <span class="keyword">this</span>.props.todo.complete &#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">static</span> defaultProps = &#123;</div><div class="line">    <span class="attr">complete</span>: <span class="literal">false</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">static</span> propTypes = &#123;</div><div class="line">    <span class="attr">complete</span>: React.PropTypes.bool.isRequired</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;...&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Instance-Method"><a href="#Instance-Method" class="headerlink" title="Instance Method"></a>Instance Method</h3><p>コンポーネントのイベントなどで呼ばれるmethod群は、<strong>createClass</strong>を用いる場合はthisが自動でコンポーネントにバンドされる(Autobinding)。<br><a href="https://facebook.github.io/react/blog/2013/07/02/react-v0-4-autobind-by-default.html" target="_blank" rel="external">New in React v0.4: Autobind by Default</a></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES5</span></div><div class="line"><span class="keyword">var</span> Task = React.createClass(&#123;</div><div class="line">  <span class="attr">getInitialState</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">　  <span class="keyword">return</span> &#123; <span class="attr">complete</span>: <span class="keyword">this</span>.props.todo.complete &#125;</div><div class="line">  &#125;),</div><div class="line">  <span class="attr">getDefaultProps</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123; <span class="attr">complete</span>: <span class="literal">false</span> &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">propTypes</span>: &#123;</div><div class="line">    <span class="attr">complete</span>: React.PropTypes.bool.isRequired</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">handleClick</span>: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123; ... &#125;,</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; ... &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>ES2015 class を用いる場合このAutobindingが行われないため、<br>constructorの中で手動で<a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" target="_blank" rel="external">bind</a>を使ってthisの束縛を明示的に行うことが必要。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES2015 class style</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">complete</span>: <span class="keyword">this</span>.props.todo.complete &#125;;</div><div class="line">    <span class="keyword">this</span>.handleClick = <span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">static</span> defaultProps = &#123;</div><div class="line">    <span class="attr">complete</span>: <span class="literal">false</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">static</span> propTypes = &#123;</div><div class="line">    <span class="attr">complete</span>: React.PropTypes.bool.isRequired</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  handleClick(event) &#123; ... &#125;</div><div class="line"></div><div class="line">  render() &#123;...&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>class定義を使う場合、幾つかのがメソッド(isMountedなど)利用できなくなる。</p>
<p>実際、class定義、createClassのどちらを使うのかとかの議論している記事もあり、<br>まだどちらがスタンダードというわけでもなさそう。</p>
<p>個人的にはcreateClassを使いcomponentのclassを作成するよりも、class定義を使う方が将来性もあるので良い気がする。</p>
<h2 id="Reduxを使う"><a href="#Reduxを使う" class="headerlink" title="Reduxを使う"></a>Reduxを使う</h2><p><a href="https://github.com/facebook/flux" target="_blank" rel="external">Flux</a>などの思想をもとに作成されたJavaScripアプリの状態管理のライブラリ。<br>1つのStoreオブジェクトでstateは管理され、データフローはFluxと同じく一方向。<br>アプリケーション全体の状態を管理している<strong>state</strong>の変更はactionオブジェクトから渡されるデータをもとに、reducerを通してのみ行われる。</p>
<p>Reduxを利用するにあたり、<a href="http://rackt.org/redux/docs/basics/index.html" target="_blank" rel="external">document</a>を参考に登場人物たちを一旦整理する。</p>
<p>ちなみにFluxのdata flowは</p>
<p><img src="/images/2016/02/04/flux.png" alt=""></p>
<h3 id="actions"><a href="#actions" class="headerlink" title="actions"></a>actions</h3><p>plainなオブジェクトであり、stateの状態を変更する情報(type)を持つ必要がある。</p>
<h3 id="reducers"><a href="#reducers" class="headerlink" title="reducers"></a>reducers</h3><p>reducersはシンプルな関数である(Changes are made with pure functions)。<br>actionから送られたtypeをもとに、実際にstateを変更する。</p>
<h3 id="states"><a href="#states" class="headerlink" title="states"></a>states</h3><p>アプリケーション全体の状態を管理するシングルオブジェクト。<br>stateはImuutable(State is read-only)である必要があるので、stateを直接変更しないで、<strong>Object.assign()</strong>などを使って必ずコピーする。</p>
<h3 id="stores"><a href="#stores" class="headerlink" title="stores"></a>stores</h3><p>applicationの状態(state)を管理し、actionsとreducersを統合しているオブジェクト。<br>rootReducerにより初期状態のstoreが生成される。<br>また、<strong>getState()</strong>でstoreにアクセスできる。<strong>dispatch(action)</strong>でstateを更新でき、<strong>subscribe(listener)</strong>でListner登録できる。</p>
<h3 id="container"><a href="#container" class="headerlink" title="container"></a>container</h3><p>Reduxの最上位のレイヤーであり、ここでReduxのstateとcomponentをつなぐ役割を果たす。</p>
<h3 id="components"><a href="#components" class="headerlink" title="components"></a>components</h3><p>Reduxとは関連しないView。<br>storeのdataをcontainerよりpropsのバケツリレーで受け取る。</p>
<p>Reduxのデータフローは</p>
<p><img src="/images/2016/02/04/redux.png" alt=""></p>
<h3 id="移行にあたり変わる箇所"><a href="#移行にあたり変わる箇所" class="headerlink" title="移行にあたり変わる箇所"></a>移行にあたり変わる箇所</h3><p>ActionCreatorはReduxと違いシンプルな関数であり、FluxではComponentで呼ばれているが、<br>ReduxではContainerでDispatchされるようになる。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// flux action</span></div><div class="line"><span class="keyword">var</span> TodoActions = &#123;</div><div class="line">  <span class="attr">create</span>: <span class="function"><span class="keyword">function</span>(<span class="params">text</span>) </span>&#123; ... &#125;,</div><div class="line">  <span class="attr">update</span>: <span class="function"><span class="keyword">function</span>(<span class="params">text</span>) </span>&#123; ... &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// redux action</span></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">text</span>) </span>&#123; ... &#125;,</div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">text</span>) </span>&#123; ... &#125;,</div></pre></td></tr></table></figure>
<p>また、FluxではStoreのメソッドでstateを変更するが、ReduxではReducerでのみStoreの値を変更する。<br>ReduxではStoreにのみ状態が保持される形となる。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// redux reducer で stateを変更する</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">todos</span>(<span class="params">state, action</span>) </span>&#123;</div><div class="line">  <span class="keyword">switch</span>(action.actionType) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'CREATE'</span>:</div><div class="line">      <span class="comment">// create state</span></div><div class="line">    <span class="keyword">case</span> <span class="string">'UPDATE'</span>:</div><div class="line">      <span class="comment">// update state</span></div><div class="line">      ...</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>データの取得に関しても、Fluxでは必要に応じてComponentが直接Storeから値を取得することができたが、<br>Reduxではデータはcontainerで取得され、componentにはpropsとしで渡されてる。</p>
<p>Fluxでは複数のStoreにデータを保持するが、Reduxでは1つのStoreでデータを管理するため、複数のStoreはツリー構造で管理するようになる。</p>
<h2 id="Build-Process"><a href="#Build-Process" class="headerlink" title="Build Process"></a>Build Process</h2><h3 id="browserify"><a href="#browserify" class="headerlink" title="browserify"></a>browserify</h3><p><a href="https://webpack.github.io/" target="_blank" rel="external">webpack</a>でもいいけれど、個人的にモノシリックに感じるのでbrowserifyを利用。<br>ES2015 classのinstance filedとstaticの変換は<a href="https://babeljs.io/docs/plugins/preset-stage-1/" target="_blank" rel="external">Stage 1 preset</a>の<a href="http://babeljs.io/docs/plugins/transform-class-properties/" target="_blank" rel="external">transform-class-properties</a>を使うようになる。</p>
<h2 id="所感"><a href="#所感" class="headerlink" title="所感"></a>所感</h2><p>Fluxでは処理の中心にはdispacherが存在し、そこから渡されるactionを通して変更が各コンポーネントに通知され、<br>UIが更新される。</p>
<p>これに対してReduxの場合は中心となるのはシングルオブジェクトのstate(single source of truth)。stateの変更を受けUIが変更される。<br>stateが1つのオブジェクトとして構成されるので、その管理がシンプルになりそう。<br>また、fluxのstoreでのcallback周りの管理をreducerと切り出しているので、そういう点でもシンプルに<br>管理できるように感じる点だった。</p>
<p>ReduxはFRP(Functional Reactive Programming)的なアプローチとは反対に、保持している状態(state)を安全に上手に遷移させていくということに焦点が絞られている。</p>
<p>学ぶにあたり作った<a href="https://github.com/kazu69/example-react-redux/" target="_blank" rel="external">todoアプリ kazu69/example-react-redux</a></p>
<h4 id="参考にしたページ"><a href="#参考にしたページ" class="headerlink" title="参考にしたページ"></a>参考にしたページ</h4><p><a href="https://facebook.github.io/react/blog/2015/01/27/react-v0.13.0-beta-1.html#autobinding" target="_blank" rel="external">https://facebook.github.io/react/blog/2015/01/27/react-v0.13.0-beta-1.html#autobinding</a><br><a href="https://github.com/yannickcr/eslint-plugin-react/issues/203" target="_blank" rel="external">https://github.com/yannickcr/eslint-plugin-react/issues/203</a><br><a href="http://babeljs.io/docs/plugins/preset-stage-1/" target="_blank" rel="external">http://babeljs.io/docs/plugins/preset-stage-1/</a><br><a href="http://rackt.org/redux/index.html" target="_blank" rel="external">http://rackt.org/redux/index.html</a><br><a href="https://github.com/rackt/redux/issues/756" target="_blank" rel="external">https://github.com/rackt/redux/issues/756</a><br><a href="http://staltz.com/unidirectional-user-interface-architectures.html" target="_blank" rel="external">http://staltz.com/unidirectional-user-interface-architectures.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;しばらく&lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React&lt;/a&gt;周りの情報を追うのが疎かになっていた感があったので、&lt;br&gt;ReactアプリをES2015 classでリファクタリングして、ついでに&lt;a href=&quot;http://redux.js.org/&quot;&gt;Redux&lt;/a&gt;にのせてみた際に学んだことの個人的なまとめ。&lt;/p&gt;
    
    </summary>
    
    
      <category term="web" scheme="http://blog.kazu69.net/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>docker上のmysqlを使うにあたりよくあるパターン</title>
    <link href="http://blog.kazu69.net/2016/01/13/put-together-pattern-of-docker-mysql/"/>
    <id>http://blog.kazu69.net/2016/01/13/put-together-pattern-of-docker-mysql/</id>
    <published>2016-01-13T13:43:30.000Z</published>
    <updated>2016-01-23T03:11:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>しばらく時間が空くと忘れてしまうので備忘録。<br>dockerでmysqlサーバーを立てた時にありがちなパターンをまとめた。</p>
<a id="more"></a>
<p>今回は<a href="https://hub.docker.com/_/mysql/" target="_blank" rel="external">mysqlの公式イメージ</a>を使う前提。</p>
<h2 id="起動時に初期データとユーザー追加"><a href="#起動時に初期データとユーザー追加" class="headerlink" title="起動時に初期データとユーザー追加"></a>起動時に初期データとユーザー追加</h2><p>起動時にテーブルを作成したり、データを追加したい時、ユーザーを追加しておきたい時。<br>例えば、以下のようなユーザー追加と初期データ追加用のsqlファイルを任意のディレクトリ(今回はinit.dにしておく)に置いておき、</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#! /bin/bash</span></div><div class="line"></div><div class="line">CREATE_USER=<span class="string">'mysql'</span></div><div class="line">CREATE_PASSWORD=<span class="string">'secret'</span></div><div class="line">GRANT=<span class="string">"GRANT ALL ON <span class="variable">$&#123;MYSQL_DATABASE&#125;</span>.* TO <span class="variable">$&#123;CREATE_USER&#125;</span>@'%' IDENTIFIED BY <span class="variable">$&#123;CREATE_PASSWORD&#125;</span>; FLUSH PRIVILEGES"</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="variable">$GRANT</span> | mysql -u <span class="variable">$&#123;MYSQL_ROOT_USER&#125;</span> -p<span class="variable">$&#123;MYSQL_ROOT_PASSWORD&#125;</span></div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`personal`</span>;</div><div class="line"></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`personal`</span> (</div><div class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="keyword">KEY</span> <span class="string">`id`</span> (<span class="string">`id`</span>)</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</div><div class="line"></div><div class="line"><span class="keyword">LOCK</span> <span class="keyword">TABLES</span> <span class="string">`personal`</span> WRITE;</div><div class="line"><span class="comment">/*!40000 ALTER TABLE `personal` DISABLE KEYS */</span>;</div><div class="line"></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`personal`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>)</div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="number">1</span>, <span class="string">'root@local'</span>) <span class="keyword">AS</span> tmp</div><div class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (</div><div class="line">    <span class="keyword">SELECT</span> <span class="string">`id`</span> <span class="keyword">FROM</span> <span class="string">`personal`</span> <span class="keyword">WHERE</span> <span class="string">`id`</span> = <span class="number">1</span></div><div class="line">) <span class="keyword">LIMIT</span> <span class="number">1</span>;</div></pre></td></tr></table></figure>
<p>これをイメージの<strong>/docker-entrypoint-initdb.d</strong>に<strong>.sql</strong>や<strong>.sh</strong>ファイルとして配置してやることで<br>コンテナ起動時する前に実行される。(<a href="https://github.com/docker-library/mysql/pull/90" target="_blank" rel="external">Pull Request</a>)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># Dcokerfile</div><div class="line"></div><div class="line">FROM mysql</div><div class="line">EXPORT &apos;3306:3306&apos;</div><div class="line">ENV MYSQL_ROOT_USER root</div><div class="line">ENV MYSQL_ROOT_PASSWORD root</div><div class="line">ENV MYSQL_DATABASE sample_db</div><div class="line">ENV MYSQL_USER test</div><div class="line">ENV MYSQL_PASSWORD password</div><div class="line"></div><div class="line"># 初期データをコンテナ起動時に実行</div><div class="line">VOLUME ./init.d:/docker-entrypoint-initdb.d</div></pre></td></tr></table></figure>
<h2 id="データを永続化する"><a href="#データを永続化する" class="headerlink" title="データを永続化する"></a>データを永続化する</h2><p>Dockerfile内でVOLUMEコマンドを使いホストのディレクトリをコンテナにマウントしてやることで永続化できる。<br>ポータビリティ(可搬性)を求める場合はデータを格納専用のコンテナを別途用意すると良い。</p>
<p>データ格納専用コンテナのディレクトリをデータベース用のコンテナにマウントすることで実現できる。<br>データ自体は永続化されているので、データベース用のコンテナな使い捨てできる。</p>
<p>データを格納専用のコンテナを作成は必要最小限の機能があればいいので<a href="https://hub.docker.com/_/busybox/" target="_blank" rel="external">busybox</a>とかでいい。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># データを格納専用のコンテナ</span></div><div class="line"><span class="comment"># -v でマウントするディレクトリ指定</span></div><div class="line">docker run \</div><div class="line">    <span class="_">-d</span> \</div><div class="line">    --name storage \</div><div class="line">    -v /var/lib/mysql \</div><div class="line">    busybox</div><div class="line"></div><div class="line"><span class="comment"># --volumes-from オプションで格納専用のコンテナを参照</span></div><div class="line">docker run \</div><div class="line">    <span class="_">-d</span> \</div><div class="line">    --name database \</div><div class="line">    --volumes-from storage \</div><div class="line">    <span class="_">-e</span> MYSQL_ROOT_PASSWORD=root \</div><div class="line">    mysql</div></pre></td></tr></table></figure>
<p>docker-inspectで詳細を見ると</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">&#123;</div><div class="line">    &#123;</div><div class="line">...</div><div class="line">    "Mounts": [</div><div class="line">        &#123;</div><div class="line">            "Name": "1b3136bd545afa6d76427edd27408f47...",</div><div class="line">            "Source": "/mnt/sda1/var/lib/docker/volumes/1b3136bd545afa6d76427edd27408f47612ea1cd1f7a1857d810b24ecae2c16d/_data",</div><div class="line">            "Destination": "/var/lib/mysql",</div><div class="line">            "Driver": "local",</div><div class="line">            "Mode": "",</div><div class="line">            "RW": true</div><div class="line">        &#125;</div><div class="line">    ],</div><div class="line">...</div><div class="line">      "Image": "mysql",</div><div class="line">        "Volumes": &#123;</div><div class="line">            "/var/lib/mysql": &#123;&#125;</div><div class="line">        &#125;,</div><div class="line">...</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<p>実体は /mnt/sda1/var/lib/docker/volumes/ にあるようだ。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">docmer-machine ssh dev</div><div class="line">                        <span class="comment">##         .</span></div><div class="line">                  <span class="comment">## ## ##        ==</span></div><div class="line">               <span class="comment">## ## ## ## ##    ===</span></div><div class="line">           /<span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">"\___/ ===</span></div><div class="line">      ~~~ &#123;~~ ~~~~ ~~~ ~~~~ ~~~ ~ /  ===- ~~~</div><div class="line">           \______ o           __/</div><div class="line">             \    \         __/</div><div class="line">              \____\_______/</div><div class="line"> _                 _   ____     _            _</div><div class="line">| |__   ___   ___ | |_|___ \ __| | ___   ___| | _____ _ __</div><div class="line">| '_ \ / _ \ / _ \| __| __) / _` |/ _ \ / __| |/ / _ \ '__|</div><div class="line">| |_) | (_) | (_) | |_ / __/ (_| | (_) | (__|   &lt;  __/ |</div><div class="line">|_.__/ \___/ \___/ \__|_____\__,_|\___/ \___|_|\_\___|_|</div><div class="line">Boot2Docker version 1.9.1, build master : cef800b - Fri Nov 20 19:33:59 UTC 2015</div><div class="line"></div><div class="line">sudo ls /mnt/sda1/var/lib/docker/volumes/1b3136bd545afa6d76427edd27408f47612ea1cd1f7a1857d810b24ecae2c16d/_data</div><div class="line">auto.cnf            ib_buffer_pool      ib_logfile0         ib_logfile1         ibdata1             ibtmp1              mysql               performance_schema  sys</div></pre></td></tr></table></figure>
<p>あった。</p>
<h2 id="データをバックアップする"><a href="#データをバックアップする" class="headerlink" title="データをバックアップする"></a>データをバックアップする</h2><p>上記の方法で永続化したデータも、バックアップする必要があると思う。<br>この場合、データ格納専用コンテナのディレクトリとホストのディレクトリもマウントするコンテナを作成し、<br>データをホストディレクトに渡せばいいだけ。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run --rm --volumes-from database -v $(<span class="built_in">pwd</span>):/backup busybox tar czvf /backup/archive.tar.gz /var/lib/mysql</div></pre></td></tr></table></figure>
<p>ということで、開発環境やCI環境のコンテナ化の時にMySQL環境作成時に思い出そう。<br><a href="https://github.com/kazu69/docker-mysql-pattern-sample" target="_blank" rel="external">今回使ったデータのまとめ</a></p>
<h4 id="参考にしたページ"><a href="#参考にしたページ" class="headerlink" title="参考にしたページ"></a>参考にしたページ</h4><p><a href="http://qiita.com/lciel/items/e21a4ede3bac7fb3ec5a" target="_blank" rel="external">Docker の Data Volume まわりを整理する</a><br><a href="https://docs.docker.com/engine/userguide/dockervolumes/#mount-a-host-directory-as-a-data-volume" target="_blank" rel="external">Mount a host directory as a data volume</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;しばらく時間が空くと忘れてしまうので備忘録。&lt;br&gt;dockerでmysqlサーバーを立てた時にありがちなパターンをまとめた。&lt;/p&gt;
    
    </summary>
    
      <category term="tec" scheme="http://blog.kazu69.net/categories/tec/"/>
    
      <category term="memo" scheme="http://blog.kazu69.net/categories/tec/memo/"/>
    
    
  </entry>
  
  <entry>
    <title>ビジュアルのRegression Test(回帰テスト)ツールを試してみた</title>
    <link href="http://blog.kazu69.net/2016/01/02/looking-css-regression-testing-tool/"/>
    <id>http://blog.kazu69.net/2016/01/02/looking-css-regression-testing-tool/</id>
    <published>2016-01-01T15:18:43.000Z</published>
    <updated>2016-01-11T15:28:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>運用年数の長いウェブサービスでcssやhtmlのリファクタリングをするにあたって、ビジュアルのRegression test(回帰テスト)が必要となってきたので、導入するにあたりいくつかのツールを眺めてみた。</p>
<a id="more"></a>
<p>今回、ビジュアルのRegression testとしてcsscritic、BackstopJS、Succss、PhantomCSSを軽く触ってみた。</p>
<h2 id="csscritic"><a href="#csscritic" class="headerlink" title="csscritic"></a>csscritic</h2><blockquote>
<p>A lightweight tool for regression testing of Cascading Style Sheets</p>
</blockquote>
<p>とある通り、<a href="https://github.com/cburgmer/csscritic" target="_blank" rel="external">csscritic</a>はシンプルな設定でテストを実施することが可能。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i csscritic http-server --no-optional</div></pre></td></tr></table></figure>
<p>テスト対象となるhtml(test.html)を以下のようにする</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Page under test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-class">.test</span> &#123;</div><div class="line">            <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">            <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">            <span class="attribute">vertical-align</span>: top;</div><div class="line">            <span class="attribute">width</span>: <span class="number">204px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">50px</span>;</div><div class="line">            <span class="attribute">font-size</span>: <span class="number">90px</span>;</div><div class="line">            <span class="attribute">color</span>: red;</div><div class="line">        &#125;</div><div class="line">        <span class="selector-class">.blue</span> &#123;</div><div class="line">            <span class="attribute">background-color</span>: blue;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test blue"</span>&gt;</span></div><div class="line">        Blue</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>テスト用のhtmlファイル(RegressionRunner.html)を作成</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Regression Runner<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/csscritic/dist/csscritic.allinone.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            csscritic</div><div class="line">                <span class="comment">/* テストケースをlabel */</span></div><div class="line">                .component(<span class="string">'Example test'</span>)</div><div class="line"></div><div class="line">                <span class="comment">/* レポーターの設定 */</span></div><div class="line">                .add(&#123;</div><div class="line">                    <span class="attr">url</span>: <span class="string">'test.html'</span>,</div><div class="line">                    <span class="attr">desc</span>: <span class="string">'should look good'</span></div><div class="line">                &#125;)</div><div class="line"></div><div class="line">                <span class="comment">/* テストケースを追加 */</span></div><div class="line">                .addReporter(csscritic.NiceReporter())</div><div class="line"></div><div class="line">                <span class="comment">/* テスト実行 */</span></div><div class="line">                .execute();</div><div class="line">        &#125;;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="https://github.com/cburgmer/csscritic/wiki/API" target="_blank" rel="external">APIはドキュメント</a>があるので必要に応じて参照。</p>
<p>RegressionRunner.htmlをブラウザで開くことでまず現在の表示状態を確認できる。<br>Chromeの場合<a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Same_origin_policy_for_JavaScript" target="_blank" rel="external">same-origin</a>の制限で表示できないので、ローカルサーバーを立てて表示する。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">node_modules/.bin/http-server</div><div class="line">open http://localhost:8080//RegressionRunner.html</div></pre></td></tr></table></figure>
<p><img src="/images/2016/01/02/csscritic_first_run.png" alt=""></p>
<p>テスト対象のhtmlを<a href="http://phantomjs.org/" target="_blank" rel="external">PhantomJS</a>でレンダリングし、対象となる箇所を目視確認し、問題ない場合はacceptしていく。(htmlファイルの他に画像ファイルを指定することも可能)</p>
<p>このacceptした結果はローカルのIndexed DBに保持される。<br>再度ページを読込むと、前回レンダリング結果との比較を行う。ここで差分がある場合はfaildとなる。</p>
<p><img src="/images/2016/01/02/csscritic_success.png" alt=""></p>
<p>sama-originの制限や動的生成される場合などで、ローカルのコードベースでテストをできない時は、<br>proxyを使うか、screenshotの画像と比較するなどで対応すると良いらしい。</p>
<p>csscriticは簡単な設定で容易にRegression テストを導入できる。<br>Styleguideなどのドキュメントに導入するなどの活用ができそう。<br>基本的にローカルのstaticなコードに対してテストするので、それ以外の場合はひと手間かかる。</p>
<h2 id="BackstopJS"><a href="#BackstopJS" class="headerlink" title="BackstopJS"></a>BackstopJS</h2><p><a href="https://github.com/garris/BackstopJS" target="_blank" rel="external">BackstopJS</a>は複数のview portに対してRegressionテストを実行できるのが特徴。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># インストール</span></div><div class="line">npm i -D backstopjs</div><div class="line">npm i -g gulp phantomjs casperjs</div><div class="line"></div><div class="line"><span class="comment"># backstopjsのGulp Taskを実行する必要があるため</span></div><div class="line"><span class="built_in">cd</span> node_modules/backstopjs</div><div class="line"></div><div class="line"><span class="comment"># configファイル(backstop.json)生成</span></div><div class="line">gulp genConfig</div><div class="line"></div><div class="line"><span class="comment"># bitmaps_reference に比較元になる現在のキャプチャを生成する</span></div><div class="line">gulp reference</div><div class="line"></div><div class="line"><span class="comment"># 変更した内容との比較がbitmaps_test/&lt;timestamp&gt;/に生成される</span></div><div class="line">gulp <span class="built_in">test</span></div><div class="line"></div><div class="line"><span class="comment"># レポーターを開く</span></div><div class="line">gulp openReport</div></pre></td></tr></table></figure>
<p>backstop.jsonは以下を使った。jsonの他に<a href="https://github.com/garris/BackstopJS/blob/master/test/configExample.js" target="_blank" rel="external">javascript</a>もつかえる様子。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"viewports"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="string">"name"</span>: <span class="string">"phone"</span>,</div><div class="line">      <span class="string">"width"</span>: <span class="number">320</span>,</div><div class="line">      <span class="string">"height"</span>: <span class="number">480</span></div><div class="line">    &#125;</div><div class="line">  ],</div><div class="line">  <span class="string">"scenarios"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="string">"label"</span>: <span class="string">"http://getbootstrap.com"</span>,</div><div class="line">      <span class="string">"url"</span>: <span class="string">"http://getbootstrap.com"</span>,</div><div class="line">      <span class="string">"hideSelectors"</span>: [],</div><div class="line">      <span class="string">"removeSelectors"</span>: [</div><div class="line">        <span class="string">"#carbonads-container"</span></div><div class="line">      ],</div><div class="line">      <span class="string">"selectors"</span>: [</div><div class="line">        <span class="string">"header"</span>,</div><div class="line">        <span class="string">"main"</span>,</div><div class="line">        <span class="string">"footer"</span></div><div class="line">      ],</div><div class="line">      <span class="string">"readyEvent"</span>: <span class="string">"backstopjs_ready"</span>,</div><div class="line">      <span class="string">"delay"</span>: <span class="number">500</span>,</div><div class="line">      <span class="string">"misMatchThreshold"</span> : <span class="number">0.1</span>,</div><div class="line">      <span class="string">"onReadyScript"</span>: <span class="string">"onReady.js"</span></div><div class="line">    &#125;</div><div class="line">  ],</div><div class="line">  <span class="string">"paths"</span>: &#123;</div><div class="line">    <span class="string">"bitmaps_reference"</span>: <span class="string">"../../backstop_data/bitmaps_reference"</span>,</div><div class="line">    <span class="string">"bitmaps_test"</span>: <span class="string">"../../backstop_data/bitmaps_test"</span>,</div><div class="line">    <span class="string">"compare_data"</span>: <span class="string">"../../backstop_data/bitmaps_test/compare.json"</span>,</div><div class="line">    <span class="string">"casper_scripts"</span>: <span class="string">"../../backstop_data/casper_scripts"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"engine"</span>: <span class="string">"phantomjs"</span>,</div><div class="line">  <span class="string">"report"</span>: [<span class="string">"CLI"</span>, <span class="string">"browser"</span>],</div><div class="line">  <span class="string">"cliExitOnFail"</span>: <span class="literal">false</span>,</div><div class="line">  <span class="string">"casperFlags"</span>: [],</div><div class="line">  <span class="string">"debug"</span>: <span class="literal">false</span>,</div><div class="line">  <span class="string">"port"</span>: <span class="number">3001</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>レポーターを開くとテスト結果とそれぞれの要素が表示される。</p>
<p><img src="/images/2016/01/02/backstopjs_reporter_result.png" alt=""></p>
<p><img src="/images/2016/01/02/backstopjs_reporter_element.png" alt=""></p>
<p>viewportsで複数のviewportのプロパティを指定することができる。<br>hideSelectorsは指定要素に visibility:hidden を適用する。これは広告など任意のコンテンツが表示される要素を非表示にする。<br>removeSelectorsは指定要素に display:none を適用する。未実装などの要素をテストしないようにする。<br>出力ファイルのパスの設定はpathsとなる。</p>
<p>BackstopJSはセットアップからテストの実施までインストールしたbackstopjsのgulpを実行する必要があるので、npm scriptsを作っておくとかで対応した。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  ...</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">  <span class="string">"backstop-reference"</span>: <span class="string">"cd ./node_modules/backstopjs &amp;&amp; gulp reference"</span>,</div><div class="line">  <span class="string">"backstop-test"</span>: <span class="string">"cd ./node_modules/backstopjs &amp;&amp; gulp test"</span>,</div><div class="line">  <span class="string">"backstop-report"</span>: <span class="string">"cd ./node_modules/backstopjs &amp;&amp; gulp openReport"</span></div><div class="line">&#125;,</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>複数のviewportに対してテストをまとめて実行できる点は、レスポンシブサイトではすごく重宝しそう。<br>ツール自体はgulpへの依存度が大きく、すでにワークフローが確立しているプロジェクトなどでは導入の際に検討が必要となりそう。</p>
<h2 id="Succss"><a href="#Succss" class="headerlink" title="Succss"></a>Succss</h2><p><a href="https://github.com/B2F/Succss" target="_blank" rel="external">Succss</a> も導入の簡単なRegression test toolらしく、こちらは2015年にリリースされているので比較的新しい。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">npm i -g success</div><div class="line"></div><div class="line"><span class="comment"># 現在の状態のscrennshotを追加する</span></div><div class="line">succss add configuration.js</div><div class="line"></div><div class="line"><span class="comment"># 変更を比較する</span></div><div class="line">succss check configuration.js</div></pre></td></tr></table></figure>
<p>設定ファイル(configuration.js)は以下を使用した。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">Succss.pages = &#123;</div><div class="line">  <span class="string">'homepage'</span>: &#123;</div><div class="line">    <span class="attr">url</span>:<span class="string">'succss.ifzenelse.net/'</span>,</div><div class="line">    <span class="attr">directory</span>:<span class="string">'screenshots/'</span>,</div><div class="line">    <span class="attr">captures</span>: &#123;</div><div class="line">      <span class="string">'header'</span>:</div><div class="line">      &#123;</div><div class="line">        <span class="string">'before'</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">          <span class="keyword">this</span>.click(<span class="string">'#logo-image'</span>);</div><div class="line">          <span class="built_in">console</span>.log(<span class="string">'... Waiting for color squares reinitialization'</span>);</div><div class="line">          <span class="keyword">this</span>.wait(<span class="number">900</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'Done!'</span>);</div><div class="line">          &#125;);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">Succss.viewports = &#123;</div><div class="line">  <span class="string">'default'</span>: &#123;</div><div class="line">    <span class="attr">width</span>: <span class="number">320</span>,</div><div class="line">    <span class="attr">height</span>: <span class="number">240</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">'mobile-landscape'</span>: &#123;</div><div class="line">    <span class="attr">width</span>: <span class="number">640</span>,</div><div class="line">    <span class="attr">height</span>: <span class="number">480</span></div><div class="line">  &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>directoryはscrennshotの保存先ディレクトリ。<br>capturesで比較する要素css selectorsで指定できる。また関数を使うことも可能。</p>
<p><img src="/images/2016/01/02/succss_result.png" alt=""></p>
<p>Succssは設定がシンプルかつ複数のviewportに対してテストを実行でき、オプションも豊富である。<br>画像を比較するdiffツールに<a href="https://github.com/Huddle/Resemble.js" target="_blank" rel="external">Resemble.js</a>のほか<a href="https://github.com/HumbleSoftware/js-imagediff" target="_blank" rel="external">imagediff.js</a>も使うことができる点で他と違っている。</p>
<p>特定のタスクランナーに依存してないので既存のプロジェクトに導入しやすい感じがある。</p>
<h2 id="PhantomCSS"><a href="#PhantomCSS" class="headerlink" title="PhantomCSS"></a>PhantomCSS</h2><p><a href="https://github.com/Huddle/PhantomCSS" target="_blank" rel="external">PhantomCSS</a>は<a href="http://casperjs.org/" target="_blank" rel="external">CasperJS</a>モジュールとして機能するツール。</p>
<p>PhantomCSS自体のinitializeは<a href="https://github.com/Huddle/PhantomCSS/blob/master/demo/testsuite.js" target="_blank" rel="external">demo</a>を参照すると良さそう。</p>
<p>今回はdemoを使って軽く試してみる。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> phantomcss = <span class="built_in">require</span>(<span class="string">'phantomcss'</span>);</div><div class="line"></div><div class="line">casper.test.begin(<span class="string">'Coffee machine visual tests'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"> test </span>) </span>&#123;</div><div class="line">    phantomcss.init(&#123;</div><div class="line">        <span class="attr">casper</span>: casper,</div><div class="line">        <span class="attr">screenshotRoot</span>: <span class="string">'screenshots'</span>,</div><div class="line">        <span class="attr">failedComparisonsRoot</span>: <span class="string">'failures'</span>,</div><div class="line">        <span class="attr">comparisonResultRoot</span>: <span class="string">'results'</span>,</div><div class="line">        <span class="attr">libraryRoot</span>: <span class="string">'node_modules/phantomcss'</span>,</div><div class="line">        <span class="attr">addLabelToFailedImage</span>: <span class="literal">false</span>,</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    casper.on( <span class="string">'remote.message'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"> msg </span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.echo( msg );</div><div class="line">    &#125; )</div><div class="line"></div><div class="line">    casper.on( <span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"> err </span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.die( <span class="string">"PhantomJS has errored: "</span> + err );</div><div class="line">    &#125; );</div><div class="line"></div><div class="line">    casper.on( <span class="string">'resource.error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"> err </span>) </span>&#123;</div><div class="line"></div><div class="line">        casper.log( <span class="string">'Resource load error: '</span> + err, <span class="string">'warning'</span> );</div><div class="line">    &#125; );</div><div class="line"></div><div class="line">    casper.start(<span class="string">'coffeemachine.html'</span>);</div><div class="line">    casper.viewport( <span class="number">1024</span>, <span class="number">768</span> );</div><div class="line"></div><div class="line">    casper.then( <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        casper.click( <span class="string">'#coffee-machine-button'</span> );</div><div class="line"></div><div class="line">        <span class="comment">// wait for modal to fade-in </span></div><div class="line">        casper.waitForSelector( <span class="string">'#myModal:not([style*="display: none"])'</span>,</div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">success</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                phantomcss.screenshot( <span class="string">'#myModal'</span>, <span class="string">'coffee machine dialog'</span> );</div><div class="line">            &#125;,</div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                casper.test.fail( <span class="string">'Should see coffee machine'</span> );</div><div class="line">            &#125;</div><div class="line">        );</div><div class="line">    &#125; );</div><div class="line"></div><div class="line">    casper.then( <span class="function"><span class="keyword">function</span> <span class="title">now_check_the_screenshots</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        phantomcss.compareAll();</div><div class="line">    &#125; );</div><div class="line"></div><div class="line">    casper.run(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log( <span class="string">'\nTHE END.'</span> );</div><div class="line">        casper.test.done();</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 現状のscreenshotを生成</span></div><div class="line">casperjs <span class="built_in">test</span> test.js</div><div class="line">Test file: test.js</div><div class="line"><span class="comment"># Coffee machine visual tests</span></div><div class="line"></div><div class="line"></div><div class="line">New screenshot at results/coffee machine dialog_0.png</div><div class="line"></div><div class="line">Must be your first time?</div><div class="line">Some screenshots have been generated <span class="keyword">in</span> the directory results</div><div class="line">This is your <span class="string">'baseline'</span>, check the images manually. If they<span class="string">'re wrong, delete the images.</span></div><div class="line">The next time you run these tests, new screenshots will be taken.  These screenshots will be compared to the original.</div><div class="line">If they are different, PhantomCSS will report a failure.</div><div class="line"></div><div class="line">THE END.</div><div class="line"></div><div class="line"># わざと差分を出して比較テストを行う</div><div class="line">asperjs test test.js</div><div class="line">Test file: test.js</div><div class="line"># Coffee machine visual tests</div><div class="line">Failure! Saved to failures/coffee machine dialog_0.fail.png</div><div class="line"></div><div class="line"></div><div class="line">FAIL Visual change found for screenshot results/coffee machine dialog_0.png (8.65% mismatch)</div><div class="line">#    type: fail</div><div class="line">#    file: test.js</div><div class="line">#    subject: false</div><div class="line"></div><div class="line">PhantomCSS found 1 tests, 1 of them failed.</div><div class="line"></div><div class="line">PhantomCSS has created some images that try to show the difference (in the directory failures). Fuchsia colored pixels indicate a difference betwen the new and old screenshots.</div><div class="line"></div><div class="line">THE END.</div><div class="line">FAIL 1 test executed in 4.162s, 0 passed, 1 failed, 0 dubious, 0 skipped.</div><div class="line"></div><div class="line">Details for the 1 failed test:</div><div class="line"></div><div class="line">In test.js</div><div class="line">  Coffee machine visual tests</div><div class="line">    fail: Visual change found for screenshot results/coffee machine dialog_0.png (8.65% mismatch)</div></pre></td></tr></table></figure>
<p>差分が出た場合は以下のように差分が視覚的に確認できる。</p>
<p><img src="/images/2016/01/02/phantomcss_failer.png" alt=""></p>
<p>PhantomCSSはドキュメントを見る限りでは、オプションが色々とありCasperJSのテストが書ければなんとかなりそうな雰囲気。<br>既存のプロジェクトに導入しても十分活躍できそう。<br>複数の複雑な条件をテストする際はCasperJSのコードを頑張っていく感じになりそう。</p>
<h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>どれも基本的に PhantomJS + CasperJS でscreenshotを取得して、resemble.jsで画像を比較するパターンとなっている。<br>(<a href="https://slimerjs.org/" target="_blank" rel="external">slimerjs</a>もオプションで使える)<br>Regressionテストを導入する場合、プロジェクトによってどれを選択するのか判断しないといけなが、個人的には以下のように考えた。</p>
<p>既にstyleguideがある場合はcsscriticをstyleguideに導入するのは簡単なので良さそう。<br>Gulpを使っているプロジェクトで簡単に導入したいならBackstopJSは強力なのでこちらを選択する。<br>タスクランナーに依存しないで、シンプルに導入したいならSuccssで問題ない。<br>CasperJsでテストコード書くことが可能な場合は、複雑な条件でテストできるようにしたいならばPhantomCSSを選んでおくのが良さそう。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;運用年数の長いウェブサービスでcssやhtmlのリファクタリングをするにあたって、ビジュアルのRegression test(回帰テスト)が必要となってきたので、導入するにあたりいくつかのツールを眺めてみた。&lt;/p&gt;
    
    </summary>
    
    
      <category term="web" scheme="http://blog.kazu69.net/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>mysqlのバイナリログのフォーマットを調べた</title>
    <link href="http://blog.kazu69.net/2015/12/01/examined-mysql-binlog-format/"/>
    <id>http://blog.kazu69.net/2015/12/01/examined-mysql-binlog-format/</id>
    <published>2015-12-01T10:19:09.000Z</published>
    <updated>2015-12-08T13:45:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>とあるアプリケーションをレンタルサーバーに設置しようとした際に、<br><a href="https://mariadb.com/" target="_blank" rel="external">MariaDB</a>が以下のようなエラーを吐いていた。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Unsafe statement written to the binary log using statement format</div><div class="line">since BINLOG_FORMAT = STATEMENT. Statement is unsafe because it</div><div class="line">invokes a trigger or a stored function that inserts into an</div><div class="line">AUTO_INCREMENT column. Inserted values cannot be logged correctly.</div></pre></td></tr></table></figure>
<p>バイナリログフォーマットがSTATEMENTだと安全でないのでよろしくないらしい。<br>STATEMENTだと安全でないということはどういうことか。少し試してみた。</p>
<a id="more"></a>
<h2 id="バイナリログについて"><a href="#バイナリログについて" class="headerlink" title="バイナリログについて"></a>バイナリログについて</h2><p>RDBMSでいうところのトランザクションログをMySQLではバイナリログという。</p>
<p>バイナリログにはMySQLにおいてデータベースに対して</p>
<ul>
<li>トランザクションの開始および終了</li>
<li>値の挿入(INSERT)、値の更新(UPDATE)、削除(DELETE)</li>
<li>テーブル、インデックスの作成削除</li>
</ul>
<p>の履歴が保持されている。</p>
<p>トランザクションログはRDBMSによって異なり、以下に大別される。</p>
<table>
<thead>
<tr>
<th>トランザクションログ</th>
<th>概要</th>
</tr>
</thead>
<tbody>
<tr>
<td>論理ロギング</td>
<td>データベースに対する論理動作(SQL文)の変更履歴を管理</td>
</tr>
<tr>
<td>物理ロギング</td>
<td>変更があったデータの変更前のイメージを管理</td>
</tr>
</tbody>
</table>
<p>バイナリログはデフォルトでは生成されないのでmy.cnfに設定を追加する必要がある。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># grep my.cnf</span></div><div class="line">mysql --help | grep my.cnf</div><div class="line">touch /usr/<span class="built_in">local</span>/etc/my.cnf</div><div class="line"></div><div class="line">cat /usr/<span class="built_in">local</span>/etc/my.cnf</div></pre></td></tr></table></figure>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="section">[mysqld]</span></div><div class="line"><span class="attr">log-bin</span>=mysql-bin</div></pre></td></tr></table></figure>
<p>設定することにより、/usr/local/var/mysql/mysql-bin.000001 のようにログファイルが生成される。<br>再起動などすると /usr/local/var/mysql/mysql-bin.000002 と新たなログファイルが生成される。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">ls /usr/<span class="built_in">local</span>/var/mysql/</div><div class="line"></div><div class="line">mysql-bin.000001</div><div class="line"></div><div class="line">mysql.server restart</div><div class="line">Shutting down MySQL</div><div class="line">. SUCCESS!</div><div class="line">Starting MySQL</div><div class="line">. SUCCESS!</div><div class="line"></div><div class="line">ls /usr/<span class="built_in">local</span>/var/mysql/</div><div class="line"></div><div class="line">mysql-bin.000001</div><div class="line">mysql-bin.000002</div></pre></td></tr></table></figure>
<p>存在するログファイルは /usr/local/var/mysql/mysql-bin.index にリストアップされている。<br>ということで rm などでログだけ消すと次回起動時にエラーになる。mysql-bin.indexからも削除する必要が有る。</p>
<p>また、ログファイルは溜まっていく一方なので自動削除するためにmy.cnfに設定を追加。<br>expire_log_days でログを保持する期間を追加。(初期値は0で削除しない)<br>7日間保持するなら、以下のような感じ。</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="section">[mysqld]</span></div><div class="line"><span class="attr">log-bin</span>=mysql-bin</div><div class="line"><span class="attr">expire_log_days</span> = <span class="number">7</span></div></pre></td></tr></table></figure>
<h2 id="バイナリログのフォーマット"><a href="#バイナリログのフォーマット" class="headerlink" title="バイナリログのフォーマット"></a>バイナリログのフォーマット</h2><p>バイナリログのフォーマットは3種類あり、それぞれ以下のようになっている。</p>
<table>
<thead>
<tr>
<th>フォーマット</th>
<th>特徴</th>
</tr>
</thead>
<tbody>
<tr>
<td>STATEMENT</td>
<td>実行されたSQLに基づいてロギング</td>
</tr>
<tr>
<td>ROW</td>
<td>行ベースに基づきロギング</td>
</tr>
<tr>
<td>MIXED</td>
<td>基本はSTATEMENTだが特定の条件では行ベースでロギングする</td>
</tr>
</tbody>
</table>
<p>おそらくレンタルサーバーとかだと、STATEMENTに設定されていることが多いんじゃないかなと思う。</p>
<p>それぞれの挙動を適当なテーブルを作り試してみる。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">create database <span class="built_in">test</span>;</div><div class="line">create table personal(id int auto_increment, name varchar(10),index(id));</div><div class="line">SHOW FULL COLUMNS FROM personal;</div><div class="line">+-------+-------------+-----------------+------+-----+---------+----------------+---------------------------------+---------+</div><div class="line">| Field | Type        | Collation       | Null | Key | Default | Extra          | Privileges                      | Comment |</div><div class="line">+-------+-------------+-----------------+------+-----+---------+----------------+---------------------------------+---------+</div><div class="line">| id    | int(11)     | NULL            | NO   | MUL | NULL    | auto_increment | select,insert,update,references |         |</div><div class="line">| name  | varchar(10) | utf8_general_ci | YES  |     | NULL    |                | select,insert,update,references |         |</div><div class="line">+-------+-------------+-----------------+------+-----+---------+----------------+---------------------------------+---------+</div></pre></td></tr></table></figure>
<h3 id="Statement-base"><a href="#Statement-base" class="headerlink" title="Statement base"></a>Statement base</h3><p>デフォルトのフォーマット(MySQL5.6まで)。データやテーブル変更の実際に実行されたSQL文をログとして記録する。<br>Non-Deterministicということで、Unsafeとなる。<br>つまりレプリケーションのスレーブ側のサーバーでログを元に同じSQLを実行しても<br>同じになるとは限らないため。</p>
<p><a href="https://dev.mysql.com/doc/refman/5.6/ja/replication-sbr-rbr.html" target="_blank" rel="external">https://dev.mysql.com/doc/refman/5.6/ja/replication-sbr-rbr.html</a></p>
<p>実際にtableに値を追加してバイナリログを確認していく。</p>
<p>insertしてみる</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># set statement</span></div><div class="line">SET binlog_format = <span class="string">'STATEMENT'</span>;</div><div class="line"></div><div class="line">SHOW variables LIKE <span class="string">"binlog_format"</span>;</div><div class="line">+---------------+-----------+</div><div class="line">| Variable_name | Value     |</div><div class="line">+---------------+-----------+</div><div class="line">| binlog_format | STATEMENT |</div><div class="line">+---------------+-----------+</div><div class="line"></div><div class="line">FLUSH LOGS;</div><div class="line">Query OK, 0 rows affected (0.07 sec)</div><div class="line"></div><div class="line"> SHOW MASTER STATUS;</div><div class="line">+------------------+----------+--------------+------------------+-------------------+</div><div class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</div><div class="line">+------------------+----------+--------------+------------------+-------------------+</div><div class="line">| mysql-bin.000001 |      120 |              |                  |                   |</div><div class="line">+------------------+----------+--------------+------------------+-------------------+</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># insert</span></div><div class="line">INSERT INTO personal(name) VALUES(<span class="string">'tom'</span>);</div><div class="line"></div><div class="line"><span class="comment"># show binlog</span></div><div class="line">mysqlbinlog /usr/<span class="built_in">local</span>/var/mysql/mysql-bin.000001</div><div class="line"></div><div class="line">BEGIN</div><div class="line">/*!*/;</div><div class="line"><span class="comment"># at 199</span></div><div class="line"><span class="comment"># at 231</span></div><div class="line"><span class="comment">#151205 20:54:19 server id 1  end_log_pos 231 CRC32 0x40b495c3  Intvar</span></div><div class="line">SET INSERT_ID=1/*!*/;</div><div class="line"><span class="comment">#151205 20:54:19 server id 1  end_log_pos 345 CRC32 0x9668f30b  Query   thread_id=1 exec_time=0 error_code=0</span></div><div class="line">use `<span class="built_in">test</span>`/*!*/;</div><div class="line">SET TIMESTAMP=1449316459/*!*/;</div><div class="line">INSERT INTO personal(name) VALUES(<span class="string">'tom'</span>)</div><div class="line">/*!*/;</div><div class="line"><span class="comment"># at 345</span></div><div class="line"><span class="comment">#151205 20:54:19 server id 1  end_log_pos 376 CRC32 0x2247f106  Xid = 8</span></div><div class="line">COMMIT/*!*/;</div></pre></td></tr></table></figure>
<p>ログファイルはそれぞれ以下のような項目がある。</p>
<table>
<thead>
<tr>
<th>項目</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>at</td>
<td>バイナリファイル内でのオフセット</td>
</tr>
<tr>
<td>server id</td>
<td>ステートメントが実行されたサーバー</td>
</tr>
<tr>
<td>end_log_pos</td>
<td>次のイベントが開始される位置</td>
</tr>
<tr>
<td>thread_id</td>
<td>実行したスレッド</td>
</tr>
<tr>
<td>exec_time</td>
<td>実行時間</td>
</tr>
<tr>
<td>error_code</td>
<td>イベントの実行結果(0はエラーなし)</td>
</tr>
</tbody>
</table>
<p>続いてupdateしてみる</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># update</span></div><div class="line">UPDATE personal SET name=<span class="string">'tommy'</span> WHERE id = 1;</div><div class="line"></div><div class="line"><span class="comment"># show binlog</span></div><div class="line">mysqlbinlog /usr/<span class="built_in">local</span>/var/mysql/mysql-bin.000001</div><div class="line"></div><div class="line"><span class="comment"># at 376</span></div><div class="line"><span class="comment">#151205 20:56:39 server id 1  end_log_pos 455 CRC32 0x852a4061  Query   thread_id=1 exec_time=0 error_code=0</span></div><div class="line">SET TIMESTAMP=1449319780/*!*/;</div><div class="line">BEGIN</div><div class="line">/*!*/;</div><div class="line"><span class="comment"># at 455</span></div><div class="line"><span class="comment">#151205 20:56:39 server id 1  end_log_pos 574 CRC32 0xc5128701  Query   thread_id=1 exec_time=0 error_code=0</span></div><div class="line">SET TIMESTAMP=1449319780/*!*/;</div><div class="line">UPDATE personal SET name=<span class="string">'tommy'</span> WHERE id = 1</div><div class="line">/*!*/;</div><div class="line"><span class="comment"># at 574</span></div><div class="line"><span class="comment">#151205 20:56:39 server id 1  end_log_pos 605 CRC32 0x9217061a  Xid = 9</span></div><div class="line">COMMIT/*!*/;</div></pre></td></tr></table></figure>
<p>変更のないように同じ値でupdateを試してみると</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># update</span></div><div class="line">UPDATE personal SET name=<span class="string">'tommy'</span> WHERE id = 1;</div><div class="line"></div><div class="line"><span class="comment"># at 605</span></div><div class="line"><span class="comment">#151205 20:58:12 server id 1  end_log_pos 684 CRC32 0x7bcd8a62  Query   thread_id=1 exec_time=0 error_code=0</span></div><div class="line">SET TIMESTAMP=1449319820/*!*/;</div><div class="line">BEGIN</div><div class="line">/*!*/;</div><div class="line"><span class="comment"># at 684</span></div><div class="line"><span class="comment">#151205 20:58:12 server id 1  end_log_pos 803 CRC32 0x132e24fc  Query   thread_id=1 exec_time=0 error_code=0</span></div><div class="line">SET TIMESTAMP=1449319820/*!*/;</div><div class="line">UPDATE personal SET name=<span class="string">'tommy'</span> WHERE id = 1</div><div class="line">/*!*/;</div><div class="line"><span class="comment"># at 803</span></div><div class="line"><span class="comment">#151205 20:58:12 server id 1  end_log_pos 834 CRC32 0xb3d62bb8  Xid = 10</span></div><div class="line">COMMIT/*!*/;</div></pre></td></tr></table></figure>
<p>STATEMENTは実行されたSQL文をロギングするので、値に変更がなくてもログが出力される。</p>
<h3 id="Row-base"><a href="#Row-base" class="headerlink" title="Row base"></a>Row base</h3><p>つづいてROWフォーマットで同じように試してみる。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">SET binlog_format = <span class="string">'ROW'</span>;</div><div class="line">SHOW variables LIKE <span class="string">"binlog_format"</span>;</div><div class="line">+---------------+-------+</div><div class="line">| Variable_name | Value |</div><div class="line">+---------------+-------+</div><div class="line">| binlog_format | ROW   |</div><div class="line">+---------------+-------+</div><div class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</div></pre></td></tr></table></figure>
<p>データをinsertする。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># insert</span></div><div class="line">INSERT INTO personal(name) VALUES(<span class="string">'tom'</span>);</div><div class="line"></div><div class="line"><span class="comment"># show binlog</span></div><div class="line">mysqlbinlog /usr/<span class="built_in">local</span>/var/mysql/mysql-bin.000001</div><div class="line"></div><div class="line"><span class="comment"># at 580</span></div><div class="line"><span class="comment">#151205 21:08:25 server id 1  end_log_pos 652 CRC32 0x629d7346  Query   thread_id=1 exec_time=0 error_code=0</span></div><div class="line">SET TIMESTAMP=1449321070/*!*/;</div><div class="line">BEGIN</div><div class="line">/*!*/;</div><div class="line"><span class="comment"># at 652</span></div><div class="line"><span class="comment">#151205 21:08:25 server id 1  end_log_pos 706 CRC32 0xb60de956  Table_map: `test`.`personal` mapped to number 70</span></div><div class="line"><span class="comment"># at 706</span></div><div class="line"><span class="comment">#151205 21:08:25 server id 1  end_log_pos 750 CRC32 0x5af605af  Write_rows: table id 70 flags: STMT_END_F</span></div><div class="line"></div><div class="line">BINLOG <span class="string">'</span></div><div class="line">buJiVhMBAAAANgAAAMICAAAAAEYAAAAAAAEABHRlc3QACHBlcnNvbmFsAAIDDwIeAAJW6Q22</div><div class="line">buJiVh4BAAAALAAAAO4CAAAAAEYAAAAAAAEAAgAC//wCAAAAA3Rvba8F9lo=</div><div class="line">'/*!*/;</div><div class="line"><span class="comment"># at 750</span></div><div class="line"><span class="comment">#151205 21:08:25 server id 1  end_log_pos 781 CRC32 0x979d473d  Xid = 12</span></div><div class="line">COMMIT/*!*/;</div></pre></td></tr></table></figure>
<p>出力されるログはbase64エンコードされている。<br>オプションをつけて実行する。</p>
<p><strong>–base64-output</strong>でバイナリログのエントリを base-64 エンコードで出力できる。<br>DECODE-ROWSを指定して、-vオプションもつけることで行イベントをSQLステートメントとしてデコードできる。</p>
<p>詳細は<a href="http://dev.mysql.com/doc/refman/5.6/ja/mysqlbinlog.html#option_mysqlbinlog_base64-output" target="_blank" rel="external">このあたりを参考</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># show binlog</span></div><div class="line">mysqlbinlog /usr/<span class="built_in">local</span>/var/mysql/mysql-bin.000001 --base64-output=DECODE-ROWS -v</div><div class="line"></div><div class="line"><span class="comment"># at 580</span></div><div class="line"><span class="comment">#151205 21:08:25 server id 1  end_log_pos 652 CRC32 0x629d7346  Query   thread_id=1 exec_time=0 error_code=0</span></div><div class="line">SET TIMESTAMP=1449321070/*!*/;</div><div class="line">BEGIN</div><div class="line">/*!*/;</div><div class="line"><span class="comment"># at 652</span></div><div class="line"><span class="comment">#151205 21:08:25 server id 1  end_log_pos 706 CRC32 0xb60de956  Table_map: `test`.`personal` mapped to number 70</span></div><div class="line"><span class="comment"># at 706</span></div><div class="line"><span class="comment">#151205 21:08:25 server id 1  end_log_pos 750 CRC32 0x5af605af  Write_rows: table id 70 flags: STMT_END_F</span></div><div class="line"><span class="comment">### INSERT INTO `test`.`personal`</span></div><div class="line"><span class="comment">### SET</span></div><div class="line"><span class="comment">###   @1=2</span></div><div class="line"><span class="comment">###   @2='tom'</span></div><div class="line"><span class="comment"># at 750</span></div><div class="line"><span class="comment">#151205 21:08:25 server id 1  end_log_pos 781 CRC32 0x979d473d  Xid = 12</span></div><div class="line">COMMIT/*!*/;</div></pre></td></tr></table></figure>
<p>updateしてみる</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># update</span></div><div class="line">UPDATE personal SET name=<span class="string">'tommy'</span> WHERE id = 1;</div><div class="line"></div><div class="line"><span class="comment"># show binlog</span></div><div class="line">mysqlbinlog /usr/<span class="built_in">local</span>/var/mysql/mysql-bin.000001 --base64-output=DECODE-ROWS -v</div><div class="line"></div><div class="line"><span class="comment"># at 781</span></div><div class="line"><span class="comment">#151206 21:12:11 server id 1  end_log_pos 853 CRC32 0xf1228fc3  Query   thread_id=1 exec_time=0 error_code=0</span></div><div class="line">SET TIMESTAMP=1449368345/*!*/;</div><div class="line">BEGIN</div><div class="line">/*!*/;</div><div class="line"><span class="comment"># at 853</span></div><div class="line"><span class="comment">#151206 21:12:11 server id 1  end_log_pos 907 CRC32 0xa2ca1af1  Table_map: `test`.`personal` mapped to number 70</span></div><div class="line"><span class="comment"># at 907</span></div><div class="line"><span class="comment">#151206 21:12:11 server id 1  end_log_pos 963 CRC32 0xdfe4919c  Update_rows: table id 70 flags: STMT_END_F</span></div><div class="line"><span class="comment">### UPDATE `test`.`personal`</span></div><div class="line"><span class="comment">### WHERE</span></div><div class="line"><span class="comment">###   @1=1</span></div><div class="line"><span class="comment">###   @2='tom'</span></div><div class="line"><span class="comment">### SET</span></div><div class="line"><span class="comment">###   @1=1</span></div><div class="line"><span class="comment">###   @2='tommy'</span></div><div class="line"><span class="comment"># at 963</span></div><div class="line"><span class="comment">#151206 21:12:11 server id 1  end_log_pos 994 CRC32 0x81ba30c7  Xid = 16</span></div><div class="line">COMMIT/*!*/;</div></pre></td></tr></table></figure>
<p>同じ値でupdateする。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># update</span></div><div class="line">UPDATE personal SET name=<span class="string">'tommy'</span> WHERE id = 1;</div></pre></td></tr></table></figure>
<p>更新が発生してないのでログは出力されてない。</p>
<h3 id="Mixed-base"><a href="#Mixed-base" class="headerlink" title="Mixed base"></a>Mixed base</h3><p>最後にMIXEDを試してみる。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">SET binlog_format = <span class="string">'MIXED'</span>;</div><div class="line">Query OK, 0 rows affected (0.01 sec)</div><div class="line"></div><div class="line">SHOW variables LIKE <span class="string">"binlog_format"</span>;</div><div class="line">+---------------+-------+</div><div class="line">| Variable_name | Value |</div><div class="line">+---------------+-------+</div><div class="line">| binlog_format | MIXED |</div><div class="line">+---------------+-------+</div><div class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</div></pre></td></tr></table></figure>
<p>データをinsertする。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># insert</span></div><div class="line">INSERT INTO personal(name) VALUES(<span class="string">'tom'</span>);</div><div class="line"></div><div class="line"><span class="comment"># show binlog</span></div><div class="line">mysqlbinlog /usr/<span class="built_in">local</span>/var/mysql/mysql-bin.000001</div><div class="line"></div><div class="line"><span class="comment"># at 1198</span></div><div class="line"><span class="comment">#151206 21:14:35 server id 1  end_log_pos 1277 CRC32 0xe74bdeed     Query   thread_id=1 exec_time=0 error_code=0</span></div><div class="line">SET TIMESTAMP=1449374917/*!*/;</div><div class="line">BEGIN</div><div class="line">/*!*/;</div><div class="line"><span class="comment"># at 1277</span></div><div class="line"><span class="comment"># at 1309</span></div><div class="line"><span class="comment">#151206 21:14:35 server id 1  end_log_pos 1309 CRC32 0xd5a25039     Intvar</span></div><div class="line">SET INSERT_ID=3/*!*/;</div><div class="line"><span class="comment">#151206 21:14:35 server id 1  end_log_pos 1423 CRC32 0x2a2b7771     Query   thread_id=1 exec_time=0 error_code=0</span></div><div class="line">SET TIMESTAMP=1449374917/*!*/;</div><div class="line">INSERT INTO personal(name) VALUES(<span class="string">'tom'</span>)</div><div class="line">/*!*/;</div><div class="line"><span class="comment"># at 1423</span></div><div class="line"><span class="comment">#151206 21:14:35 server id 1  end_log_pos 1454 CRC32 0x83cb8b10     Xid = 23</span></div><div class="line">COMMIT/*!*/;</div></pre></td></tr></table></figure>
<p>STATEMENTと同様で実行したSQLの履歴がログに出力される。<br>updateする。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># update</span></div><div class="line">UPDATE personal SET name=<span class="string">'tommy'</span> WHERE id = 1;</div><div class="line"></div><div class="line"><span class="comment"># show binlog</span></div><div class="line">/*!*/;</div><div class="line"><span class="comment"># at 1732</span></div><div class="line"><span class="comment">#151206 21:16:48 server id 1  end_log_pos 1811 CRC32 0xd0ddade4     Query   thread_id=1 exec_time=0 error_code=0</span></div><div class="line">SET TIMESTAMP=1449375744/*!*/;</div><div class="line">BEGIN</div><div class="line">/*!*/;</div><div class="line"><span class="comment"># at 1811</span></div><div class="line"><span class="comment">#151206 21:16:48 server id 1  end_log_pos 1930 CRC32 0xb27b4345     Query   thread_id=1 exec_time=0 error_code=0</span></div><div class="line">SET TIMESTAMP=1449375744/*!*/;</div><div class="line">update personal <span class="built_in">set</span> name=<span class="string">'tommy'</span> <span class="built_in">where</span> id = 1</div><div class="line">/*!*/;</div><div class="line"><span class="comment"># at 1930</span></div><div class="line"><span class="comment">#151206 21:16:48 server id 1  end_log_pos 1961 CRC32 0x51bab152     Xid = 26</span></div><div class="line">COMMIT/*!*/;</div></pre></td></tr></table></figure>
<p>一部の関数を使った場合はROWフォーマットで出力される。<br>CURRENT_USER() を使って更新してみる。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># update</span></div><div class="line">UPDATE personal SET name=CURRENT_USER() WHERE id = 1;</div><div class="line"></div><div class="line"><span class="comment"># show binlog</span></div><div class="line">mysqlbinlog /usr/<span class="built_in">local</span>/var/mysql/mysql-bin.000006</div><div class="line"><span class="comment"># at 1961</span></div><div class="line"><span class="comment">#151206 21:18:04 server id 1  end_log_pos 2033 CRC32 0x62cb65dd     Query   thread_id=1 exec_time=0 error_code=0</span></div><div class="line">SET TIMESTAMP=1449376039/*!*/;</div><div class="line">BEGIN</div><div class="line">/*!*/;</div><div class="line"><span class="comment"># at 2033</span></div><div class="line"><span class="comment">#151206 21:18:04 server id 1  end_log_pos 2087 CRC32 0x6e57c961     Table_map: `test`.`personal` mapped to number 70</span></div><div class="line"><span class="comment"># at 2087</span></div><div class="line"><span class="comment">#151206 21:18:04 server id 1  end_log_pos 2150 CRC32 0x6a1d8b78     Update_rows: table id 70 flags: STMT_END_F</span></div><div class="line"></div><div class="line">BINLOG</div><div class="line">J7ljVhMBAAAANgAAACcIAAAAAEYAAAAAAAEABHRlc3QACHBlcnNvbmFsAAIDDwIeAAJhyVdu</div><div class="line">J7ljVh8BAAAAPwAAAGYIAAAAAEYAAAAAAAEAAgAC///8AwAAAAV0b21tefwDAAAACnJvb3RAbG9j</div><div class="line">YWx4ix1q</div><div class="line"><span class="string">'/*!*/;</span></div><div class="line"># at 2150</div><div class="line">#151206 21:18:04 server id 1  end_log_pos 2181 CRC32 0x12bf3230     Xid = 29</div><div class="line">COMMIT/*!*/;</div><div class="line"></div><div class="line"># decode base64 binlog</div><div class="line">mysqlbinlog /usr/local/var/mysql/mysql-bin.000001 --base64-output=DECODE-ROWS -v</div><div class="line"></div><div class="line"># at 1961</div><div class="line">#151206 21:18:04 server id 1  end_log_pos 2033 CRC32 0x62cb65dd     Query   thread_id=1 exec_time=0 error_code=0</div><div class="line">SET TIMESTAMP=1449376039/*!*/;</div><div class="line">BEGIN</div><div class="line">/*!*/;</div><div class="line"># at 2033</div><div class="line">#151206 21:18:04 server id 1  end_log_pos 2087 CRC32 0x6e57c961     Table_map: `test`.`personal` mapped to number 70</div><div class="line"># at 2087</div><div class="line">#151206 21:18:04 server id 1  end_log_pos 2150 CRC32 0x6a1d8b78     Update_rows: table id 70 flags: STMT_END_F</div><div class="line">### UPDATE `test`.`personal`</div><div class="line">### WHERE</div><div class="line">###   @1=1</div><div class="line">###   @2='tommy<span class="string">'</span></div><div class="line">### SET</div><div class="line">###   @1=1</div><div class="line">###   @2='root@<span class="built_in">local</span><span class="string">'</span></div><div class="line"># at 2150</div><div class="line">#151206 21:18:04 server id 1  end_log_pos 2181 CRC32 0x12bf3230     Xid = 29</div><div class="line">COMMIT/*!*/;</div></pre></td></tr></table></figure>
<p>となりROWベースとなっていることがわかる。</p>
<h3 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h3><p>STATEMENTは実行したSQL文がログに記載され、エンコードされていないためサイズも小さく、ログも読みづらい。<br>反面 Non-Deterministic なので、必ずしも同じクエリを実行しても同じ結果が得られるわけでない。<br>それに対してMIXED、ROWはサイズは大きくなるが、結果が異なってくるということはなく安全である。</p>
<p>デフォルトでMIXEDとかROWとかにした方がいいのじゃないかと思ってたけど、<br><a href="http://dev.mysql.com/doc/refman/5.7/en/replication-options-binary-log.html#sysvar_binlog_format" target="_blank" rel="external">MySQL 5.7.7からはdefaultがROW</a>になったようだった。</p>
<h4 id="参考にしたページ"><a href="#参考にしたページ" class="headerlink" title="参考にしたページ"></a>参考にしたページ</h4><p><a href="http://dev.mysql.com/doc/refman/5.6/ja/mysqlbinlog.html" target="_blank" rel="external">4.6.8 mysqlbinlog — バイナリログファイルを処理するためのユーティリティー</a><br><a href="https://mariadb.com/kb/en/mariadb/binary-log-formats/" target="_blank" rel="external">MariaDB Binary Log Formats</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;とあるアプリケーションをレンタルサーバーに設置しようとした際に、&lt;br&gt;&lt;a href=&quot;https://mariadb.com/&quot;&gt;MariaDB&lt;/a&gt;が以下のようなエラーを吐いていた。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Unsafe statement written to the binary log using statement format&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;since BINLOG_FORMAT = STATEMENT. Statement is unsafe because it&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;invokes a trigger or a stored function that inserts into an&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;AUTO_INCREMENT column. Inserted values cannot be logged correctly.&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;バイナリログフォーマットがSTATEMENTだと安全でないのでよろしくないらしい。&lt;br&gt;STATEMENTだと安全でないということはどういうことか。少し試してみた。&lt;/p&gt;
    
    </summary>
    
      <category term="memo" scheme="http://blog.kazu69.net/categories/memo/"/>
    
    
  </entry>
  
</feed>
