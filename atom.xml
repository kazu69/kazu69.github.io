<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[69log]]></title>
  <subtitle><![CDATA[福岡でwebの仕事をしています]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.kazu69.net/"/>
  <updated>2015-11-24T16:05:57.000Z</updated>
  <id>http://blog.kazu69.net/</id>
  
  <author>
    <name><![CDATA[kazu69]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[EFK(Elasticsearch + Fluentd + Kibana)をDocker-Composeで試してみた]]></title>
    <link href="http://blog.kazu69.net/2015/11/13/create-efk-with-docker/"/>
    <id>http://blog.kazu69.net/2015/11/13/create-efk-with-docker/</id>
    <published>2015-11-13T13:44:53.000Z</published>
    <updated>2015-11-24T16:05:57.000Z</updated>
    <content type="html"><![CDATA[<p>なかなか試せなかったログ収集・解析周りのツールを周回遅れで軽く試してみた。<br>Docker 1.8 から<a href="http://docs.docker.com/engine/reference/logging/fluentd/" target="_blank" rel="external">Fluentdもlog driver</a>に追加されているので、これを使って簡単なサンプルを構築した。</p>
<a id="more"></a>
<h2 id="構成">構成</h2><p>適当なnodeJSアプリケーションのフロントにnginxを立たせて、<br>収集したログをtd-agentで、Fluentdのログ収集コンテナに24224ポートで転送する。<br>あとはElasticsearch、Kibanaで解析・表示する。</p>
<p>アプリケーションからのログ転送はDockerのlog-driverオプションを使うので、td-agentの導入を省けた。<br><a href="https://github.com/fluent/fluentd-docker-image" target="_blank" rel="external">Fluentd</a>、<a href="https://github.com/dockerfile/elasticsearch" target="_blank" rel="external">Elasticsearch</a>、<a href="https://github.com/eliotk/docker-kibana" target="_blank" rel="external">Kibana</a>はそれぞれオフィシャルのイメージがあるので、そちらを活用した。<br>Elasticsearchは9200ポート、kibanaは5601ポートを使った。</p>
<h2 id="ログ収集・解析基盤のセットアップ">ログ収集・解析基盤のセットアップ</h2><h3 id="Fluentd">Fluentd</h3>
<script src="https://gist-it.appspot.com/github/kazu69/docker-efk/blob/master/fluentd/Dockerfile"></script>

<p>fluentdの設定はログをElasticsearch(9200ポート)に転送している。<br>forwardで転送されてきたログでdockerというタグのついたものを9200ポートで送信している。<br>logstash_formatの設定は出力形式、これがfalseの場合kibanaで解析する際に@timestampフィールドが作成されないようで時系列で集計できない。</p>

<script src="https://gist-it.appspot.com/github/kazu69/docker-efk/blob/master/fluentd/fluent.conf"></script>

<h3 id="kibana">kibana</h3><p>5601ポートでアクセスすることで解析画面を表示できる。<br>これはどちらかというと設定より使い方を習得する方が大変そうな。</p>
<h2 id="docker-composeのコンテナのヘルスチェック">docker-composeのコンテナのヘルスチェック</h2><p>docker-composeを使った際に、各コンテナとの疎通確認にncコマンドを使っている。そのため、ほとんどのentrypoint.shファイルの内容がほとんど同じになってしまった。</p>

<script src="https://gist-it.appspot.com/github/kazu69/docker-efk/blob/master/fluentd/entrypoint.sh"></script>

<p>コンテナ間の依存を解消する方法がいまいちわかってないのでこのような手法をとったのだが、もっといい方法がありそう。<br><a href="https://github.com/docker/compose/pull/686" target="_blank" rel="external">docker-compose issue#686</a>にあるようなので、今後解決されるかも。</p>
<h2 id="起動してみる">起動してみる</h2><script src="//gist.github.com/kazu69/84e383c0dab2e115352c.js?file=exec.sh"></script>
<p>kibanaにアクセスすると</p>
<p><img src="https://gist.githubusercontent.com/kazu69/84e383c0dab2e115352c/raw/3602e3920c3021754b7a8bda17f8b6505cd49b6d/1.png" alt=""></p>
<p>logstash形式のものをフィルタリング</p>
<p><img src="https://gist.githubusercontent.com/kazu69/84e383c0dab2e115352c/raw/3602e3920c3021754b7a8bda17f8b6505cd49b6d/2.png" alt=""></p>
<p>ということで、とりあえず最小限の環境は構築できた。</p>
<p>今回作成したサンプル <a href="https://github.com/kazu69/docker-efk" target="_blank" rel="external">kazu69/docker-efk</a></p>
<h3 id="参考にしたページ">参考にしたページ</h3><p><a href="http://stackoverflow.com/questions/31212547/passing-bash-code-through-the-environment-for-docker-compose/" target="_blank" rel="external">Passing bash code through the environment (for docker-compose)</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>なかなか試せなかったログ収集・解析周りのツールを周回遅れで軽く試してみた。<br>Docker 1.8 から<a href="http://docs.docker.com/engine/reference/logging/fluentd/">Fluentdもlog driver</a>に追加されているので、これを使って簡単なサンプルを構築した。</p>]]>
    
    </summary>
    
      <category term="web" scheme="http://blog.kazu69.net/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[active_support_tinyint]]></title>
    <link href="http://blog.kazu69.net/2015/10/22/active-support-tinyint/"/>
    <id>http://blog.kazu69.net/2015/10/22/active-support-tinyint/</id>
    <published>2015-10-22T09:17:13.000Z</published>
    <updated>2015-11-24T15:06:55.000Z</updated>
    <content type="html"><![CDATA[<p>Activesupportを使っていて、tinyint(1)なレコードの取り扱いにちょっとハマったので備忘録。</p>
<a id="more"></a>
<p>MySQLでtinyint(1)はbooleanと同じなので 0 か 1 しかとらないはずだが、<br>今回はなぜか2なる値があり、常にfalseとなっていた。</p>
<p>これは<a href="http://apidock.com/rails/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter/emulate_booleans/class" target="_blank" rel="external">ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter#emulate_booleans</a>が使われれるため。</p>
<p>あまりないけど、こういう場合は以下の方法で解決出来る。</p>
<p>Railsアプリケーション全体でこの設定を使わない場合</p>
<script src="//gist.github.com/kazu69/da4db6ba0b96673840a5.js?file=application.rb"></script>
<p>または、Model単位ではキャストする</p>
<script src="//gist.github.com/kazu69/da4db6ba0b96673840a5.js?file=example_model.rb"></script>
<p>ちゃんとソースにコメント書いてあるんで比較的常識的なことだったんですね…。</p>
<p>参考にしたページ<br><a href="https://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb#L107-L116" target="_blank" rel="external">rails/activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb</a><br><a href="https://github.com/rails/rails/blob/4-2-stable/activerecord/lib/active_record/attributes.rb#L50-L52" target="_blank" rel="external">rails/activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Activesupportを使っていて、tinyint(1)なレコードの取り扱いにちょっとハマったので備忘録。</p>]]>
    
    </summary>
    
      <category term="ruby" scheme="http://blog.kazu69.net/categories/ruby/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[stackprofを使って、Rspecのテストのパフォーマンス改善]]></title>
    <link href="http://blog.kazu69.net/2015/10/20/use-stackprof-improve-performance-of-rspec/"/>
    <id>http://blog.kazu69.net/2015/10/20/use-stackprof-improve-performance-of-rspec/</id>
    <published>2015-10-20T13:58:38.000Z</published>
    <updated>2015-11-24T15:05:57.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://github.com/tmm1/stackprof" target="_blank" rel="external">stackprof</a> を使えばrspecのプロファイリングが出来る戸言うことを知ったので、<br>早速テストでためしてみた。</p>
<a id="more"></a>
<p>Gemfileに追加して</p>
<script src="//gist.github.com/kazu69/8628e1ed92533fd61881.js?file=Gemfile"></script>
<p>そしてbundle install。</p>
<p>around hookでテストの開始前後での時間を計測します。<br>stackprofの設定は環境変数で渡します。</p>
<p>ということで、いかのようにspec_helper.rbに追加。</p>
<script src="//gist.github.com/kazu69/8628e1ed92533fd61881.js?file=spec_helper.rb"></script>
<p>そして実行</p>
<script src="//gist.github.com/kazu69/8628e1ed92533fd61881.js?file=run.sh"></script>
<p>指定したディレクトリにプロフファイリング結果がdumpされる</p>
<script src="//gist.github.com/kazu69/8628e1ed92533fd61881.js?file=ls.sh"></script>
<p>プロファイル結果を分析</p>
<script src="//gist.github.com/kazu69/8628e1ed92533fd61881.js?file=profile.sh"></script>
<p>この場合 ActiveSupport::Callbacks#run_callbacks が重そう。</p>
<p>こんな感じで重い箇所を洗い出して改善していける。</p>
<p>参考にしたページ<br><a href="http://blog.iempire.ru/2015/10/13/profiling-specs/" target="_blank" rel="external">Profiling RSpec examples with Stackprof</a><br><a href="http://spring-mt.hatenablog.com/entry/2015/01/24/112454" target="_blank" rel="external">railsアプリでstackprofを使ってボトルネックを探す + JSON::Schema(2.2.1)の高速化</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://github.com/tmm1/stackprof">stackprof</a> を使えばrspecのプロファイリングが出来る戸言うことを知ったので、<br>早速テストでためしてみた。</p>]]>
    
    </summary>
    
      <category term="ruby" scheme="http://blog.kazu69.net/categories/ruby/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[nginScriptを試してみた]]></title>
    <link href="http://blog.kazu69.net/2015/10/18/tried-nginscript/"/>
    <id>http://blog.kazu69.net/2015/10/18/tried-nginscript/</id>
    <published>2015-10-18T14:40:20.000Z</published>
    <updated>2015-10-26T16:01:32.000Z</updated>
    <content type="html"><![CDATA[<p>nginx上で動作するJavaScript仮想マシンである、<a href="https://www.nginx.com/blog/launching-nginscript-and-looking-ahead/" target="_blank" rel="external">nginScript</a> なるものがリリースされた。<br>(まだプレビュー版とのことだが)</p>
<p>これはリクエスト処理の実行時に評価され、特定のリクエストに対してnginxの内部処理をを調整することが可能になる。っぽい。</p>
<p><a href="https://www.nginx.com/resources/wiki/modules/lua/" target="_blank" rel="external">Lua</a>や<a href="https://github.com/matsumoto-r/ngx_mruby" target="_blank" rel="external">ngx_mruby</a>と同じような感じで使えるのようだ。</p>
<a id="more"></a>
<p><a href="https://www.nginx.com/resources/wiki/nginScript/" target="_blank" rel="external">nginScriptのwiki</a>を参考にDocker + docker-machineで簡単に試してみた。</p>
<h2 id="install_and_build_nginx">install and build nginx</h2><p><a href="http://nginx.org/en/download.html" target="_blank" rel="external">nginx: download</a>から最新のバージョンを取得する。<br>またnginScriptはオプションとして提供されているので、<a href="http://hg.nginx.org/" target="_blank" rel="external">nginxのMercurial</a>から取得する必要がある。</p>
<script src="//gist.github.com/kazu69/d531eea15e20201c0742.js?file=Dockerfile"></script>
<p>これを適当な感じでbuild</p>
<script src="//gist.github.com/kazu69/d531eea15e20201c0742.js?file=build.sh"></script>
<h2 id="nginScript">nginScript</h2><p>ちなみにnginx.confは以下のようになっている</p>
<script src="//gist.github.com/kazu69/d531eea15e20201c0742.js?file=nginx.conf"></script>
<h3 id="js_run">js_run</h3><p>nginScriptはlocationごとに評価され、実行される。<br>locationディレクティブでnginScriptを利用する際はjs_run で実行する必要がある。</p>
<script src="//gist.github.com/kazu69/d531eea15e20201c0742.js?file=js_run.sh"></script>
<h3 id="js_set">js_set</h3><p>また、JavaScriptを使い内部変数を定義することもできる。<br>その際はhttpディレクティブに設定を書く必要がある。</p>
<script src="//gist.github.com/kazu69/d531eea15e20201c0742.js?file=js_set.sh"></script>
<h3 id="$r(リクエストオブジェクト)">$r(リクエストオブジェクト)</h3><p>その他、リクエストの内部変数として $rがJavaScriptオブジェクトとして利用できる。<br>$rはsendHeader(),send(),finish() というメソッドが現在のところ定義されており、これらを利用してレスポンスを返すことができる。</p>
<h3 id="リクエストパラメータ">リクエストパラメータ</h3><p>$r.args にJavaScriptのオブジェクトとして格納されている。</p>
<p>nginScriptはECMA標準準拠というわけではないようだが、基本的なことはできそう。<br>適当な関数を定義して評価することや、カスタムヘッダーを追加することなどはできた。</p>
<script src="//gist.github.com/kazu69/d531eea15e20201c0742.js?file=function.sh"></script>
<p>ということで、ほとんど<a href="http://hg.nginx.org/njs/file/tip/README" target="_blank" rel="external">Readme</a> をそのまま試したことになるけど、<br>いまのところlocationディレクティブにhookして、リクエスト、レスポンスをJavaScriptで操作できる位という感じだった。</p>
<p>参考にしたページ<br><a href="https://www.nginx.com/resources/wiki/nginScript/" target="_blank" rel="external">nginx Wiki documentation</a><br><a href="http://hg.nginx.org/njs/file/11d4d66851ed/README?_ga=1.105907269.772607199.1445353842" target="_blank" rel="external">README</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>nginx上で動作するJavaScript仮想マシンである、<a href="https://www.nginx.com/blog/launching-nginscript-and-looking-ahead/">nginScript</a> なるものがリリースされた。<br>(まだプレビュー版とのことだが)</p>
<p>これはリクエスト処理の実行時に評価され、特定のリクエストに対してnginxの内部処理をを調整することが可能になる。っぽい。</p>
<p><a href="https://www.nginx.com/resources/wiki/modules/lua/">Lua</a>や<a href="https://github.com/matsumoto-r/ngx_mruby">ngx_mruby</a>と同じような感じで使えるのようだ。</p>]]>
    
    </summary>
    
      <category term="nginx" scheme="http://blog.kazu69.net/categories/nginx/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Subresource Integrityについて調べた]]></title>
    <link href="http://blog.kazu69.net/2015/10/01/check-for-subresource-integrity/"/>
    <id>http://blog.kazu69.net/2015/10/01/check-for-subresource-integrity/</id>
    <published>2015-10-01T13:34:16.000Z</published>
    <updated>2015-10-13T15:24:22.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://githubengineering.com/subresource-integrity/" target="_blank" rel="external">Subresource Integrity</a> という記事をみて、<br>ちょっと興味深かったのでSubresource Integrityについて、軽く見てみた。</p>
<a id="more"></a>
<h2 id="Subresource_Integrityはどういうものか">Subresource Integrityはどういうものか</h2><p>おそらく、以下のようなもの。<br>ウェブアプリケーションでCDNをつかって、サブリソースを参照することは当たり前になっている。<br>しかし参照先のサブリソースが安全であるという保証はない。<br>もし、CDN経由で参照しているサブリソースが攻撃者により改変された場合、XSSの危険性が生じる。</p>
<p>これは、サブリソースの整合性をチェックする仕組みを導入することで、危険を回避できる。<br>Subresource Integrityとは、サブリースをSHA256, SHA512などでハッシュ化して、linkタグやscriptタグにintegrity属性として付与することで、整合性を確認できるようにしたもの。<br>もし、integrity属性がある場合は、ブラウザは読み込み時に整合性をチェックして一致した場合にのみロードされる。</p>
<h2 id="Subresource_Integrityを試す">Subresource Integrityを試す</h2><p><a href="https://developer.mozilla.org/ja/docs/Web/Security/Subresource_Integrity" target="_blank" rel="external">MDN Subresource Integrity</a>をみると<br>Chrome v45, Firefox v43 とのことだったので、Chrome Canaryで試した。</p>
<p>まず適当なファイルをsha256でハッシュ化して、integrity属性の値を生成する。</p>
<script src="//gist.github.com/kazu69/40a6d366181e79fbe703.js?file=create.sh"></script>
<p>あとはscriptタグなりlinkタグなりにintegrity属性を付与する</p>
<script src="//gist.github.com/kazu69/40a6d366181e79fbe703.js?file=index.html"></script>
<p>ちなみにscriptタグに付与しているcrossorigin属性は「anonymous」キーワードが指定された場合、<br>リクエストにはcookieやクライアントサイドのSSL証明書、HTTP認証などのユーザ認証情報は利用されなくなるらしい。</p>
<p>もし、コードが改変され整合性が確認できない場合は</p>
<script src="//gist.github.com/kazu69/40a6d366181e79fbe703.js?file=faild.js"></script>
<p>また、そのような場合に備えてfallbackを追加しておく</p>
<script src="//gist.github.com/kazu69/40a6d366181e79fbe703.js?file=fallback.html"></script>
<p>ハッシュ値は<a href="https://www.srihash.org/" target="_blank" rel="external">SRI Hash Generator</a>を使うと便利。<br>Wordpressでは<a href="https://wordpress.org/plugins/wp-sri/" target="_blank" rel="external">Subresource Integrity (SRI) Manager</a>などが使えそう。</p>
<p>参考しにたページ<br><a href="http://githubengineering.com/subresource-integrity/" target="_blank" rel="external">Subresource Integrity</a><br><a href="https://developer.mozilla.org/ja/docs/Web/Security/Subresource_Integrity" target="_blank" rel="external">Subresource Integrity</a><br><a href="https://developer.mozilla.org/ja/docs/Web/HTML/CORS_settings_attributes" target="_blank" rel="external">CORS 設定属性</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://githubengineering.com/subresource-integrity/">Subresource Integrity</a> という記事をみて、<br>ちょっと興味深かったのでSubresource Integrityについて、軽く見てみた。</p>]]>
    
    </summary>
    
      <category term="web" scheme="http://blog.kazu69.net/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScriptでMonadを試した]]></title>
    <link href="http://blog.kazu69.net/2015/09/28/try-monad-in-javascript/"/>
    <id>http://blog.kazu69.net/2015/09/28/try-monad-in-javascript/</id>
    <published>2015-09-28T12:42:01.000Z</published>
    <updated>2015-10-13T15:20:24.000Z</updated>
    <content type="html"><![CDATA[<p>最近、時間のあるときにすこしだけ<a href="https://www.haskell.org/" target="_blank" rel="external">Haskell</a>を触ったりもしていて、<br>Monadなるものに触れた。</p>
<p>そこで、それっぽいものをJavaScriptで試してみた。</p>
<a id="more"></a>
<p>確実に俄か感じではあるので、漠然としている理解であるけど。</p>
<h2 id="Monad_Laws">Monad Laws</h2><p>Monadと名乗るにはMonad則を満たさないといけない。<br>Monad則とは</p>
<ol>
<li>return x &gt;&gt;= f == f x</li>
<li>m &gt;&gt;= return == m</li>
<li>(m &gt;&gt;= f) &gt;&gt;= g == m &gt;&gt;= (\x -&gt; f x &gt;&gt;= g)</li>
</ol>
<p>mはMonadを指す。<br>(&gt;&gt;=) でMonadから値を取り出す。<br>return はMonadに値を渡す。</p>
<p>という認識でこの法則を読み取っている。<br>ということで、これを満たすことのできるclassを作成した。</p>
<script src="//gist.github.com/kazu69/96344bf338061ca75552.js?file=monad.class.js"></script>
<p>create(returnと同じ感じ)でMonadをインスタンス化して、<br>bind(&gt;&gt;==と同じ感じ)でMonadに値を渡し、結果を得る。というシンプルなクラス。</p>
<p>Qunitを使ってMonad則をテストする</p>
<script src="//gist.github.com/kazu69/96344bf338061ca75552.js?file=test.js"></script>
<p>認識が正しければ、Monad則を満たしたので、Monadである。</p>
<p>いろいろなMonadを試してみる</p>
<h3 id="Identity_Monad">Identity Monad</h3><script src="//gist.github.com/kazu69/96344bf338061ca75552.js?file=identity.js"></script>
<h3 id="Maybe_Monad">Maybe Monad</h3><script src="//gist.github.com/kazu69/96344bf338061ca75552.js?file=maybe.js"></script>
<h3 id="List_Monad">List Monad</h3><script src="//gist.github.com/kazu69/96344bf338061ca75552.js?file=list.js"></script>
<p>ということで、JavaScriptでためしてデザインパターンという認識をした。</p>
<p>参考にしたページ<br><a href="https://curiosity-driven.org/monads-in-javascript" target="_blank" rel="external">Monads in JavaScript</a><br><a href="http://qiita.com/7shi/items/547b6137d7a3c482fe68" target="_blank" rel="external">モナド則がちょっと分かった？</a><br><a href="http://labs.timedia.co.jp/2011/03/monad-you-already-know.html" target="_blank" rel="external">モナド: お前はもう知っている</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近、時間のあるときにすこしだけ<a href="https://www.haskell.org/">Haskell</a>を触ったりもしていて、<br>Monadなるものに触れた。</p>
<p>そこで、それっぽいものをJavaScriptで試してみた。</p>]]>
    
    </summary>
    
      <category term="javascript" scheme="http://blog.kazu69.net/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[gulp v4.0を眺めてみた]]></title>
    <link href="http://blog.kazu69.net/2015/09/03/watched-gulp4/"/>
    <id>http://blog.kazu69.net/2015/09/03/watched-gulp4/</id>
    <published>2015-09-03T11:38:07.000Z</published>
    <updated>2015-09-07T15:04:20.000Z</updated>
    <content type="html"><![CDATA[<p>gulpfileをES6に置き換える必要があり、何気にgulpの情報追っていると、<br>そろそろv4.0がリリースされそうなのでざっくりと眺めてみた。</p>
<a id="more"></a>
<h2 id="gulpfileをES6で書く">gulpfileをES6で書く</h2><p>まず、本来の目的だったこの件、<a href="https://github.com/gulpjs/gulp/issues/830#issuecomment-123601869" target="_blank" rel="external">v3.9</a>ですでに対応されていた。</p>
<p>以下の条件であれば利用可能のようだった。</p>
<ul>
<li>gulp v3.9以上</li>
<li>gulpfile.jsをgulpfile.babel.jsとする</li>
<li><a href="https://www.npmjs.com/package/babel-core" target="_blank" rel="external">babel-core</a> をインストールすること</li>
</ul>
<p>内部的にはbabelで変換しているようだ。</p>
<hr>
<p>続いて、v4.0の<a href="https://github.com/gulpjs/gulp/blob/4.0/docs/API.md" target="_blank" rel="external">CAHNGELOG</a>も眺めてみた。</p>
<h2 id="gulp4-0をインストール">gulp4.0をインストール</h2><script src="//gist.github.com/kazu69/020451222ded7461a7cc.js?file=install.sh"></script>
<h2 id="cliの変更点">cliの変更点</h2><p><code>--tasks-json</code> と <code>--verify</code> オプションが追加されてる。</p>
<p>–task-json はタスクをjson形式で出力する。</p>
<script src="//gist.github.com/kazu69/020451222ded7461a7cc.js?file=cli-task-json.sh"></script>
<p>–verify はpluginsがpackage.jsonを参照しているかチェックする。</p>
<script src="//gist.github.com/kazu69/020451222ded7461a7cc.js?file=gulp-verify.sh"></script>
<h2 id="APIの変更点">APIの変更点</h2><p>大きな変更点はタスク処理機構が、<a href="https://www.npmjs.com/package/orchestrator" target="_blank" rel="external">orchestrator</a> から <a href="https://github.com/phated/undertaker" target="_blank" rel="external">undertaker</a> に変更される点だった。</p>
<p>orchestratorではタスクの同期制御サポートされてないが、undertakerで使うことでタスクの同期処理などが簡単に解決できるようになる。</p>
<p>処理機構の変更のため、APIも大きく変更されている。</p>
<p>gulp.taskはこれまで引数に<strong>gulp.task(name[, deps], fn)</strong>となっていたが、<strong>gulp.task([name,] fn)</strong>と依存タスクを指定するdepsがなくなった。</p>
<p><code>src</code>、<code>dest</code>、<code>watch</code>、<code>symlink</code>はgulpのclassを使用しているが、<br>それ以外は<a href="https://github.com/phated/undertaker" target="_blank" rel="external">undertaker</a>のメソッドをcallしている。</p>
<p>追加されたAPIは</p>
<p><code>gulp.parallel</code>、<code>gulp.series</code>、<code>gulp.tree</code>、<code>gulp.registry</code>、<code>gulp.lastRun</code>となる。</p>
<h3 id="gulp-parallel">gulp.parallel</h3><p>これまでは<a href="https://www.npmjs.com/package/run-sequence" target="_blank" rel="external">runSequence</a>などを使っていたTaskの並列化を行うことができる。</p>
<script src="//gist.github.com/kazu69/020451222ded7461a7cc.js?file=gulpfile1.js"></script>
<script src="//gist.github.com/kazu69/020451222ded7461a7cc.js?file=parallel.sh"></script>
<h3 id="gulp-series">gulp.series</h3><p>こちらはTaskを直列化できる。</p>
<script src="//gist.github.com/kazu69/020451222ded7461a7cc.js?file=gulpfile2.js"></script>
<script src="//gist.github.com/kazu69/020451222ded7461a7cc.js?file=series.sh"></script>
<h3 id="gulp-tree">gulp.tree</h3><p>タスクの依存性をtreeで返す。内部的にはを呼んでいる。<a href="https://github.com/phated/undertaker#options" target="_blank" rel="external">optionはundertakerと同じ</a>。</p>
<script src="//gist.github.com/kazu69/020451222ded7461a7cc.js?file=gulpfile3.js"></script>
<script src="//gist.github.com/kazu69/020451222ded7461a7cc.js?file=tree.sh"></script>
<h3 id="gulp-registry">gulp.registry</h3><p>カスタムタスクを登録する。</p>
<p>例えば、別ファイルに分割してあるタスクをrequireして、registryを使って登録することで、<br>読み込んだタスクを使えるようになる。</p>
<p>これまでファイルを分割した際は、<a href="https://www.npmjs.com/package/require-dir" target="_blank" rel="external">require-dir</a>などでファイルを読込んでいたのが、v4.0からはrequireしてregistryで行うようになり、直感的に扱える感じになる。</p>
<p>例えば以下のようにタスクを別ファイルに作成している場合</p>
<script src="//gist.github.com/kazu69/020451222ded7461a7cc.js?file=custom.js"></script>
<p>reqistryで登録することで使用できる。</p>
<script src="//gist.github.com/kazu69/020451222ded7461a7cc.js?file=gulpfile4.js"></script>
<h3 id="gulp-lastRun">gulp.lastRun</h3><p>タスクの完了した時間をUNIX TIMESTAM(millisecond)で返す。</p>
<script src="//gist.github.com/kazu69/020451222ded7461a7cc.js?file=gulpfile5.js"></script>
<hr>
<p>ということで、ざっくり見て行ったがバージョン4.0から非同期処理まわりがpluginなしで行えるようになる。<br>v4.0がいつリリースされるのかちょっとわからないが、必要あであれば先にundertakerを使っておくようにすると良さそう。</p>
<p>参考サイト<br><a href="http://www.ociweb.com/resources/publications/sett/gulp-4/" target="_blank" rel="external">gulp 4</a><br><a href="http://blog.reactandbethankful.com/posts/2015/04/23/building-with-gulp-3-and-4-part-2-gulp-anatomy/" target="_blank" rel="external">Building with Gulp 3 and 4 (Part 2: Gulp’s anatomy)</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>gulpfileをES6に置き換える必要があり、何気にgulpの情報追っていると、<br>そろそろv4.0がリリースされそうなのでざっくりと眺めてみた。</p>]]>
    
    </summary>
    
      <category term="node" scheme="http://blog.kazu69.net/tags/node/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[low-level css framework Basscssが良さそうなきがする]]></title>
    <link href="http://blog.kazu69.net/2015/08/09/low-level-css-basscss-looks-good/"/>
    <id>http://blog.kazu69.net/2015/08/09/low-level-css-basscss-looks-good/</id>
    <published>2015-08-09T03:41:24.000Z</published>
    <updated>2015-08-10T05:51:27.000Z</updated>
    <content type="html"><![CDATA[<p>ここ最近結構cssを弄っていたけど、その時に見つけた<a href="http://www.basscss.com/" target="_blank" rel="external">Basscss</a>というcss Frameworkが良さそうだった。</p>
<a id="more"></a>
<p>BasscssはOOCSSの原理に則り設計されている。<br>特徴としては、依存度の小さいImuutableなutility moduleを備えている。<br>依存性が低いので、副作用が少なくなる。<br>また軽量であり、<a href="https://github.com/postcss/postcss" target="_blank" rel="external">postCSS</a>を使っているおり、必要なmoduleのみをビルドできる。</p>
<h2 id="マルチクラスでの実装">マルチクラスでの実装</h2><p><a href="http://www.basscss.com/docs/guides/" target="_blank" rel="external">Document</a>にある通りなのだが、マルチクラスで実装している。</p>
<p>以下のような感じ(<a href="http://www.basscss.com/docs/guides/layout/" target="_blank" rel="external">Page Layoutより</a>)</p>
<script src="//gist.github.com/kazu69/8e71f5307a7a93c9f236.js?file=navigation.html"></script>
<script src="//gist.github.com/kazu69/8e71f5307a7a93c9f236.js?file=3colums.html"></script>
<p>基本的な機能をImuutableなmoduleで実装していくことで、変更に対しても柔軟に対応できる。<br>また、Imuutableなmoduleはシンプルな設計なのでコードの可読性が確保できる。<br>HTML側が複雑になるという懸念もあるが、シングルクラス設計に比べHTML側である程度スタイルが予想できる点では、メリットになるのではないかなと思う。</p>
<h2 id="依存度が低い">依存度が低い</h2><p><a href="http://www.basscss.com/stats/" target="_blank" rel="external">stats</a> にあるように、依存度が低いことがこのFrameworkの特徴。</p>
<p>CSSはシングルクラスで設計する場合、どうしても依存性が高くなり、副作用が発生してくる。<br>マルチクラス設計にしてしまうことで、この問題を回避している。<br>サービス運用していくうちに、ネーミングルールと継承のあたりで、CSSは破綻の方に向かっていきがちなので、<br>依存度の低いFrameworkを使用して、基本設計を行うことで解決できるではないかと思う。</p>
<p><a href="http://www.basscss.com/docs/reference/principles/" target="_blank" rel="external">principles</a>にあるように、Basscssでは、短くシンプルな命名規則を用い、コンテンツに由来するコンポーネントの再利用を避けること。基本的なコンポーネントの構造はテーマから分離することなど、設計の原則もはっきりしている。</p>
<p>自分でもCSSの設計は色々な手法を試してみたが、マルチクラスでImuutableなmoduleを使うことに落ち着いた。<br>Basscssは自分が実務で取り入れた考え方なり、実装方法と似た感じだった。</p>
<p>Basscssのような依存度の低いImuutableなmoduleをうまく使ってマルチクラスで実装し、運用していく手法を選択するか、<br>厳密なネーミングルールのもとシングルクラスで実装し、運用フェーズでCSSが破綻する前にコンポーネントそのものを作り直していく手法のどちらかが今の所いいのかなと思っている。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>ここ最近結構cssを弄っていたけど、その時に見つけた<a href="http://www.basscss.com/">Basscss</a>というcss Frameworkが良さそうだった。</p>]]>
    
    </summary>
    
      <category term="css" scheme="http://blog.kazu69.net/tags/css/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HTTP/2サーバーh2oでサーバプッシュを試してみた]]></title>
    <link href="http://blog.kazu69.net/2015/08/05/try-http2-with-h2o-and-mruby/"/>
    <id>http://blog.kazu69.net/2015/08/05/try-http2-with-h2o-and-mruby/</id>
    <published>2015-08-05T07:56:14.000Z</published>
    <updated>2015-08-06T11:25:34.000Z</updated>
    <content type="html"><![CDATA[<p>HTTP/2 serverである<a href="https://github.com/h2o/h2o" target="_blank" rel="external">h2o</a>で初めてのサーバプッシュを試してみた。</p>
<a id="more"></a>
<p>今回は<a href="https://github.com/matsumoto-r/h2o_mruby" target="_blank" rel="external">h2o_mruby</a>も触ってみたかったということで、h2oをmrubyとともにビルドして少し触ってみた。</p>
<p><a href="http://blog.kazu69.net/2015/07/20/tried-to-touch-nginx-mruby/">前回</a>試してみた<a href="https://github.com/matsumoto-r/ngx_mruby" target="_blank" rel="external">nginx_mruby</a>と同じくh2o_mrunyもサーバーをrubyで動的に制御することができる。</p>
<h2 id="サーバプッシュとは">サーバプッシュとは</h2><p>HTTP/1の場合、サーバーはクライアントからのリクエストに応じて、レスポンスを返すものでした。<br>しかし、HTTP/2の場合はクライアントからのリクエストがなくても、サーバーからレスポンスを返すことができる。</p>
<p>今回は<a href="https://w3c.github.io/resource-hints/" target="_blank" rel="external">resouce hints</a>にあるように、リクエストヘッダーに<code>link:&lt;style.css&gt;; rel=preload; as=stylesheet</code> のようなLinkヘッダーを追加してレスポンスを返すようにした。</p>
<p>こうすることで、h2oサーバーは予めクライアントが次に何をリクエストするのか把握できる。<br>そして、クライアントがリクエストする前に、このファイルを返してくれる。</p>
<p>これにより、クライアントは次のリクエストからそのレスポンスまでの待ち時間(レイテンシ)を短縮できる。<br>そのため、これまでよりもブラウザは早く描画を行うことができるということになるっぽい。</p>
<h2 id="構成">構成</h2><p>今回は、フロントにh2oを立たせて、リクエストをnginxにproxyする。<br>そして、nginx側でheaderにLinkヘッダーを追加してレスポンスを返す。</p>
<p>こうすることで、h2oはヘッダーを解釈して、サーバプッシュを行ってくれる。</p>
<script src="//gist.github.com/kazu69/fb321bd71b19878bd99d.js?file=structure.txt"></script>
<p>手元の開発環境は以下の感じ<br>今回はサーバー側からプッシュする静的ファイルとして適当なcssをnginx側に追加しておいた。</p>
<script src="//gist.github.com/kazu69/fb321bd71b19878bd99d.js?file=tree.sh"></script>
<h2 id="h2o_with_mruby_の構築">h2o with mruby の構築</h2><p>今回もubuntuで、以下のようにDcokerでコンテナをビルドした。</p>
<script src="//gist.github.com/kazu69/fb321bd71b19878bd99d.js?file=Dockerfile"></script>
<script src="//gist.github.com/kazu69/fb321bd71b19878bd99d.js?file=h2o.conf"></script>
<script src="//gist.github.com/kazu69/fb321bd71b19878bd99d.js?file=build_config.rb"></script>
<h2 id="nginx_の構築">nginx の構築</h2><p>nginxは<a href="http://blog.kazu69.net/2015/07/20/tried-to-touch-nginx-mruby/">前回</a>と同じ感じで作成した。</p>
<script src="//gist.github.com/kazu69/1a1922409dd3514f6f6c.js?file=Dockerfile"></script>
<p>nginx.confは以下のようにして</p>
<script src="//gist.github.com/kazu69/1a1922409dd3514f6f6c.js?file=nginx.conf"></script>
<p>modify_header.rb でレスポンスヘッダーにLinkヘッダーを追加する。</p>
<script src="//gist.github.com/kazu69/fb321bd71b19878bd99d.js?file=modify_header.rb"></script>
<h2 id="ブラウザでアクセスできるようにPortFoward">ブラウザでアクセスできるようにPortFoward</h2><p><a href="http://boot2docker.io/" target="_blank" rel="external">boot2docker</a>をつかっているので、ブラウザでDcokerコンテナにアクセスできるようにPortFowardしておく。</p>
<script src="//gist.github.com/kazu69/fb321bd71b19878bd99d.js?file=portfoward.sh"></script>
<h2 id="Docker_run">Docker run</h2><p>準備できたのでnginx、 h2oのコンテナを立ち上げていく。</p>
<script src="//gist.github.com/kazu69/fb321bd71b19878bd99d.js?file=docker_run.sh"></script>
<p>nginxのipを泥臭く取ってきてから、h2oをビルドしてしまったが、<br>本当は <a href="http://blog.matsumoto-r.jp/?p=4326" target="_blank" rel="external">Dockerとmrubyで迅速かつ容易にnginxとapacheの柔軟なリバースプロキシ構成を構築する</a> にあるようにmrubyで動的変更できるように、環境変数を使って対応する予定でした。<br>しかし、h2o_mrubyを把握できてないのでうまくいかずに、今回は一旦保留とした。</p>
<p>とりあえず、これでブラウでアクセスしてみると分かりそう。</p>
<h2 id="ブラウザ(Chrome)でアクセス">ブラウザ(Chrome)でアクセス</h2><p>あらかじめ <strong>chrome://net-internals/#events</strong> を開いておき、ブラウザでh2oサーバーにアクセス。</p>
<p>すると、htmlへのリクエストはh2oでproxyされて、nginxのhtmlが帰ってくる。</p>
<p>このリクエストのhttpヘッダーを見ると</p>
<script src="//gist.github.com/kazu69/fb321bd71b19878bd99d.js?file=http-header.txt"></script>
<p>正しくLinkヘッダーが追加されている。</p>
<p>chrome://net-internals/#events で <code>HTTP2_SESSION</code> を確認すると</p>
<script src="//gist.github.com/kazu69/fb321bd71b19878bd99d.js?file=chrome_header.txt"></script>
<p>確かに、<code>HTTP2_SESSION_RECV_PUSH_PROMISE</code> とあり、サーバー側でpushしているのが確認できました。</p>
<p>今回はh2o_mrubyまで詳しく把握できなくて、ipを動的に変更できなかったが、おそらく切り替ることはできるだと思う。</p>
<p>また折を見て、h2o+mrubyを個人サービスのフロントに立たせてみることにチャレンジしてみようかな。</p>
<p>参考にしたページ<br><a href="http://techblog.yahoo.co.jp/infrastructure/http2/introduction_to_http2/" target="_blank" rel="external">HTTP/2 入門</a><br><a href="http://labs.gree.jp/blog/2014/12/11987/" target="_blank" rel="external">初めてのHTTP/2サーバプッシュ</a><br><a href="http://jxck.hatenablog.com/entry/http2-server-side-architecture" target="_blank" rel="external">HTTP2 時代のサーバサイドアーキテクチャ考察</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>HTTP/2 serverである<a href="https://github.com/h2o/h2o">h2o</a>で初めてのサーバプッシュを試してみた。</p>]]>
    
    </summary>
    
      <category term="mruby" scheme="http://blog.kazu69.net/tags/mruby/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[nginx_mrubyを試してみた]]></title>
    <link href="http://blog.kazu69.net/2015/07/20/tried-to-touch-nginx-mruby/"/>
    <id>http://blog.kazu69.net/2015/07/20/tried-to-touch-nginx-mruby/</id>
    <published>2015-07-20T04:32:23.000Z</published>
    <updated>2015-08-17T04:38:12.000Z</updated>
    <content type="html"><![CDATA[<p>nginxの設定をrubyでダイナミックに設定できる<a href="https://github.com/matsumoto-r/ngx_mruby" target="_blank" rel="external">nginx_mruby</a>を試してみた。</p>
<a id="more"></a>
<p>個人的にnginx_mrubyを使うことのメリットは、サーバーの設定をダウンタイムなしに変更できるという点と、<br>rubyを使ってアプリケーションコードを書くように、サーバーの設定扱うことができる(rack middlewareのように)という点と感じた。</p>
<h2 id="nginx_mrubyのビルド">nginx_mrubyのビルド</h2><p>今回はOSをDocker + ubuntuで試してみた。</p>
<p><a href="https://github.com/matsumoto-r/ngx_mruby/wiki/Install" target="_blank" rel="external">wikiのinstall</a>を参考にした感じなのだが、以下のようになった。</p>
<script src="//gist.github.com/kazu69/1a1922409dd3514f6f6c.js?file=Dockerfile"></script>
<p>mrubyはビルドの設定をbuild_config.rbというファイルで行う。今回はbasic認証を行ってみようと思うので<br>mrubyのgemであるmgemに<a href="https://github.com/mattn/mruby-base64" target="_blank" rel="external">mruby-base64</a>を追加した。</p>
<p>ちなみに、同じようにapacheのconfをmrubyで制御できる<a href="https://github.com/matsumoto-r/mod_mruby/" target="_blank" rel="external">mod_mruby</a>にはbasic認証のために<a href="https://github.com/matsumoto-r/mod_mruby/wiki/Directives#basic-auth" target="_blank" rel="external">mrubyAuthnCheckPasswordというDirectiveが存在していた</a>。</p>
<p>ということで、今回は以下のようにした。</p>
<script src="//gist.github.com/kazu69/1a1922409dd3514f6f6c.js?file=build_config.rb"></script>
<p><a href="https://github.com/matsumoto-r/ngx_mruby/wiki/Directives" target="_blank" rel="external">ngx_mrubyのwiki</a>にあるように、サーバーの各イベントでrubyファイルをhookできるdirectiveがかある。</p>
<p>これをconfファイルで設定していく。<br>ファイルパスを渡すものとインラインでrubyのコードを書けるものが存在している。</p>
<script src="//gist.github.com/kazu69/1a1922409dd3514f6f6c.js?file=nginx.conf"></script>
<p>実際に処理を行うのはrubyでかけるので、</p>
<script src="//gist.github.com/kazu69/1a1922409dd3514f6f6c.js?file=authn_basic.rb"></script>
<p>これで dockerのコンテナにアクセス、basic_auth ディレクトリにアクセスでbasic認証ができている。</p>
<h2 id="basic認証してみる">basic認証してみる</h2><script src="//gist.github.com/kazu69/1a1922409dd3514f6f6c.js?file=basic_auth.sh"></script>
<h2 id="ブラウザでアクセスしてみる">ブラウザでアクセスしてみる</h2><p>今回はboot2dockerをつかったのでブラウザアクセスするために、<br>virtualboxとホストマシン間でのポートフォワーディングの設定が必要。</p>
<script src="//gist.github.com/kazu69/1a1922409dd3514f6f6c.js?file=boot2docker-virtualbox-portformarding.sh"></script>
<p>ブラウザで localhost:8080 でアクセスできるようになる。</p>
<p>basic認証だとあまり良い例にはならなかったけど、例えば、特定のディレクトリへのアクセスなどを制御したい時に、<br>nginxのconfに正規表現などでいろいろと書くより、rubyでかける方が個人的には敷居が低く感じる。</p>
<p>実際にインフラ周りの知識はあまりないけど、rubyでサーバーを柔軟に制御できるのは便利だと思った。</p>
<p>あと、mrubyのデバッグについて良い方法が知りたい。</p>
<p><a href="https://github.com/kazu69/ngx_mruby_playground" target="_blank" rel="external">今回作ったもの</a></p>
<p>参考にしたページ<br><a href="https://github.com/matsumoto-r/ngx_mruby" target="_blank" rel="external">nginx_mruby</a><br><a href="http://qiita.com/takeswim/items/bf88ea7bb76e11fdc71e" target="_blank" rel="external">ngx_mrubyを使って簡易ファイル共有システムを作る</a><br><a href="http://qiita.com/matsumotory/items/7121d6cce728125e5ce2" target="_blank" rel="external">mod_mrubyインストール後入門</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>nginxの設定をrubyでダイナミックに設定できる<a href="https://github.com/matsumoto-r/ngx_mruby">nginx_mruby</a>を試してみた。</p>]]>
    
    </summary>
    
      <category term="mruby" scheme="http://blog.kazu69.net/tags/mruby/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[cssnextを使って最新のcss syntaxで開発するのが良さそう]]></title>
    <link href="http://blog.kazu69.net/2015/06/15/develop-latest-css-syntax-using-cssnext/"/>
    <id>http://blog.kazu69.net/2015/06/15/develop-latest-css-syntax-using-cssnext/</id>
    <published>2015-06-14T15:00:32.000Z</published>
    <updated>2015-07-13T11:16:24.000Z</updated>
    <content type="html"><![CDATA[<p>ここ最近CSSを扱うことが多かったので、その際にPostprocessorを検討時にcssnextについてまとめた備忘録。</p>
<a id="more"></a>
<h2 id="JavaScriptの最近の事情">JavaScriptの最近の事情</h2><p>javascriptではES6でコードを書き、BabelでTransplieするという流れが定着しつつある。<br>これは、これまで必要だったライブラリが不要になり、コードが依存するライブラリを減らすことができ、altJSに頼らないで開発できるという利点からである。</p>
<p>同じことがCSSでも起きている。まずこれまでCSSを牽引してきた<a href="http://sass-lang.com/" target="_blank" rel="external">Sass</a>について。</p>
<h2 id="Sassの問題点">Sassの問題点</h2><p>最近のCSSの開発にはaltCSSとしてSass,Less,StylusなどのPreprocessorが使用されている。<br>特にSassはJavaScriptで言う所のjQueryに近い存在になり、APIもやや複雑になっている感じがある。</p>
<p>Sassを使っていても実際はそのほんの一部の機能だけで開発していることが多い。<br>実際、Sassを使うにあたり必要な機能はほんの一握りなのでその機能だけ切り取り使えると、もっと軽く使える気もする。</p>
<p>また、仮に他のaltCSSへの乗り換えの際にはSassの資産をそのまま使えるとは限らない。<br>などという懸念点を回避する手法として、CSSの先行実装を取り入れるという考え方でcssnextが選択肢に上がる。</p>
<h2 id="cssnextとは">cssnextとは</h2><p><a href="http://cssnext.io/" target="_blank" rel="external">cssnext</a>はcssの先行実装をサポートしていないブラウザも使えるようにするPostprocessorである。<br>あくまでcssのsyntaxのみで構成されているので、利用している機能を将来的にブラウザがサポートさえしてくれれば<br>cssnextでTransplileする必要すらなくなる。</p>
<p>cssnext自体はpostcssを使っているので、必要なpluginを選択的に使える。これにより変換に時間がかかるという問題も解消できそう。</p>
<p>メジャーなcss frameworkの<a href="https://twitter.com/mdo/status/591364406816079873" target="_blank" rel="external">Bootstrapはver5からpostcss</a>に、<a href="https://github.com/zurb/foundation/issues/6533" target="_blank" rel="external">Foundationもcssnext</a>を検討している。</p>
<p>ということで、実際にどのようなことができるのか機能を一通り触ってみた。</p>
<h2 id="cssnext_features">cssnext features</h2><h3 id="設定(config)">設定(config)</h3><p>configオプションまたは設定ファイルで、使う機能を選択できる。</p>
<p>基本的にbrowsersオプションを指定しておけば、autoprefixerが<a href="http://caniuse.com/" target="_blank" rel="external">caniuse</a>のdatabaseを参照して、個別にfeaturesをenabled、disabledを判断します。(@MoOxのアドバイスをもとに追記)</p>
<p>もし、個別に機能を制御するならば、各種の変換はpostcssのpluginなので、そのオプションも設定できる。<br>ちなみに、設定ファイルを使う場合は<a href="https://github.com/cssnext/cssnext/issues/73" target="_blank" rel="external">.cssnextrcという名前でjsonかyaml形式になりそう</a>。</p>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=.cssnextrc"></script>
<h3 id="Custom_Properties">Custom Properties</h3><p>カスタムプロパティ。cssnextでは現状はrootで定義しないといけない</p>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=custom_properties.src.css"></script>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=custom_properties.dest.css"></script>
<h3 id="Calc_Function">Calc Function</h3><p>calc function。様々な単位で複雑な計算ができて便利。</p>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=calc.src.css"></script>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=calc.dest.css"></script>
<h3 id="Custom_Media_Queries">Custom Media Queries</h3><p>media queryにタイプにユーザー定義のプロパティを使えるようになる。<br>これまでは同じ設定を必要に応じていくつも書くことがあったが、とりあえず、プロパティで一元管理できるようになる。</p>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=custom_media_query.src.css"></script>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=custom_media_query.dest.css"></script>
<h3 id="Custom_Selectors">Custom Selectors</h3><p>@custome-selectorルールが使えるようになり、冗長な記述をしなくて済むようになる。</p>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=custom_selectors.src.css"></script>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=custom_selectors.dest.css"></script>
<h3 id="Color_Function">Color Function</h3><p>SassなどのColor Functionのように色を関数で扱うことができるようになる。</p>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=color.src.css"></script>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=color.dest.css"></script>
<h3 id="hwd(Hue-Whiteness-Blackness)_Function">hwd(Hue-Whiteness-Blackness) Function</h3><p>色相の関数で扱う。色合いと白色度、黒色度から色相を変換できる。</p>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=hwb.src.css"></script>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=hwb.dest.css"></script>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=hwb.src.css"></script>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=hwb.dest.css"></script>
<h3 id="Gray_Function">Gray Function</h3><p>グレースケールな色をのみを生成する関数。</p>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=gray.src.css"></script>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=gray.dest.css"></script>
<h3 id="Hex_Color">Hex Color</h3><p>アルファチャンネンルを追加した、RRGGBBAA形式でのhex colorが使える。</p>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=rrggbbaa.src.css"></script>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=rrggbbaa.dest.css"></script>
<h3 id="Rebeccapurple">Rebeccapurple</h3><p><a href="http://lists.w3.org/Archives/Public/www-style/2014Jun/0312.html" target="_blank" rel="external">6歳にして亡くなった、Eric Meyer氏の娘の名前</a>らしい。</p>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=rebeccapurple.src.css"></script>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=rebeccapurple.dest.css"></script>
<h3 id="font-variant_プロパティ">font-variant プロパティ</h3><p>フォントをsmall capsにする際に使う。</p>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=font_variant.src.css"></script>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=font_variant.dest.css"></script>
<h3 id="filter_プロパティ">filter プロパティ</h3><p>svgのフィルタエフェクトを適用する。これは結構嬉しい。</p>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=filter.src.css"></script>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=filter.dest.css"></script>
<h3 id="Rem_unit">Rem unit</h3><p>rem(root em)をサポートする。</p>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=rem.src.css"></script>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=rem.dest.css"></script>
<h3 id="Pseudo_Elements">Pseudo Elements</h3><p>擬似要素のサポート。</p>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=pseudo_elements.src.css"></script>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=pseudo_elements.dest.css"></script>
<h3 id="Matches">Matches</h3><p>matches 擬似クラス。冗長になりがちなセレクターを簡潔に表現できるようになる。</p>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=matches.src.css"></script>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=matches.dest.css"></script>
<h3 id="Not">Not</h3><p>否定擬似クラス。Matchesと同じく、セレクターを簡潔にできるようになる。</p>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=not.src.css"></script>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=not.dest.css"></script>
<h3 id="@import">@import</h3><p>Sassなどと同じように特定のstylesheetをimportする。<br>相対パス、node_modules, web_modulesから読み込みをこなう。</p>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=import.src.css"></script>
<h3 id="with_Gulp">with Gulp</h3><p>gulpでは<a href="https://www.npmjs.com/package/gulp-cssnext" target="_blank" rel="external">gulp-cssnext</a>や<a href="https://www.npmjs.com/package/gulp-postcss" target="_blank" rel="external">gulp-postcss</a>を使う感じになる。</p>
<script src="//gist.github.com/kazu69/c38c30b6c018dda033ca.js?file=gulpfile.js"></script>
<h2 id="まとめ">まとめ</h2><p>ということで、今回挙げたようなcssの新しいモジュールはaltCSSで提供されているAPIに影響を受けた感じであるので、記法はともかく機能は大体予想がつく。そのため、学習コストはあまり高くない気がする。</p>
<p>postcssということでautoprefixerなどがdefaultで機能するので、fallbackなどもあまり意識しないで済みそう。</p>
<p>CSS標準のマークアップで開発をすることでいいということが大きな利点と思う。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>ここ最近CSSを扱うことが多かったので、その際にPostprocessorを検討時にcssnextについてまとめた備忘録。</p>]]>
    
    </summary>
    
      <category term="css" scheme="http://blog.kazu69.net/categories/css/"/>
    
      <category term="tec" scheme="http://blog.kazu69.net/categories/css/tec/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[itamaeでVagrantとDockerにNodeJS環境を作ってみた]]></title>
    <link href="http://blog.kazu69.net/2015/06/13/make-nodejs-development-environment-vagrant-and-docker-with-itamae/"/>
    <id>http://blog.kazu69.net/2015/06/13/make-nodejs-development-environment-vagrant-and-docker-with-itamae/</id>
    <published>2015-06-13T02:41:14.000Z</published>
    <updated>2015-06-18T09:46:34.000Z</updated>
    <content type="html"><![CDATA[<p>軽量Chef的なプロビジョニングツールitamaeを使って、<br>VagrantとDcokerにNodeJS環境を作ってみたときの備忘録。</p>
<a id="more"></a>
<p>Centosにndenvを使い、nodejs(ver0.12.0)とio.js(ver1.2.0)をインストールする。</p>
<h2 id="事前準備">事前準備</h2><p>ディレクトリ構造は<a href="https://github.com/itamae-kitchen/itamae/wiki/Best-Practice" target="_blank" rel="external">Best Practice</a>を元に、以下のようにした。</p>
<script src="//gist.github.com/kazu69/8b824595016ba612ff53.js?file=tree.sh"></script>
<p>レシピは以下のとおり、普通にndenvを設定しているだけ。</p>
<script src="//gist.github.com/kazu69/8b824595016ba612ff53.js?file=ruby_build.rb"></script>
<h2 id="Vagrant_+_ssh">Vagrant + ssh</h2><p>Vagrantにsshでレシピを実行する、その際に–vagrantオプションを付ける。</p>
<script src="//gist.github.com/kazu69/8b824595016ba612ff53.js?file=vagrant_ssh.sh"></script>
<h2 id="Vagrant_+_vagrant-itamae">Vagrant + vagrant-itamae</h2><p>vagrantプラグインの<a href="https://github.com/chiastolite/vagrant-itamae" target="_blank" rel="external">vagrant-itamae</a>を使うとsshより簡単にできそう。<br>これでvagrant provisionerにiamaeを指定するだけで済む。</p>
<script src="//gist.github.com/kazu69/8b824595016ba612ff53.js?file=Vagrantfile"></script>
<h2 id="Docker_+_ssh">Docker + ssh</h2><p>Dockerの場合も。sshでrecipeを実行する。<br>–no-tls-verify-peerはsslのエラー(Excon::Errors::SocketError)でこけたので、オプションをつけた。</p>
<script src="//gist.github.com/kazu69/8b824595016ba612ff53.js?file=docker_ssh.sh"></script>
<p>ちょっとした開発環境構築にchefだと学習コストも全体のファイルサイズの規模感も大きくなりがちなに対して、itamaeだと、手元の環境構築はシンプルで、簡潔なサイズでちょうどでいい感じだった。</p>
<h2 id="今回作ったレシピ">今回作ったレシピ</h2><p><a href="https://github.com/kazu69/nodejs-develop-environment-with-itamae" target="_blank" rel="external">nodejs-develop-environment-with-itamae</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>軽量Chef的なプロビジョニングツールitamaeを使って、<br>VagrantとDcokerにNodeJS環境を作ってみたときの備忘録。</p>]]>
    
    </summary>
    
      <category term="tec" scheme="http://blog.kazu69.net/categories/tec/"/>
    
      <category term="docker" scheme="http://blog.kazu69.net/categories/tec/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[FluxアーキテクチャのTodoMVCとImmutableJSを試してみた]]></title>
    <link href="http://blog.kazu69.net/2015/05/30/flux-architecture-todomvc-with-immutablejs/"/>
    <id>http://blog.kazu69.net/2015/05/30/flux-architecture-todomvc-with-immutablejs/</id>
    <published>2015-05-30T01:54:41.000Z</published>
    <updated>2015-07-14T13:44:10.000Z</updated>
    <content type="html"><![CDATA[<p>Fluxアーキテクチャにふれてみようということで、TodoMVCを試してみた。</p>
<a id="more"></a>
<h2 id="Fluxアーキテクチャと特徴">Fluxアーキテクチャと特徴</h2><p>Fluxのページにあるので最近よくみる図だけど、Fluxのアーキテクチャは以下のとおり</p>
<img src="https://raw.githubusercontent.com/facebook/flux/master/docs/img/flux-diagram-white-background.png" width="600">
<p>4つに大きく分かれていて、それぞれの特徴は</p>
<ol>
<li><p>ActionCreators</p>
<ul>
<li>viewからのアクションを受けてDispatcherにPublish</li>
<li>外部のAPIとの連携を受け持ちを行う</li>
</ul>
</li>
<li><p>Dispatcher</p>
<ul>
<li>Viewからのアクションを受けてStoreに対してPublish</li>
<li>処理の実行順序制御を行い、依存性を解決する役割もある</li>
</ul>
</li>
<li><p>Store</p>
<ul>
<li>ビジネスロジックを受け持つ。</li>
<li>Dispatcherの通知をSubscribeして、アクションを実行する</li>
<li>データに変更があると、メッセージをPublishする</li>
<li>シングルトンオブジェクト</li>
</ul>
</li>
<li><p>Rect(View)</p>
<ul>
<li>UIコンポーネント</li>
<li>ユーザーからの入力(イベント)を受け取り、Actionを呼び出す</li>
<li>Storeの発行する通知をSubscribeして、画面の再描画を行う</li>
<li>描画は変更のある箇所のみ(VirtualDOM)</li>
</ul>
</li>
</ol>
<p>整理すると、</p>
<ul>
<li>StoreはActionのイベントを監視</li>
<li>ComponentはStoreのイベントを監視</li>
<li>Componentはイベントを通じてActionのイベントをPublish</li>
</ul>
<p>というサイクルの一連の処理の流れが単一方向で行われるオブザーバーパターン。<br>単一方向ということで複雑さが軽減でき、おおよその処理系統を推測できる。<br>アプリケーションが大きい場合は、運用にとってメリットとなりそう。</p>
<h2 id="TodoMVC">TodoMVC</h2><p>TodoMVCのディレクトリ構成は以下の感じでした。</p>
<script src="//gist.github.com/kazu69/4f29d802a38ee478007b.js?file=dir.sh"></script>
<p>それぞれ役割ごとにディレクトリができている。<br>constantsはActionがPublishするメッセージが定義されているだけ。</p>
<p>イベントをPublish・Subscribeの箇所であるComponentとStore間はEventEmitterで、<br>ActionとStore間はFlux::Dispatcherを使っている。</p>
<p>EventEmitterとFlux::Dispatcherについては簡単には以下のようなもの。</p>
<script src="//gist.github.com/kazu69/4f29d802a38ee478007b.js?file=eventEmitter.js"></script>
<script src="//gist.github.com/kazu69/4f29d802a38ee478007b.js?file=flux.Dispatcher.js"></script>
<p>写経した<a href="https://github.com/kazu69/todomvc-with-flux-immutable" target="_blank" rel="external">TodoMVC</a>のコードをもとに見ていくと</p>
<script src="//gist.github.com/kazu69/4f29d802a38ee478007b.js?file=TodoItem.react.js"></script>
<p>チェックボックスをチェックすることでonChangeイベントでTodoActions.toggleCompleteが実行される。<br>Component上での変更はActionの該当するアクションにデータを渡す。</p>
<script src="//gist.github.com/kazu69/4f29d802a38ee478007b.js?file=TodoActions.js"></script>
<p>ActionはDispatcherにActionTypeをPublishする。</p>
<script src="//gist.github.com/kazu69/4f29d802a38ee478007b.js?file=TodoStore.js"></script>
<p>StoreではSubscribeしたActionTypeごとに適切な処理を行い、ChangeEventをPublishする。</p>
<script src="//gist.github.com/kazu69/4f29d802a38ee478007b.js?file=TodoItem.react.js"></script>
<p>Cpmponentはイベントを受け取りviewの再描画を行う。</p>
<h2 id="ImmutableJSを使った">ImmutableJSを使った</h2><p>TodoMVCのStoreでデータはJavaScriptの単純なObjectだったが、今回は<a href="http://facebook.github.io/immutable-js/" target="_blank" rel="external">ImmutableJS</a>を使ってみた。</p>
<p>ImmutableJSを使用することにより、深い構造のObjectデータ操作が容易にできるほか、<br>パフォーマンス向上の為の<a href="https://facebook.github.io/react/docs/pure-render-mixin.html" target="_blank" rel="external">PureRenderMixin</a>などを使っている場合に起こる予期せぬ状態を避けることができるようだ。</p>
<p>ReactのコンポーネントライフサイクルではStoreからのイベントを受けて、差分があるコンポーネントを再描画する。<br>その際に呼ばれる<a href="http://facebook.github.io/react/docs/component-specs.html#updating-shouldcomponentupdate" target="_blank" rel="external">shouldComponentUpdate</a>の値がtrueとならない限りそれ以降が実行されない為、再描画されない(renderが実行されない)。</p>
<p>簡単な例としてカウントアップをする場合、</p>
<iframe width="100%" height="300" src="http://jsfiddle.net/kazu69/0rmf6tcn/embedded/js,resources,html,css,result/light" frameborder="0" allowfullscreen></iframe>
<p>shouldComponentUpdateがfalseを返すようにするとカウントアップされない。</p>
<iframe width="100%" height="300" src="http://jsfiddle.net/kazu69/puvwov20/embedded/js,resources,html,css,result/light" frameborder="0" allowfullscreen></iframe>
<p>PureRenderMixinはshouldcomponentupdateを利用して、変更前後のオブジェクトの値と参照をチェックし、変更がない場合はfalseを返す。<br>これにより変更がないとされ、無駄な再描画されないためパフォーマンスが向上する。</p>
<p>しかし、PureRenderMixinにも説明がにあるように、深い構造を持つObjectだと予期しないことになる。</p>
<iframe width="100%" height="300" src="http://jsfiddle.net/kazu69/zp9L4oxo/embedded/js,resources,html,css,result/light" frameborder="0" allowfullscreen></iframe>
<p>また、自前でshouldComponentUpdateに差分チェック機能を実装することもできるが、深い構造のオブジェクトのチェックが頻繁に呼び出されるshouldComponentUpdateで行うのはパフォーマンス的にもよろしくない。</p>
<p>ImmutableJSを使うと、以下のように単純な比較でも予期した通りの結果を得られる</p>
<script src="//gist.github.com/kazu69/4f29d802a38ee478007b.js?file=Immutable.js"></script>
<p>よってをPureRenderMixinでの予期せぬ結果を回避できるということのようだ。</p>
<iframe width="100%" height="300" src="http://jsfiddle.net/kazu69/1z2d98z4/embedded/js,resources,html,css,result/light" frameborder="0" allowfullscreen></iframe>
<p>ということで、<br>Fluxのアーキテクチャは単一方向性のオブザーバーパターンなので、これに従って、<br>BackboneやAngulerなどのフレームワークを組み合わせることである程度の規模でも煩雑さの少ない<br>アプリケーションができそう。</p>
<p>今回作成したTodoMVC <a href="https://github.com/kazu69/todomvc-with-flux-immutable" target="_blank" rel="external">kazu69/todomvc-with-flux-immutable</a></p>
<h3 id="参考にしたページ">参考にしたページ</h3><p><a href="https://facebook.github.io/react/docs/advanced-performance.html" target="_blank" rel="external">Advanced Performance</a><br><a href="http://blog.risingstack.com/the-react-js-way-flux-architecture-with-immutable-js/" target="_blank" rel="external">The React.js Way: Flux Architecture with Immutable.js</a><br><a href="http://kenev.net/2015/03/08/react-purerendermixin%E3%81%AE%E6%A4%9C%E8%A8%BC/" target="_blank" rel="external">React – PureRenderMixinの検証</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Fluxアーキテクチャにふれてみようということで、TodoMVCを試してみた。</p>]]>
    
    </summary>
    
      <category term="javascript" scheme="http://blog.kazu69.net/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WordpressからHexoに移行してGitHub Pageで公開した]]></title>
    <link href="http://blog.kazu69.net/2015/05/16/moved-hexo/"/>
    <id>http://blog.kazu69.net/2015/05/16/moved-hexo/</id>
    <published>2015-05-16T00:36:08.000Z</published>
    <updated>2015-08-17T04:52:25.000Z</updated>
    <content type="html"><![CDATA[<p>ブログを長年使ってきたwordpressから重い腰を上げてHexoに移行した。<br>移行にあたり、やったことをメモにしておく。</p>
<a id="more"></a>
<p><a href="https://www.staticgen.com/" target="_blank" rel="external">staticgen.com</a> を見ながら<a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>か<a href="http://gohugo.io/" target="_blank" rel="external">Hugo</a>か悩んだが、比較的にwordpressから移行した情報が多いのでHexoにした。</p>
<p>特にnodeかGoかという理由ではなく、一度Static Generatorに移行できれば、あとは大きく変わらずに渡り歩けるだろうという軽い気持ち。</p>
<p>Hexoに移行するにあたり行った手順は大きく分けて</p>
<ol>
<li>wordpress記事のslugを英語化</li>
<li>wordpressのデータexport</li>
<li>Hexoデータをmigrate</li>
<li>wordpressの投稿からredirectできるようにalias作成</li>
<li>画像パスの変換</li>
<li>ブログのリダイレクト</li>
<li>Hexo運用でやったこと</li>
</ol>
<p>となった。</p>
<h2 id="wordpressの記事のslugを英語化">wordpressの記事のslugを英語化</h2><p>Hexoに移行するにあたり、wordpressからexportした記事をmigrationするツールを使うが、<br>このツールだとwordpressでexportしたxmlの各投稿情報の <strong>wp:post_name</strong> の値をHexoのmarkdownファイルのファイル名として使ってしまう。</p>
<p>したがって、日本語などの場合URLエンコードされてしまい、どうやらうまくいかない。<br>ということでまずこの値を英語に翻訳する必要があった。</p>
<p><strong>wp:post_name</strong>はwordpressのslugということなので、全投稿のslugを自動翻訳する <a href="https://wordpress.org/plugins/wp-slug-translate/" target="_blank" rel="external">wp-slug-translate</a> を使った。</p>
<p><strong>wp-slug-translate</strong>は内部でMicrosoft Translator APIを使っているらしく、<a href="http://azure.microsoft.com/ja-jp/marketplace/" target="_blank" rel="external">Microsoft Azure Marketplace</a> にアカウント作成が必要だ。</p>
<p>詳しい手順は <a href="http://shumaiblog.com/wordpress-plugin-wp-slug-translate/" target="_blank" rel="external">WordPressのスラッグを日本語から英訳してくれるプラグイン「WP Slug Translate」</a> を参考にすすめた。</p>
<p>プラグインを有効化したのちに、管理画面から記事を数十件ごとに更新することで翻訳される。<br>この状態で、wordpressのデータをexportする準備が整った。</p>
<h2 id="wordpressのデータをexport">wordpressのデータをexport</h2><p>WordPress管理画面 ＞ ツール ＞ エクスポート から全てのコンテンツをexportする。<br>これだけ。</p>
<h2 id="Hexoデータへのコンバート">Hexoデータへのコンバート</h2><p><a href="http://hexo.io/docs/migration.html#WordPress" target="_blank" rel="external">hexoのドキュメント</a> にあるように、<a href="https://github.com/hexojs/hexo-migrator-wordpress" target="_blank" rel="external">hexo-migrator-wordpress</a> を使ってmigrationを行う。<br>これで投稿記事がhexoの記事形式のmarkdownファイルにmigrateできる。</p>
<h2 id="wordpressの投稿からredirectできるようにalias作成">wordpressの投稿からredirectできるようにalias作成</h2><p>wordpressの記事のURL形式にもよるが、これまでwordpressの記事を <strong>category/記事ID/</strong> という形式で運用していたが、Hexoでは <strong>YYYY/MM/dd/ファイル名/</strong> で運用することになるので、リダイレクトする必要がある。</p>
<p>Static Generatorを使っている場合、リダイレクトするには移行前のURL直下にindex.htmlを置き、metaタグで refresしてリダイレクトすることで可能っぽい。</p>
<p><a href="https://github.com/hexojs/hexo-generator-alias" target="_blank" rel="external">hexo-generator-alias</a> を使うことでHexoのgenarate時にalias用のindex.htmlを作ることが可能。<br>あとは、各記事にalias用の設定を追加する。</p>
<p>wordpressの投稿URLはexportしたxmlに<strong>link</strong>タグの値となるので、簡単なスクリプトで<strong>hexo-generator-alias</strong>の設定を追加した。</p>
<p>xmlのパーサーには<a href="https://github.com/YorickPeterse/oga" target="_blank" rel="external">oga</a>を使ってみた。</p>
<script src="//gist.github.com/kazu69/6cea4d5e55992b7b2247.js?file=alias.rb"></script>
<p>これで <strong>/blog/CATEGORY/POST_ID/</strong> アクセスで該当の記事にリダイレクトされるようになった。<br>今回は運用をサブドメインにもいこうしたので、URIにblogが重複しているのは気にしない。</p>
<p>ここまでで、ほぼ完了した感じ。</p>
<h2 id="画像パスの変換">画像パスの変換</h2><p>残りは画像のパスを修正する。画像ファイルを全てダウンロードし、<code>public/images/</code>へそのまま放り込んだ。<br>あとはパスを以下のスクリプトで変換した。</p>
<script src="//gist.github.com/kazu69/6cea4d5e55992b7b2247.js?file=image_replace.rb"></script>
<p><strong>/wp-contentt/uploads/</strong> を <strong>/images/</strong> に変換しているだけ。</p>
<h2 id="ブログのリダイレクト">ブログのリダイレクト</h2><p>今回はドメインもサブドメインでの運用にかえるので、.htaccessで記事を301リダイレクトする。</p>
<p>結果としてこのやり方で移行できていないものは、</p>
<ul>
<li>ソーシャルなどのURLは引き継げない</li>
<li>RSSなどフィード情報はリダイレクトにいたっていない</li>
<li><a href="http://disqus.com" target="_blank" rel="external">Disqus</a> 使うことにしたのでworpressのコメントを引き継げない</li>
</ul>
<p>ということに至った。</p>
<p>ちなみにHexoではRSS feedを使うために別途 <a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="external">hexo-generator-feed</a> をインストール必要があった。</p>
<p>あと、テーマはとりあえず最低限必要なものを自作した。</p>
<p>package.jsonは以下のようになった。npm scriptsでHexoコマンドを叩いている。</p>
<script src="//gist.github.com/kazu69/6cea4d5e55992b7b2247.js?file=package.json"></script>
<h2 id="Hexoで運用するためにやったこと">Hexoで運用するためにやったこと</h2><p>wordpressから移行して、Hexoで運用するにあたり<a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages</a>を利用することにした。</p>
<p>使っていたドメインプロバイダーではGitHub Pagesでの独自ドメインを使えなかった。そこで、CloudFlareだと無料プランでも <a href="https://blog.cloudflare.com/introducing-universal-ssl/" target="_blank" rel="external">Universal SSL</a> でも使えるということを見つけたので、ネームサーバーを <a href="https://www.cloudflare.com/" target="_blank" rel="external">CloudFlare</a> に移行した。</p>
<p>CloudFlareに申し込むと、ネームサーバーを指定されるので、ドメインプロバイダーの管理ページでDNSサーバーをCloudFlareに向ける。<br>あとは、ホスト名を書いたCNAMEファイルをドキュメントルートに配置するだけで、独自ドメインでの運用がすんなりとできた。</p>
<p>当初はBitbucketでも同じことができるので、そちらを使うか迷っていたが <a href="https://confluence.atlassian.com/display/BITBUCKET/Associate+an+existing+domain+with+an+account" target="_blank" rel="external">Associate an existing domain with an account</a> を見る限り、CNAMEでの運用はできなくなったぽい。</p>
<p>Hexo使ってわかったことは作者が台湾の方ということもあり、英語記事と同じくらい中国語の記事も出てくる。</p>
<h3 id="参考にしたページ">参考にしたページ</h3><ul>
<li><a href="http://hexo.io/docs/migration.html#WordPress" target="_blank" rel="external">Migration | Hexo</a></li>
<li><a href="http://shumaiblog.com/wordpress-plugin-wp-slug-translate/" target="_blank" rel="external">WordPressのスラッグを日本語から英訳してくれるプラグイン「WP Slug Translate」</a></li>
<li><a href="http://pagent.github.io/2015/02/17/github-pages-redirect/" target="_blank" rel="external">GitHub Pagesのブログでリダイレクト「hexo-generator-alias」</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>ブログを長年使ってきたwordpressから重い腰を上げてHexoに移行した。<br>移行にあたり、やったことをメモにしておく。</p>]]>
    
    </summary>
    
      <category term="web" scheme="http://blog.kazu69.net/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ビルドツールとしてnpmを使う]]></title>
    <link href="http://blog.kazu69.net/2015/04/19/use-the-npm-as-the-build-tool/"/>
    <id>http://blog.kazu69.net/2015/04/19/use-the-npm-as-the-build-tool/</id>
    <published>2015-04-19T04:10:28.000Z</published>
    <updated>2015-05-10T16:21:06.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://gruntjs.com/" target="_blank" rel="external">Grunt</a>、 <a href="http://gulpjs.com/" target="_blank" rel="external">gulp</a>などを使うのではなく、npmをビルドタスクを使うためにちょっとおさらいした。</p>
<a id="more"></a>
<h2 id="npmのpath">npmのpath</h2><p>npmでインストールすると、<br>モジュールは ./node_modules/にインストールされ、<br>node_modules/.bin配下に各パッケージのbinへのシンボリックリンクが作成される。</p>
<p>これは実際にnpm binを実行するとパスがわかる。</p>
<p>たとえば、node_modules/jshint/bin/jshint は$(npm bin)/jshintで実行できる。<br>実際にはnpm経由で実行すると、$(npm bin)はPATHは追加されている。</p>
<p>package.jsonに以下を追加して</p>
<script src="https://gist.github.com/kazu69/b62cb4e6d54ab63b1b1e.js?file=path.json"></script>

<script src="https://gist.github.com/kazu69/b62cb4e6d54ab63b1b1e.js?file=path.sh"></script>

<p>でパスが通っていることが確認できる。</p>
<p>つまり、npm run TASKではモジュールのパスに$(npm bin)は必要無い。</p>
<h2 id="pre、postフック">pre、postフック</h2><p>npmコマンドにpre、postというprefixをつけることでそのコマンドの前後にフックできる。<br>たとえば、npm testにpre postそれぞれのフックを追加すると、</p>
<p>npm test を実行すると、 npm run pretest、 npm test, npm run posttest の順番に実行される。</p>
<h2 id="カスタム引数">カスタム引数</h2><p>npm@2.0.0 以上では<a href="https://github.com/npm/npm/pull/5518" target="_blank" rel="external">実行スクリプトにカスタム引数を渡すことができるようになっている。</a></p>
<p>「–」で 好きな引数を渡すことができる。<br>たとえば以下のうように</p>
<script src="https://gist.github.com/kazu69/b62cb4e6d54ab63b1b1e.js?file=option.json"></script>

<p>例があまり良くないけど、開発環境やstaging環境などの実行環境でオプションの有無がある場合などに便利。</p>
<h2 id="npm-config">npm-config</h2><p>package.jsonにあるconfigはスクリプトからnpm_package_config_NAMEとして参照できる</p>
<script src="https://gist.github.com/kazu69/b62cb4e6d54ab63b1b1e.js?file=package_config.json"></script>

<p>とある場合、</p>
<script src="https://gist.github.com/kazu69/b62cb4e6d54ab63b1b1e.js?file=config_scriots.json"></script>

<p>とすることで参照できる。</p>
<p>各モジュールの設定はpackage.jsonにまとめておくことができる。<br>.configのようにconfig系のファイルがプロジェクトルートにたくさん作りたくないので、便利。</p>
<p>また、設定したconfigの値はユーザーの$HOMEにある.npmrcの値によて実行時に上書きされる。</p>
<script src="https://gist.github.com/kazu69/b62cb4e6d54ab63b1b1e.js?file=npmrc.sh"></script>

<p>これで</p>
<script src="https://gist.github.com/kazu69/b62cb4e6d54ab63b1b1e.js?file=npmrc_echo.sh"></script>

<p>となる。各自の環境に合わせた状態などはここで上書きするなどができる感じ。</p>
<h2 id="マルチタスク">マルチタスク</h2><p>マルチタスクはpre、postフックでタスクを実行するほかに&amp;&amp;演算子でつなげていけば可能。</p>
<script src="https://gist.github.com/kazu69/b62cb4e6d54ab63b1b1e.js?file=mutitask.json"></script>

<p>また、標準出力、標準入力、リダレクトをつかって<a href="http://gulpjs.com/" target="_blank" rel="external">gulp</a>のようにシームレスに処理できる。</p>
<script src="https://gist.github.com/kazu69/b62cb4e6d54ab63b1b1e.js?file=stream.json"></script>

<h2 id="ファイル監視">ファイル監視</h2><p>ファイル監視は<a href="https://www.npmjs.com/package/watch" target="_blank" rel="external">watch</a>や<a href="http://blog.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/" target="_blank" rel="external">nodemon</a>などを使う。</p>
<script src="https://gist.github.com/kazu69/b62cb4e6d54ab63b1b1e.js?file=watch.json"></script>

<p>フロントエンドのビルドツールは<a href="http://gruntjs.com/" target="_blank" rel="external">Grunt</a>や<a href="http://gulpjs.com/" target="_blank" rel="external">gulp</a>、<a href="http://webpack.github.io/" target="_blank" rel="external">webpack</a>を使う規模でなければnpmだけでもいけそう。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://gruntjs.com/">Grunt</a>、 <a href="http://gulpjs.com/">gulp</a>などを使うのではなく、npmをビルドタスクを使うためにちょっとおさらいした。</p>]]>
    
    </summary>
    
      <category term="tec" scheme="http://blog.kazu69.net/categories/tec/"/>
    
      <category term="web" scheme="http://blog.kazu69.net/categories/tec/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[browserifyでjQuery(CDN)とjQueryプラグインを使う]]></title>
    <link href="http://blog.kazu69.net/2015/04/18/browserify-uses-jquery-plugin-with-jquery-cdn/"/>
    <id>http://blog.kazu69.net/2015/04/18/browserify-uses-jquery-plugin-with-jquery-cdn/</id>
    <published>2015-04-18T03:39:36.000Z</published>
    <updated>2015-05-10T16:21:06.000Z</updated>
    <content type="html"><![CDATA[<p>jQueryをCDNから取得し、jQuery pluginが活躍している場合のbrowserify導入の備忘録</p>
<a id="more"></a>
<h2 id="CDNのjQueryをrequireする">CDNのjQueryをrequireする</h2><p>CDNを使うことで、browserifyでbundleするファイルサイズは小さくなり、ファイル生成までの時間も短くなるという恩恵がある。</p>
<p>まず、CDNのjQueryを利用するのに<a href="https://github.com/thlorenz/browserify-shim" target="_blank" rel="external">browserify-shim</a>を使う。<br>globalのjQueryを「jquery」というモジュール名でrequireできるようにする。</p>
<script src="https://gist.github.com/kazu69/6c41e1d411911d15a886.js?file=browserify-shim.json"></script>

<p>requireでincludeするjqueryはglobal(window)空間に存在しているので、<br>実際にはrequireなどせずとも使えるといえば使える。</p>
<p>require をするには以下の理由があるらしい。</p>
<ul>
<li>require(‘jquery’)に統一することでwindow.jQueryというグローバルな名前空間へのアクセスを避け、依存解決方法を統一できる</li>
<li>将来的にnpmパッケージとして運用する場合に、コードに変更がいらない</li>
<li>require することでディレクトリ構造などが変わる変更が生じても、その影響を受けにくくなる。</li>
</ul>
<p>browserifyを実行すると</p>
<script src="https://gist.github.com/kazu69/6c41e1d411911d15a886.js?file=global-bundle.js"></script>

<p>となり、globalのjQueryをrequireしているのがわかる。</p>
<p>だが、node_modules配下にjQueryをrequireしているパッケージがある場合は、以下のようになる。</p>
<script src="https://gist.github.com/kazu69/6c41e1d411911d15a886.js?file=browserify.sh"></script>

<p>解決するにはいずれか、</p>
<ol>
<li>素直にjQueryをnpm installしてdependenciesに追加する</li>
<li>shim を作成して、jQueryをexportsする</li>
</ol>
<p>1 の場合は、結局CDNから取得するjQueryを使うわけではなく、npmでinstallしたjQueryを使うことになるため今回の目的に沿わない。</p>
<p>2 で対応する。jquery_shim.jsを作りmodule.exportsにglobalのjQueryを渡すようにする。</p>
<script src="https://gist.github.com/kazu69/6c41e1d411911d15a886.js?file=jquery_shim.js"></script>

<p>そして、 browserフィールド追加してにaliaseを作成</p>
<script src="https://gist.github.com/kazu69/6c41e1d411911d15a886.js?file=browserify-browser.json"></script>

<p>これにより、以下のようなスクリプトを作成できるのでCDNの恩恵を受けることができる。<br>requireの引数にjqueryが追加されglobalのjQueryをexportしているのがわかる。</p>
<script src="https://gist.github.com/kazu69/6c41e1d411911d15a886.js?file=cdn-jquery.js"></script>

<p>とこれでまずはjQueryはCDNの恩恵を受けることができる。</p>
<h2 id="jQuery_pluginの対応">jQuery pluginの対応</h2><p>jquery pluginもnpmから取得できるので、bowerを使用することなくnpm経由で直接installからexportsできる。<br>(<a href="http://blog.npmjs.org/post/111385956875/welcome-jquery-developers" target="_blank" rel="external">Welcome, jQuery developers!</a>)</p>
<p>任意のjquery.pluginと自作モジュールのmy_module.jsを利用するとした場合、</p>
<script src="https://gist.github.com/kazu69/6c41e1d411911d15a886.js?file=browserify-browser-modules.json"></script>

<p>ここではjquery.pluginをjqueryPluginでexport、<br>my_module.jsをmyModuleとしてexportしている。</p>
<p>それぞれ、require(‘jquery_plugin’)、require(‘myModule’)とすることで利用出来る。</p>
<p>module 形式でない package の場合でも、<code>browserify -r jquery_plugin</code> で require オプションを使うことで requireできるようになるのでとりあえずなんとかなる。</p>
<script src="https://gist.github.com/kazu69/6c41e1d411911d15a886.js?file=browserify-require.js"></script>

<p><a href="http://qiita.com/hitsujiwool/items/b013577d361bfdef18a6" target="_blank" rel="external">browserify (browser-pack) はどんなコードを出力するのか？</a>あたりが詳しい。</p>
<script src="https://gist.github.com/kazu69/6c41e1d411911d15a886.js?file==my_module.js"></script>

<p>サイトの規模によってはbrowserifyを利用して全てのファイルをまとめてしまうと、ファイルサイズが気になる。</p>
<p>たとえば、サイト全体で使う共通のモジュールやユーティリティ的なものをbrowserifyでrequireできるようにしておく。</p>
<p>各ページごとに必要な処理の多くはDOMをゴニョゴニョするものなどが多いと思うが、<br>こういったものは複数人で開発・運用などしているといろんな人が変更を行うので、<br>コアになる部分以外はあまりややこしなく扱えるようにしておきたい。</p>
<p>意図しないグローバルを汚染をしない程度にとどめておく程度にしておくとかでもいいのではないだろうかと。</p>
<script src="https://gist.github.com/kazu69/6c41e1d411911d15a886.js?file=page-content.js"></script>

<p>お手軽に <a href="https://github.com/jfhbrook/browserify-cdn" target="_blank" rel="external">browserify-cdn</a> もある。</p>
<p>参考にしたページ</p>
<ul>
<li><a href="https://github.com/umdjs/umd" target="_blank" rel="external">https://github.com/umdjs/umd</a></li>
<li><a href="http://blog.npmjs.org/post/112064849860/using-jquery-plugins-with-npm" target="_blank" rel="external">http://blog.npmjs.org/post/112064849860/using-jquery-plugins-with-npm</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>jQueryをCDNから取得し、jQuery pluginが活躍している場合のbrowserify導入の備忘録</p>]]>
    
    </summary>
    
      <category term="tec" scheme="http://blog.kazu69.net/categories/tec/"/>
    
      <category term="web" scheme="http://blog.kazu69.net/categories/tec/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[phpのREPL psysh が便利そうだった]]></title>
    <link href="http://blog.kazu69.net/2015/02/28/php-repl-psysh-was-so-convenient/"/>
    <id>http://blog.kazu69.net/2015/02/28/php-repl-psysh-was-so-convenient/</id>
    <published>2015-02-28T04:56:01.000Z</published>
    <updated>2015-05-10T16:21:06.000Z</updated>
    <content type="html"><![CDATA[<p>phpのインタラクティブコンソール<a href="http://psysh.org/" target="_blank" rel="external">psysh</a>というものが便利そうだった。<br>phpの開発している人なら既に知ってるのかもしれないけど、<br>デバッグが非常に楽になりそうだった。</p>
<a id="more"></a>
<p>phpのREPLにはFacebookの<a href="https://github.com/facebookarchive/phpsh" target="_blank" rel="external">phpsh</a>、<a href="https://github.com/ieure/php_repl" target="_blank" rel="external">php_repl</a>、<a href="https://github.com/d11wtq/boris" target="_blank" rel="external">boris</a> などもあるそうだが、psyshはRubyの<a href="https://github.com/pry/pry" target="_blank" rel="external">pry</a>のような感覚で使えそうな感じだった。</p>
<h2 id="インストールして試してみた">インストールして試してみた</h2><script src="https://gist.github.com/kazu69/194061218893d4934dbf.js?file=install.sh"></script>

<p>Readmeにしたがいcomposer経由でインストールした。</p>
<script src="https://gist.github.com/kazu69/194061218893d4934dbf.js?file=use-psysh.sh"></script>

<p>ls, dump, trace, history などのほかに直近の例外を表示できるwtfとかコードを読めるshowなど、重宝しそう。</p>
<h2 id="ブレイクポイントを設置する">ブレイクポイントを設置する</h2><p>Rubyでのbinding.pry感覚でブレイクポイントを設置できる。</p>
<script src="https://gist.github.com/kazu69/194061218893d4934dbf.js?file=debugger.php"></script>

<p>psyshをrequireして、デバッグしたい箇所でeval(\Psy\sh());を実行するだけで、<br>該当箇所でプログラムが中断しpsyshが起動してデバッグできます。</p>
<script src="https://gist.github.com/kazu69/194061218893d4934dbf.js?file=debugger.sh"></script>

<h2 id="phpの日本語ドキュメントを読めるようにする">phpの日本語ドキュメントを読めるようにする</h2><p>日本語ドキュメントを取得することで、docで日本語のphpドキュメントも読める</p>
<script src="https://gist.github.com/kazu69/194061218893d4934dbf.js?file=show_php_doc.sh"></script>

<h2 id="psyshの設定">psyshの設定</h2><p>ここもpryのように、設定ファイルを追加してカスタマイズできる</p>
<script src="https://gist.github.com/kazu69/194061218893d4934dbf.js?file=add_psysh_config.sh"></script>

<p>ということで、これはデバッグがはかどりそう。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>phpのインタラクティブコンソール<a href="http://psysh.org/">psysh</a>というものが便利そうだった。<br>phpの開発している人なら既に知ってるのかもしれないけど、<br>デバッグが非常に楽になりそうだった。</p>]]>
    
    </summary>
    
      <category term="php" scheme="http://blog.kazu69.net/categories/php/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[C/C++のSass Compilierのlibsassを試してみた]]></title>
    <link href="http://blog.kazu69.net/2015/02/21/try-sass-compilier-c-c-libsass/"/>
    <id>http://blog.kazu69.net/2015/02/21/try-sass-compilier-c-c-libsass/</id>
    <published>2015-02-21T14:51:55.000Z</published>
    <updated>2015-07-07T06:13:59.000Z</updated>
    <content type="html"><![CDATA[<p>フロントエンド周りを触ることがあり、Sassのコンパイル速度改善をするために、<br><a href="http://libsass.org/" target="_blank" rel="external">libsass</a>について軽く調べてみた。</p>
<a id="more"></a>
<h2 id="libsassとは">libsassとは</h2><p>C/C++で書かれたSass Compiler。これ自体は単なるライブラリで、実際にこれを走らせるには<br><a href="https://github.com/sass/sassc" target="_blank" rel="external">SassC</a>や<a href="https://github.com/sass/ruby-libsass" target="_blank" rel="external">ruby-libsass</a>などを使う。</p>
<p>コンパイラにGCC4.6+またはClang/LLVMが必要だとか。</p>
<h2 id="libsass_のインストール">libsass のインストール</h2><p>libsassとSassCは共にbrewインストール可能だが、<br>マニュアルに沿ってインストールする場合は、<br><script src="//gist.github.com/kazu69/608fee58a23c4a9d838e.js?file=manual-install.sh"></script></p>
<h2 id="libsassとRuby_Sassとの互換性">libsassとRuby Sassとの互換性</h2><p>現状ではRuby Sassとの違いもあり、完全に互換性があるわけではない。<br>実際、Ruby Sassよりも実装が遅れているため、Ruby Sass3.4の機能は多くが利用できない状況らしい。<br><a href="https://github.com/sass/sass-spec/tree/master/spec/libsass-todo-issues" target="_blank" rel="external">SassSpec/libsass-todo-issues</a>を<br>みるとサポート状況わかる。</p>
<p>ちなみにSass Specを使ってみると</p>
<script src="//gist.github.com/kazu69/608fee58a23c4a9d838e.js?file=sass-spec.sh"></script>
<p>libsassで sass spec実行</p>
<script src="//gist.github.com/kazu69/608fee58a23c4a9d838e.js?file=libsass-spec.sh"></script>
<p>まだ対応できてないのか、スキップされてる項目が多い。</p>
<h2 id="多言語サポート">多言語サポート</h2><p>libsassのラッパーも多く、主だった言語で使えそう。</p>
<ul>
<li><a href="https://github.com/sass/sassc" target="_blank" rel="external">SassC</a></li>
<li><a href="https://github.com/sass/perl-libsass" target="_blank" rel="external">perl-libsass</a></li>
<li><a href="https://github.com/guitarpoet/php-sass" target="_blank" rel="external">php-sass</a></li>
<li><a href="https://github.com/sass/ruby-libsass" target="_blank" rel="external">ruby-libsass</a></li>
<li><a href="https://github.com/andrew/node-sass" target="_blank" rel="external">node-sass</a></li>
<li><a href="https://github.com/medialize/sass.js" target="_blank" rel="external">sass.js</a></li>
<li><a href="https://github.com/moovweb/gosass" target="_blank" rel="external">gosass</a></li>
<li><a href="https://github.com/dahlia/libsass-python" target="_blank" rel="external">libsass-python</a></li>
<li><a href="https://github.com/warmuuh/libsass-maven-plugin" target="_blank" rel="external">libsass-maven-plugin</a></li>
</ul>
<p>libsassへ乗り換えるなら、互換性を考慮する必要があるので、まず調査のためlibsass-todo-issuesを確認するか、一通りまとめてある<br><a href="http://sass-compatibility.github.io/" target="_blank" rel="external">Sass Compatibility</a>などで確認することが必要そう。</p>
<p>現在のlibsassのバージョンは3.1だが、<br>リリース計画によると最終的に3.4でRuby Sassに追いつく予定らしいので、<br>それまで待つでもしれない。</p>
<p>しかし、最新のSassの機能に縛られなければ、十分に機能を享受できそうだし、やはりコンパイル時間の短縮は魅力的。<br>コンパル結果が同じなら使わない理由がなさそうな気がする。</p>
<p>ちなみに、Sassのライブラリである、<br>compassは2.0で<a href="https://github.com/Compass/compass/issues/1916" target="_blank" rel="external">デフォルトのコンパイルはlibsass</a>になる予定、<a href="http://bourbon.io/" target="_blank" rel="external">Burbon</a>はすでにサポートしている。</p>
<p>以下のようにCompassを使っているscssファイルをsasscでコンパルすると</p>
<script src="//gist.github.com/kazu69/608fee58a23c4a9d838e.js?file=sample.scss"></script>
<script src="//gist.github.com/kazu69/608fee58a23c4a9d838e.js?file=libsass-compass.sh"></script>
<p>となってしまう。</p>
<p>Compassのcore mixinを切り出した<a href="https://github.com/Igosuki/compass-mixins" target="_blank" rel="external">compass-mixins</a>を使えば、<br>Compassでもlibsassを利用可能っぽい。</p>
<script src="//gist.github.com/kazu69/608fee58a23c4a9d838e.js?file=libsass-compass-mixin.sh"></script>
<p><a href="https://github.com/sindresorhus/grunt-sass" target="_blank" rel="external">grunt-sass</a>を使用する場合は次のような感じになる。</p>
<script src="//gist.github.com/kazu69/608fee58a23c4a9d838e.js?file=Gruntfile.js"></script>
<p>RailsプロジェクトなどでSassコンパイルに時間かかってるとかだと、乗り換えてみるのもいのじゃないかな。</p>
<p>参考にしたページ<br><a href="http://benfrain.com/lightning-fast-sass-compiling-with-libsass-node-sass-and-grunt-sass/" target="_blank" rel="external">Lightning fast Sass compiling with libsass, Node-sass and Grunt-sass</a><br><a href="http://www.sitepoint.com/switching-ruby-sass-libsass/" target="_blank" rel="external">Switching from Ruby Sass to LibSass</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>フロントエンド周りを触ることがあり、Sassのコンパイル速度改善をするために、<br><a href="http://libsass.org/">libsass</a>について軽く調べてみた。</p>]]>
    
    </summary>
    
      <category term="tec" scheme="http://blog.kazu69.net/categories/tec/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JSONを使ってSassとJavaScriptで設定値を共有する方法を調べてみた]]></title>
    <link href="http://blog.kazu69.net/2015/01/28/examined-how-to-share-values-with-sass-and-javascript-using-json/"/>
    <id>http://blog.kazu69.net/2015/01/28/examined-how-to-share-values-with-sass-and-javascript-using-json/</id>
    <published>2015-01-28T05:12:46.000Z</published>
    <updated>2015-05-10T16:21:06.000Z</updated>
    <content type="html"><![CDATA[<p>cssのプロパティをJavaScriptでも扱う必要があり、方法を検討してみた。</p>
<a id="more"></a>
<p>管理するデータを一つにして、JavaScriptからも参照できると、便利そう。<br>ということで、データをJSON形式でデータを持たせて、<br>データをSassのMap型にコンバートして扱うことができれば、実現可能そうなので、<br>変換するモジュールなどを調べてみた。</p>
<p>例えば以下のようなjsonがあった場合でそれぞれのパターンを試してみた。</p>
<script src="https://gist.github.com/kazu69/18930760cb6c5af323be.js?file=variables.json"></script>

<hr>
<h2 id="Compass_を使っているプロジェクトの場合">Compass を使っているプロジェクトの場合</h2><p>compass extentionとして提供されている、<a href="https://github.com/HugoGiraudel/SassyJSON/" target="_blank" rel="external">SassyJSON</a>を使う。<br>ちなみにrubygems.orgよりもGitHubから取得したほうが最新っぽいので、注意したほうが良さそう。</p>
<script src="https://gist.github.com/kazu69/18930760cb6c5af323be.js?file=use-compass.sh"></script>

<p>sassは以下のようになる。</p>
<script src="https://gist.github.com/kazu69/18930760cb6c5af323be.js?file=use-compass.scss"></script>

<p>これをコンパイルすると、</p>
<script src="https://gist.github.com/kazu69/18930760cb6c5af323be.js?file=use-compass.css"></script>

<p><strong>json_encode</strong>メソッドもあるので、contentプロパティ値にJSONの値を持たせることもで、<br>view側にもstyleとして出力もできそう。</p>
<script src="https://gist.github.com/kazu69/18930760cb6c5af323be.js?file=use-compass-output.scss"></script>

<hr>
<h2 id="Ruby_プロジェクトの場合">Ruby プロジェクトの場合</h2><p><a href="https://github.com/vigetlabs/sass-json-vars" target="_blank" rel="external">sass-json-vars</a>が良さそう。<br>JSONのネスト構造もmapに変換してくれて、JSONをそのままsass変数に変換してくれるので、<br>直感的で使いやすそう。</p>
<script src="https://gist.github.com/kazu69/18930760cb6c5af323be.js?file=use-ruby.sh"></script>

<p>sassは以下のようになる。</p>
<script src="https://gist.github.com/kazu69/18930760cb6c5af323be.js?file=use-ruby.scss"></script>

<hr>
<h2 id="そのほか">そのほか</h2><p>ビルドツールを使って、コンパイルする。<br>この場合は、gulp pluginの<a href="https://www.npmjs.com/package/gulp-json-sass" target="_blank" rel="external">gulp-json-sass</a>がある。</p>
<p>JSONをsass変数に変換するだけなので、sassファイルの結合とコンパイルには別のプラグインが必要。<br>今回は次のような感じでつかってみた。</p>
<script src="https://gist.github.com/kazu69/18930760cb6c5af323be.js?file=use-gulp.package.json"></script>

<p>gulpfile.jsは</p>
<script src="https://gist.github.com/kazu69/18930760cb6c5af323be.js?file=gulpfile.js"></script>

<p>gulp-json-sassでJSONをsass変数にconvertできるが、<br>map形式にはならないのでJSONの構造を考慮しておく必要がありそう。</p>
<p>デフォルトのままだと、次のようにconvertされる</p>
<script src="https://gist.github.com/kazu69/18930760cb6c5af323be.js?file=use-gulp-variable.scss"></script>

<p>ということなので、以下のsassファイルとgulp-concatで結合させて</p>
<script src="https://gist.github.com/kazu69/18930760cb6c5af323be.js?file=use-gulp-scss.scss"></script>

<p>gulp-sassでコンパイルする</p>
<script src="https://gist.github.com/kazu69/18930760cb6c5af323be.js?file=use-gulp-css.css"></script>

<p>他にもあるかもしれないけど、現状こんな感じでしょうか。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>cssのプロパティをJavaScriptでも扱う必要があり、方法を検討してみた。</p>]]>
    
    </summary>
    
      <category term="tec" scheme="http://blog.kazu69.net/categories/tec/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Chef12でChef Serverを試してみた]]></title>
    <link href="http://blog.kazu69.net/2015/01/27/tried-the-chef-server-at-chef12/"/>
    <id>http://blog.kazu69.net/2015/01/27/tried-the-chef-server-at-chef12/</id>
    <published>2015-01-27T10:26:12.000Z</published>
    <updated>2015-08-17T04:53:25.000Z</updated>
    <content type="html"><![CDATA[<p>普段はChef Soloしか使う機会がないので、Chef Serverを試してみた。<br>ちなみに、Chef12からはClientからServerへのリクエストにおいて、SSL証明書の検証が必要になり安全性がたかまったとか。</p>
<a id="more"></a>
<p>初めに一度それぞれの名称を整理しておく。</p>
<ul>
<li>Chef Server：Clientの管理を行う(host name: chef_server)</li>
<li>Chef Node：Chefによって構築、管理される対象(host name: chef_client)</li>
<li>Chef Workstation：Cookbookの作成、更新を行う端末</li>
</ul>
<h2 id="Vagrantfileを作成">Vagrantfileを作成</h2><p>chef-server、chef-clientの2台分VMを定義する</p>
<p>Vagrantfileにプロビジョニングコード追加して、<br>とりあえず、Chef ServerとChefのインストール。<br>ntpで時刻も合わせておく。</p>
<script src="https://gist.github.com/kazu69/0efcc34d02f5443bf0a8.js?file=Vagrantfile"></script>

<h2 id="Chef_Serverのセットアップ">Chef Serverのセットアップ</h2><script src="https://gist.github.com/kazu69/0efcc34d02f5443bf0a8.js?file=chef-server-setup.sh"></script>

<p>Web UI をインストールしている場合、192.168.33.12/signupにアクセスできるようになる。<br>workstation側でhostsの設定をしていると<a href="https://chef-server/でもアクセスできる。" target="_blank" rel="external">https://chef-server/でもアクセスできる。</a></p>
<h2 id="ユーザー、Organization作成">ユーザー、Organization作成</h2><script src="https://gist.github.com/kazu69/0efcc34d02f5443bf0a8.js?file=create-user-organization.sh"></script>

<p>またworkstationのhostsにchef-serverのipを追加しておく。</p>
<h2 id="Workstationの-chef/knife-rbの設定">Workstationの.chef/knife.rbの設定</h2><p>knife configureで指示に従って進めると、knife.rbが生成される。</p>
<script src="https://gist.github.com/kazu69/0efcc34d02f5443bf0a8.js?file=create-knife.sh"></script>

<h2 id="Workstationに鍵を転送">Workstationに鍵を転送</h2><p>knife ssl fetch を使うとChef Serverから鍵を取得できる。</p>
<script src="https://gist.github.com/kazu69/0efcc34d02f5443bf0a8.js?file=transfer-key.sh"></script>

<h2 id="node、userの確認">node、userの確認</h2><p>knife client list、knife user listでnodeとuserを確認する。</p>
<script src="https://gist.github.com/kazu69/0efcc34d02f5443bf0a8.js?file=check-user-node.sh"></script>

<h2 id="Chef_Clientの準備">Chef Clientの準備</h2><p>Chef Serverとの認証には鍵認証を使う。<br>Chef ServerはClientごとに秘密鍵を発行し、公開鍵を自身(Chef Server)に登録する。</p>
<p>Clientごとに発行するのは手間なので、Chef Serverにあらかじめ用意されているvalidator keyを使う。<br>ClientはChef Serverとの通の際にこのvalidator keyを使うと、<br>Chef ServerにClientとして登録され、以降の認証に必要な鍵が発行される。</p>
<p>これは最初の1回目にだけ利用される。<br>Chef Clientのhostsにchef-serverのipを追加して、名前解決できるようにしておく。</p>
<h2 id="WorkstationからChef_Serverにnodeを登録する">WorkstationからChef Serverにnodeを登録する</h2><p>knife bootstrapでChef Serverに対してchef-clientを実行する。</p>
<script src="https://gist.github.com/kazu69/0efcc34d02f5443bf0a8.js?file=create-node.sh"></script>

<p>ここで以下のように</p>
<pre><code>INFO: HTTP Request Returned <span class="number">401</span> Unauthorized: Failed <span class="keyword">to</span> authenticate <span class="keyword">as</span> NODENAME. Ensure <span class="keyword">that</span> your node_name <span class="keyword">and</span> client key are correct.
</code></pre><p>など401エラーが発生する場合、多くは証明書の問題っぽい。<br>エラーが出た際は<a href="https://docs.chef.io/errors.html" target="_blank" rel="external">https://docs.chef.io/errors.html</a>を一度参考すると良さそう。</p>
<h2 id="Chef_Client_の情報を取得する">Chef Client の情報を取得する</h2><script src="https://gist.github.com/kazu69/0efcc34d02f5443bf0a8.js?file=check-chef-client.sh"></script>

<h2 id="WorkstationからChef_ClientにRun_Listを適用">WorkstationからChef ClientにRun Listを適用</h2><script src="https://gist.github.com/kazu69/0efcc34d02f5443bf0a8.js?file=add-run-list.sh"></script>

<h2 id="Chef_ClientからRecipeを実行する">Chef ClientからRecipeを実行する</h2><p>nodeでcookbookを適用するには以下の条件が必要</p>
<ul>
<li>Chef Serverにcookbookが登録されている</li>
<li>Chef Serverにnodeの情報が登録されていてrun listに適用したいレシピが登録されている</li>
<li>nodeにChef Serverと通信するためのclient keyもしくはvalidator keyが配置されている</li>
</ul>
<script src="https://gist.github.com/kazu69/0efcc34d02f5443bf0a8.js?file=apply-recipe.sh"></script>

<p>運用するサーバーの台数が多くなると同時に複数台に設定を適用するのが大変になるので、<br>以下の方法でclient側で処理を行う。</p>
<ul>
<li>Chef Clientをデーモンで起動して定期的にサーバーにアクセス</li>
<li>knife ssh で指定するサーバーにコマンドを実行する</li>
<li>Kickstartなどを使い、複数nodeでchef-clientコマンドを実行する</li>
</ul>
<script src="https://gist.github.com/kazu69/0efcc34d02f5443bf0a8.js?file=running-chef-client.sh"></script>

<h2 id="Chef12からcookbookにname_attributeが必要になった">Chef12からcookbookにname attributeが必要になった</h2><p>Chef Serverとは関係ないが、Chef12からcookbookのmetadata.rbにname attributeが必要になったぽい。<br>適当な古いcookbookを使うとエラーになる。</p>
<p>そんなときは、</p>
<ul>
<li>cookbookを修正して、name attributeを追加するか、metadata.rbを削除する。</li>
<li>古いバージョンのchef-clientを利用する</li>
</ul>
<p>という方法で解決できそうだった。</p>
<p>参考にしたページ: <a href="http://www.creationline.com/lab/6644" target="_blank" rel="external">Chef 12の新機能: knife ssl check/fetch #opschef_ja #getchef_ja</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>普段はChef Soloしか使う機会がないので、Chef Serverを試してみた。<br>ちなみに、Chef12からはClientからServerへのリクエストにおいて、SSL証明書の検証が必要になり安全性がたかまったとか。</p>]]>
    
    </summary>
    
      <category term="tec" scheme="http://blog.kazu69.net/categories/tec/"/>
    
  </entry>
  
</feed>
